
Diego-clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007024  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000494  08007130  08007130  00017130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080075c4  080075c4  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080075c4  080075c4  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080075c4  080075c4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080075c4  080075c4  000175c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080075c8  080075c8  000175c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080075cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a0  20000070  0800763c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000210  0800763c  00020210  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000107b3  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003086  00000000  00000000  0003084c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fc8  00000000  00000000  000338d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e68  00000000  00000000  000348a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001aeb0  00000000  00000000  00035708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001523a  00000000  00000000  000505b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e2b2  00000000  00000000  000657f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f3aa4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a08  00000000  00000000  000f3af4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08007118 	.word	0x08007118

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08007118 	.word	0x08007118

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b084      	sub	sp, #16
 8000160:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000162:	1d3b      	adds	r3, r7, #4
 8000164:	2200      	movs	r2, #0
 8000166:	601a      	str	r2, [r3, #0]
 8000168:	605a      	str	r2, [r3, #4]
 800016a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800016c:	4b18      	ldr	r3, [pc, #96]	; (80001d0 <MX_ADC1_Init+0x74>)
 800016e:	4a19      	ldr	r2, [pc, #100]	; (80001d4 <MX_ADC1_Init+0x78>)
 8000170:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000172:	4b17      	ldr	r3, [pc, #92]	; (80001d0 <MX_ADC1_Init+0x74>)
 8000174:	2200      	movs	r2, #0
 8000176:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000178:	4b15      	ldr	r3, [pc, #84]	; (80001d0 <MX_ADC1_Init+0x74>)
 800017a:	2200      	movs	r2, #0
 800017c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800017e:	4b14      	ldr	r3, [pc, #80]	; (80001d0 <MX_ADC1_Init+0x74>)
 8000180:	2200      	movs	r2, #0
 8000182:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000184:	4b12      	ldr	r3, [pc, #72]	; (80001d0 <MX_ADC1_Init+0x74>)
 8000186:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800018a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800018c:	4b10      	ldr	r3, [pc, #64]	; (80001d0 <MX_ADC1_Init+0x74>)
 800018e:	2200      	movs	r2, #0
 8000190:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000192:	4b0f      	ldr	r3, [pc, #60]	; (80001d0 <MX_ADC1_Init+0x74>)
 8000194:	2201      	movs	r2, #1
 8000196:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000198:	480d      	ldr	r0, [pc, #52]	; (80001d0 <MX_ADC1_Init+0x74>)
 800019a:	f000 fd03 	bl	8000ba4 <HAL_ADC_Init>
 800019e:	4603      	mov	r3, r0
 80001a0:	2b00      	cmp	r3, #0
 80001a2:	d001      	beq.n	80001a8 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80001a4:	f000 fa12 	bl	80005cc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80001a8:	2301      	movs	r3, #1
 80001aa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80001ac:	2301      	movs	r3, #1
 80001ae:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80001b0:	2300      	movs	r3, #0
 80001b2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001b4:	1d3b      	adds	r3, r7, #4
 80001b6:	4619      	mov	r1, r3
 80001b8:	4805      	ldr	r0, [pc, #20]	; (80001d0 <MX_ADC1_Init+0x74>)
 80001ba:	f000 ffb7 	bl	800112c <HAL_ADC_ConfigChannel>
 80001be:	4603      	mov	r3, r0
 80001c0:	2b00      	cmp	r3, #0
 80001c2:	d001      	beq.n	80001c8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80001c4:	f000 fa02 	bl	80005cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80001c8:	bf00      	nop
 80001ca:	3710      	adds	r7, #16
 80001cc:	46bd      	mov	sp, r7
 80001ce:	bd80      	pop	{r7, pc}
 80001d0:	2000008c 	.word	0x2000008c
 80001d4:	40012400 	.word	0x40012400

080001d8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	b088      	sub	sp, #32
 80001dc:	af00      	add	r7, sp, #0
 80001de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001e0:	f107 0310 	add.w	r3, r7, #16
 80001e4:	2200      	movs	r2, #0
 80001e6:	601a      	str	r2, [r3, #0]
 80001e8:	605a      	str	r2, [r3, #4]
 80001ea:	609a      	str	r2, [r3, #8]
 80001ec:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	681b      	ldr	r3, [r3, #0]
 80001f2:	4a14      	ldr	r2, [pc, #80]	; (8000244 <HAL_ADC_MspInit+0x6c>)
 80001f4:	4293      	cmp	r3, r2
 80001f6:	d121      	bne.n	800023c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80001f8:	4b13      	ldr	r3, [pc, #76]	; (8000248 <HAL_ADC_MspInit+0x70>)
 80001fa:	699b      	ldr	r3, [r3, #24]
 80001fc:	4a12      	ldr	r2, [pc, #72]	; (8000248 <HAL_ADC_MspInit+0x70>)
 80001fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000202:	6193      	str	r3, [r2, #24]
 8000204:	4b10      	ldr	r3, [pc, #64]	; (8000248 <HAL_ADC_MspInit+0x70>)
 8000206:	699b      	ldr	r3, [r3, #24]
 8000208:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800020c:	60fb      	str	r3, [r7, #12]
 800020e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000210:	4b0d      	ldr	r3, [pc, #52]	; (8000248 <HAL_ADC_MspInit+0x70>)
 8000212:	699b      	ldr	r3, [r3, #24]
 8000214:	4a0c      	ldr	r2, [pc, #48]	; (8000248 <HAL_ADC_MspInit+0x70>)
 8000216:	f043 0304 	orr.w	r3, r3, #4
 800021a:	6193      	str	r3, [r2, #24]
 800021c:	4b0a      	ldr	r3, [pc, #40]	; (8000248 <HAL_ADC_MspInit+0x70>)
 800021e:	699b      	ldr	r3, [r3, #24]
 8000220:	f003 0304 	and.w	r3, r3, #4
 8000224:	60bb      	str	r3, [r7, #8]
 8000226:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000228:	2302      	movs	r3, #2
 800022a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800022c:	2303      	movs	r3, #3
 800022e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000230:	f107 0310 	add.w	r3, r7, #16
 8000234:	4619      	mov	r1, r3
 8000236:	4805      	ldr	r0, [pc, #20]	; (800024c <HAL_ADC_MspInit+0x74>)
 8000238:	f001 fa1a 	bl	8001670 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800023c:	bf00      	nop
 800023e:	3720      	adds	r7, #32
 8000240:	46bd      	mov	sp, r7
 8000242:	bd80      	pop	{r7, pc}
 8000244:	40012400 	.word	0x40012400
 8000248:	40021000 	.word	0x40021000
 800024c:	40010800 	.word	0x40010800

08000250 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	b088      	sub	sp, #32
 8000254:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000256:	f107 0310 	add.w	r3, r7, #16
 800025a:	2200      	movs	r2, #0
 800025c:	601a      	str	r2, [r3, #0]
 800025e:	605a      	str	r2, [r3, #4]
 8000260:	609a      	str	r2, [r3, #8]
 8000262:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000264:	4b58      	ldr	r3, [pc, #352]	; (80003c8 <MX_GPIO_Init+0x178>)
 8000266:	699b      	ldr	r3, [r3, #24]
 8000268:	4a57      	ldr	r2, [pc, #348]	; (80003c8 <MX_GPIO_Init+0x178>)
 800026a:	f043 0310 	orr.w	r3, r3, #16
 800026e:	6193      	str	r3, [r2, #24]
 8000270:	4b55      	ldr	r3, [pc, #340]	; (80003c8 <MX_GPIO_Init+0x178>)
 8000272:	699b      	ldr	r3, [r3, #24]
 8000274:	f003 0310 	and.w	r3, r3, #16
 8000278:	60fb      	str	r3, [r7, #12]
 800027a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800027c:	4b52      	ldr	r3, [pc, #328]	; (80003c8 <MX_GPIO_Init+0x178>)
 800027e:	699b      	ldr	r3, [r3, #24]
 8000280:	4a51      	ldr	r2, [pc, #324]	; (80003c8 <MX_GPIO_Init+0x178>)
 8000282:	f043 0320 	orr.w	r3, r3, #32
 8000286:	6193      	str	r3, [r2, #24]
 8000288:	4b4f      	ldr	r3, [pc, #316]	; (80003c8 <MX_GPIO_Init+0x178>)
 800028a:	699b      	ldr	r3, [r3, #24]
 800028c:	f003 0320 	and.w	r3, r3, #32
 8000290:	60bb      	str	r3, [r7, #8]
 8000292:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000294:	4b4c      	ldr	r3, [pc, #304]	; (80003c8 <MX_GPIO_Init+0x178>)
 8000296:	699b      	ldr	r3, [r3, #24]
 8000298:	4a4b      	ldr	r2, [pc, #300]	; (80003c8 <MX_GPIO_Init+0x178>)
 800029a:	f043 0304 	orr.w	r3, r3, #4
 800029e:	6193      	str	r3, [r2, #24]
 80002a0:	4b49      	ldr	r3, [pc, #292]	; (80003c8 <MX_GPIO_Init+0x178>)
 80002a2:	699b      	ldr	r3, [r3, #24]
 80002a4:	f003 0304 	and.w	r3, r3, #4
 80002a8:	607b      	str	r3, [r7, #4]
 80002aa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002ac:	4b46      	ldr	r3, [pc, #280]	; (80003c8 <MX_GPIO_Init+0x178>)
 80002ae:	699b      	ldr	r3, [r3, #24]
 80002b0:	4a45      	ldr	r2, [pc, #276]	; (80003c8 <MX_GPIO_Init+0x178>)
 80002b2:	f043 0308 	orr.w	r3, r3, #8
 80002b6:	6193      	str	r3, [r2, #24]
 80002b8:	4b43      	ldr	r3, [pc, #268]	; (80003c8 <MX_GPIO_Init+0x178>)
 80002ba:	699b      	ldr	r3, [r3, #24]
 80002bc:	f003 0308 	and.w	r3, r3, #8
 80002c0:	603b      	str	r3, [r7, #0]
 80002c2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BEEPER_1_Pin|SPI1_CS_Pin, GPIO_PIN_RESET);
 80002c4:	2200      	movs	r2, #0
 80002c6:	2150      	movs	r1, #80	; 0x50
 80002c8:	4840      	ldr	r0, [pc, #256]	; (80003cc <MX_GPIO_Init+0x17c>)
 80002ca:	f001 fb55 	bl	8001978 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 80002ce:	2200      	movs	r2, #0
 80002d0:	2101      	movs	r1, #1
 80002d2:	483f      	ldr	r0, [pc, #252]	; (80003d0 <MX_GPIO_Init+0x180>)
 80002d4:	f001 fb50 	bl	8001978 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = DS3231_ALARM_Pin|BUTTON_2_Pin;
 80002d8:	2305      	movs	r3, #5
 80002da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80002dc:	4b3d      	ldr	r3, [pc, #244]	; (80003d4 <MX_GPIO_Init+0x184>)
 80002de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80002e0:	2301      	movs	r3, #1
 80002e2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002e4:	f107 0310 	add.w	r3, r7, #16
 80002e8:	4619      	mov	r1, r3
 80002ea:	4838      	ldr	r0, [pc, #224]	; (80003cc <MX_GPIO_Init+0x17c>)
 80002ec:	f001 f9c0 	bl	8001670 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BEEPER_1_Pin;
 80002f0:	2310      	movs	r3, #16
 80002f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80002f4:	2311      	movs	r3, #17
 80002f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002f8:	2300      	movs	r3, #0
 80002fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002fc:	2302      	movs	r3, #2
 80002fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BEEPER_1_GPIO_Port, &GPIO_InitStruct);
 8000300:	f107 0310 	add.w	r3, r7, #16
 8000304:	4619      	mov	r1, r3
 8000306:	4831      	ldr	r0, [pc, #196]	; (80003cc <MX_GPIO_Init+0x17c>)
 8000308:	f001 f9b2 	bl	8001670 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 800030c:	2340      	movs	r3, #64	; 0x40
 800030e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000310:	2301      	movs	r3, #1
 8000312:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000314:	2301      	movs	r3, #1
 8000316:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000318:	2302      	movs	r3, #2
 800031a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 800031c:	f107 0310 	add.w	r3, r7, #16
 8000320:	4619      	mov	r1, r3
 8000322:	482a      	ldr	r0, [pc, #168]	; (80003cc <MX_GPIO_Init+0x17c>)
 8000324:	f001 f9a4 	bl	8001670 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8000328:	2301      	movs	r3, #1
 800032a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800032c:	2311      	movs	r3, #17
 800032e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000330:	2300      	movs	r3, #0
 8000332:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000334:	2302      	movs	r3, #2
 8000336:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8000338:	f107 0310 	add.w	r3, r7, #16
 800033c:	4619      	mov	r1, r3
 800033e:	4824      	ldr	r0, [pc, #144]	; (80003d0 <MX_GPIO_Init+0x180>)
 8000340:	f001 f996 	bl	8001670 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_3_Pin|BUTTON_4_Pin|BUTTON_5_Pin
 8000344:	f44f 739d 	mov.w	r3, #314	; 0x13a
 8000348:	613b      	str	r3, [r7, #16]
                          |BUTTON_6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800034a:	4b22      	ldr	r3, [pc, #136]	; (80003d4 <MX_GPIO_Init+0x184>)
 800034c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800034e:	2301      	movs	r3, #1
 8000350:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000352:	f107 0310 	add.w	r3, r7, #16
 8000356:	4619      	mov	r1, r3
 8000358:	481d      	ldr	r0, [pc, #116]	; (80003d0 <MX_GPIO_Init+0x180>)
 800035a:	f001 f989 	bl	8001670 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800035e:	2200      	movs	r2, #0
 8000360:	2100      	movs	r1, #0
 8000362:	2006      	movs	r0, #6
 8000364:	f001 f94d 	bl	8001602 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000368:	2006      	movs	r0, #6
 800036a:	f001 f966 	bl	800163a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800036e:	2200      	movs	r2, #0
 8000370:	2100      	movs	r1, #0
 8000372:	2007      	movs	r0, #7
 8000374:	f001 f945 	bl	8001602 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000378:	2007      	movs	r0, #7
 800037a:	f001 f95e 	bl	800163a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800037e:	2200      	movs	r2, #0
 8000380:	2100      	movs	r1, #0
 8000382:	2008      	movs	r0, #8
 8000384:	f001 f93d 	bl	8001602 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000388:	2008      	movs	r0, #8
 800038a:	f001 f956 	bl	800163a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800038e:	2200      	movs	r2, #0
 8000390:	2100      	movs	r1, #0
 8000392:	2009      	movs	r0, #9
 8000394:	f001 f935 	bl	8001602 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000398:	2009      	movs	r0, #9
 800039a:	f001 f94e 	bl	800163a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800039e:	2200      	movs	r2, #0
 80003a0:	2100      	movs	r1, #0
 80003a2:	200a      	movs	r0, #10
 80003a4:	f001 f92d 	bl	8001602 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80003a8:	200a      	movs	r0, #10
 80003aa:	f001 f946 	bl	800163a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80003ae:	2200      	movs	r2, #0
 80003b0:	2100      	movs	r1, #0
 80003b2:	2017      	movs	r0, #23
 80003b4:	f001 f925 	bl	8001602 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80003b8:	2017      	movs	r0, #23
 80003ba:	f001 f93e 	bl	800163a <HAL_NVIC_EnableIRQ>

}
 80003be:	bf00      	nop
 80003c0:	3720      	adds	r7, #32
 80003c2:	46bd      	mov	sp, r7
 80003c4:	bd80      	pop	{r7, pc}
 80003c6:	bf00      	nop
 80003c8:	40021000 	.word	0x40021000
 80003cc:	40010800 	.word	0x40010800
 80003d0:	40010c00 	.word	0x40010c00
 80003d4:	10210000 	.word	0x10210000

080003d8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80003dc:	4b12      	ldr	r3, [pc, #72]	; (8000428 <MX_I2C1_Init+0x50>)
 80003de:	4a13      	ldr	r2, [pc, #76]	; (800042c <MX_I2C1_Init+0x54>)
 80003e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80003e2:	4b11      	ldr	r3, [pc, #68]	; (8000428 <MX_I2C1_Init+0x50>)
 80003e4:	4a12      	ldr	r2, [pc, #72]	; (8000430 <MX_I2C1_Init+0x58>)
 80003e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80003e8:	4b0f      	ldr	r3, [pc, #60]	; (8000428 <MX_I2C1_Init+0x50>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80003ee:	4b0e      	ldr	r3, [pc, #56]	; (8000428 <MX_I2C1_Init+0x50>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003f4:	4b0c      	ldr	r3, [pc, #48]	; (8000428 <MX_I2C1_Init+0x50>)
 80003f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80003fa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003fc:	4b0a      	ldr	r3, [pc, #40]	; (8000428 <MX_I2C1_Init+0x50>)
 80003fe:	2200      	movs	r2, #0
 8000400:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000402:	4b09      	ldr	r3, [pc, #36]	; (8000428 <MX_I2C1_Init+0x50>)
 8000404:	2200      	movs	r2, #0
 8000406:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000408:	4b07      	ldr	r3, [pc, #28]	; (8000428 <MX_I2C1_Init+0x50>)
 800040a:	2200      	movs	r2, #0
 800040c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800040e:	4b06      	ldr	r3, [pc, #24]	; (8000428 <MX_I2C1_Init+0x50>)
 8000410:	2200      	movs	r2, #0
 8000412:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000414:	4804      	ldr	r0, [pc, #16]	; (8000428 <MX_I2C1_Init+0x50>)
 8000416:	f001 fb03 	bl	8001a20 <HAL_I2C_Init>
 800041a:	4603      	mov	r3, r0
 800041c:	2b00      	cmp	r3, #0
 800041e:	d001      	beq.n	8000424 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000420:	f000 f8d4 	bl	80005cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000424:	bf00      	nop
 8000426:	bd80      	pop	{r7, pc}
 8000428:	200000bc 	.word	0x200000bc
 800042c:	40005400 	.word	0x40005400
 8000430:	000186a0 	.word	0x000186a0

08000434 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b088      	sub	sp, #32
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800043c:	f107 0310 	add.w	r3, r7, #16
 8000440:	2200      	movs	r2, #0
 8000442:	601a      	str	r2, [r3, #0]
 8000444:	605a      	str	r2, [r3, #4]
 8000446:	609a      	str	r2, [r3, #8]
 8000448:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	4a15      	ldr	r2, [pc, #84]	; (80004a4 <HAL_I2C_MspInit+0x70>)
 8000450:	4293      	cmp	r3, r2
 8000452:	d123      	bne.n	800049c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000454:	4b14      	ldr	r3, [pc, #80]	; (80004a8 <HAL_I2C_MspInit+0x74>)
 8000456:	699b      	ldr	r3, [r3, #24]
 8000458:	4a13      	ldr	r2, [pc, #76]	; (80004a8 <HAL_I2C_MspInit+0x74>)
 800045a:	f043 0308 	orr.w	r3, r3, #8
 800045e:	6193      	str	r3, [r2, #24]
 8000460:	4b11      	ldr	r3, [pc, #68]	; (80004a8 <HAL_I2C_MspInit+0x74>)
 8000462:	699b      	ldr	r3, [r3, #24]
 8000464:	f003 0308 	and.w	r3, r3, #8
 8000468:	60fb      	str	r3, [r7, #12]
 800046a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800046c:	23c0      	movs	r3, #192	; 0xc0
 800046e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000470:	2312      	movs	r3, #18
 8000472:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000474:	2303      	movs	r3, #3
 8000476:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000478:	f107 0310 	add.w	r3, r7, #16
 800047c:	4619      	mov	r1, r3
 800047e:	480b      	ldr	r0, [pc, #44]	; (80004ac <HAL_I2C_MspInit+0x78>)
 8000480:	f001 f8f6 	bl	8001670 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000484:	4b08      	ldr	r3, [pc, #32]	; (80004a8 <HAL_I2C_MspInit+0x74>)
 8000486:	69db      	ldr	r3, [r3, #28]
 8000488:	4a07      	ldr	r2, [pc, #28]	; (80004a8 <HAL_I2C_MspInit+0x74>)
 800048a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800048e:	61d3      	str	r3, [r2, #28]
 8000490:	4b05      	ldr	r3, [pc, #20]	; (80004a8 <HAL_I2C_MspInit+0x74>)
 8000492:	69db      	ldr	r3, [r3, #28]
 8000494:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000498:	60bb      	str	r3, [r7, #8]
 800049a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800049c:	bf00      	nop
 800049e:	3720      	adds	r7, #32
 80004a0:	46bd      	mov	sp, r7
 80004a2:	bd80      	pop	{r7, pc}
 80004a4:	40005400 	.word	0x40005400
 80004a8:	40021000 	.word	0x40021000
 80004ac:	40010c00 	.word	0x40010c00

080004b0 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80004b4:	4b09      	ldr	r3, [pc, #36]	; (80004dc <MX_IWDG_Init+0x2c>)
 80004b6:	4a0a      	ldr	r2, [pc, #40]	; (80004e0 <MX_IWDG_Init+0x30>)
 80004b8:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_16;
 80004ba:	4b08      	ldr	r3, [pc, #32]	; (80004dc <MX_IWDG_Init+0x2c>)
 80004bc:	2202      	movs	r2, #2
 80004be:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4000;
 80004c0:	4b06      	ldr	r3, [pc, #24]	; (80004dc <MX_IWDG_Init+0x2c>)
 80004c2:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80004c6:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80004c8:	4804      	ldr	r0, [pc, #16]	; (80004dc <MX_IWDG_Init+0x2c>)
 80004ca:	f002 fd35 	bl	8002f38 <HAL_IWDG_Init>
 80004ce:	4603      	mov	r3, r0
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d001      	beq.n	80004d8 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 80004d4:	f000 f87a 	bl	80005cc <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80004d8:	bf00      	nop
 80004da:	bd80      	pop	{r7, pc}
 80004dc:	20000110 	.word	0x20000110
 80004e0:	40003000 	.word	0x40003000

080004e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e8:	f000 fad6 	bl	8000a98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ec:	f000 f811 	bl	8000512 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f0:	f7ff feae 	bl	8000250 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004f4:	f7ff ff70 	bl	80003d8 <MX_I2C1_Init>
  MX_SPI1_Init();
 80004f8:	f000 f86e 	bl	80005d8 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80004fc:	f000 fa30 	bl	8000960 <MX_USART1_UART_Init>
  MX_IWDG_Init();
 8000500:	f7ff ffd6 	bl	80004b0 <MX_IWDG_Init>
  MX_ADC1_Init();
 8000504:	f7ff fe2a 	bl	800015c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

	  Digit_clock_Init();
 8000508:	f003 ff3a 	bl	8004380 <Digit_clock_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Digit_clock_Main();
 800050c:	f004 f816 	bl	800453c <Digit_clock_Main>
 8000510:	e7fc      	b.n	800050c <main+0x28>

08000512 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000512:	b580      	push	{r7, lr}
 8000514:	b094      	sub	sp, #80	; 0x50
 8000516:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000518:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800051c:	2228      	movs	r2, #40	; 0x28
 800051e:	2100      	movs	r1, #0
 8000520:	4618      	mov	r0, r3
 8000522:	f005 fbd7 	bl	8005cd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000526:	f107 0314 	add.w	r3, r7, #20
 800052a:	2200      	movs	r2, #0
 800052c:	601a      	str	r2, [r3, #0]
 800052e:	605a      	str	r2, [r3, #4]
 8000530:	609a      	str	r2, [r3, #8]
 8000532:	60da      	str	r2, [r3, #12]
 8000534:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000536:	1d3b      	adds	r3, r7, #4
 8000538:	2200      	movs	r2, #0
 800053a:	601a      	str	r2, [r3, #0]
 800053c:	605a      	str	r2, [r3, #4]
 800053e:	609a      	str	r2, [r3, #8]
 8000540:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000542:	2309      	movs	r3, #9
 8000544:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000546:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800054a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800054c:	2300      	movs	r3, #0
 800054e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000550:	2301      	movs	r3, #1
 8000552:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000554:	2301      	movs	r3, #1
 8000556:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000558:	2302      	movs	r3, #2
 800055a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800055c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000560:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000562:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000566:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000568:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800056c:	4618      	mov	r0, r3
 800056e:	f002 fd35 	bl	8002fdc <HAL_RCC_OscConfig>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	d001      	beq.n	800057c <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000578:	f000 f828 	bl	80005cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800057c:	230f      	movs	r3, #15
 800057e:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000580:	2302      	movs	r3, #2
 8000582:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000584:	2300      	movs	r3, #0
 8000586:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000588:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800058c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800058e:	2300      	movs	r3, #0
 8000590:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000592:	f107 0314 	add.w	r3, r7, #20
 8000596:	2102      	movs	r1, #2
 8000598:	4618      	mov	r0, r3
 800059a:	f002 ffa1 	bl	80034e0 <HAL_RCC_ClockConfig>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d001      	beq.n	80005a8 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005a4:	f000 f812 	bl	80005cc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80005a8:	2302      	movs	r3, #2
 80005aa:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 80005ac:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80005b0:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005b2:	1d3b      	adds	r3, r7, #4
 80005b4:	4618      	mov	r0, r3
 80005b6:	f003 f92b 	bl	8003810 <HAL_RCCEx_PeriphCLKConfig>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d001      	beq.n	80005c4 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80005c0:	f000 f804 	bl	80005cc <Error_Handler>
  }
}
 80005c4:	bf00      	nop
 80005c6:	3750      	adds	r7, #80	; 0x50
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}

080005cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005d0:	b672      	cpsid	i
}
 80005d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005d4:	e7fe      	b.n	80005d4 <Error_Handler+0x8>
	...

080005d8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80005dc:	4b18      	ldr	r3, [pc, #96]	; (8000640 <MX_SPI1_Init+0x68>)
 80005de:	4a19      	ldr	r2, [pc, #100]	; (8000644 <MX_SPI1_Init+0x6c>)
 80005e0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80005e2:	4b17      	ldr	r3, [pc, #92]	; (8000640 <MX_SPI1_Init+0x68>)
 80005e4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80005e8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 80005ea:	4b15      	ldr	r3, [pc, #84]	; (8000640 <MX_SPI1_Init+0x68>)
 80005ec:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80005f0:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80005f2:	4b13      	ldr	r3, [pc, #76]	; (8000640 <MX_SPI1_Init+0x68>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80005f8:	4b11      	ldr	r3, [pc, #68]	; (8000640 <MX_SPI1_Init+0x68>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80005fe:	4b10      	ldr	r3, [pc, #64]	; (8000640 <MX_SPI1_Init+0x68>)
 8000600:	2200      	movs	r2, #0
 8000602:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000604:	4b0e      	ldr	r3, [pc, #56]	; (8000640 <MX_SPI1_Init+0x68>)
 8000606:	f44f 7200 	mov.w	r2, #512	; 0x200
 800060a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800060c:	4b0c      	ldr	r3, [pc, #48]	; (8000640 <MX_SPI1_Init+0x68>)
 800060e:	2230      	movs	r2, #48	; 0x30
 8000610:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000612:	4b0b      	ldr	r3, [pc, #44]	; (8000640 <MX_SPI1_Init+0x68>)
 8000614:	2200      	movs	r2, #0
 8000616:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000618:	4b09      	ldr	r3, [pc, #36]	; (8000640 <MX_SPI1_Init+0x68>)
 800061a:	2200      	movs	r2, #0
 800061c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800061e:	4b08      	ldr	r3, [pc, #32]	; (8000640 <MX_SPI1_Init+0x68>)
 8000620:	2200      	movs	r2, #0
 8000622:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000624:	4b06      	ldr	r3, [pc, #24]	; (8000640 <MX_SPI1_Init+0x68>)
 8000626:	220a      	movs	r2, #10
 8000628:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800062a:	4805      	ldr	r0, [pc, #20]	; (8000640 <MX_SPI1_Init+0x68>)
 800062c:	f003 fa66 	bl	8003afc <HAL_SPI_Init>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8000636:	f7ff ffc9 	bl	80005cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800063a:	bf00      	nop
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	2000011c 	.word	0x2000011c
 8000644:	40013000 	.word	0x40013000

08000648 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b088      	sub	sp, #32
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000650:	f107 0310 	add.w	r3, r7, #16
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
 8000658:	605a      	str	r2, [r3, #4]
 800065a:	609a      	str	r2, [r3, #8]
 800065c:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	4a15      	ldr	r2, [pc, #84]	; (80006b8 <HAL_SPI_MspInit+0x70>)
 8000664:	4293      	cmp	r3, r2
 8000666:	d123      	bne.n	80006b0 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000668:	4b14      	ldr	r3, [pc, #80]	; (80006bc <HAL_SPI_MspInit+0x74>)
 800066a:	699b      	ldr	r3, [r3, #24]
 800066c:	4a13      	ldr	r2, [pc, #76]	; (80006bc <HAL_SPI_MspInit+0x74>)
 800066e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000672:	6193      	str	r3, [r2, #24]
 8000674:	4b11      	ldr	r3, [pc, #68]	; (80006bc <HAL_SPI_MspInit+0x74>)
 8000676:	699b      	ldr	r3, [r3, #24]
 8000678:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800067c:	60fb      	str	r3, [r7, #12]
 800067e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000680:	4b0e      	ldr	r3, [pc, #56]	; (80006bc <HAL_SPI_MspInit+0x74>)
 8000682:	699b      	ldr	r3, [r3, #24]
 8000684:	4a0d      	ldr	r2, [pc, #52]	; (80006bc <HAL_SPI_MspInit+0x74>)
 8000686:	f043 0304 	orr.w	r3, r3, #4
 800068a:	6193      	str	r3, [r2, #24]
 800068c:	4b0b      	ldr	r3, [pc, #44]	; (80006bc <HAL_SPI_MspInit+0x74>)
 800068e:	699b      	ldr	r3, [r3, #24]
 8000690:	f003 0304 	and.w	r3, r3, #4
 8000694:	60bb      	str	r3, [r7, #8]
 8000696:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000698:	23a0      	movs	r3, #160	; 0xa0
 800069a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800069c:	2302      	movs	r3, #2
 800069e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006a0:	2303      	movs	r3, #3
 80006a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006a4:	f107 0310 	add.w	r3, r7, #16
 80006a8:	4619      	mov	r1, r3
 80006aa:	4805      	ldr	r0, [pc, #20]	; (80006c0 <HAL_SPI_MspInit+0x78>)
 80006ac:	f000 ffe0 	bl	8001670 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80006b0:	bf00      	nop
 80006b2:	3720      	adds	r7, #32
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	40013000 	.word	0x40013000
 80006bc:	40021000 	.word	0x40021000
 80006c0:	40010800 	.word	0x40010800

080006c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	b085      	sub	sp, #20
 80006c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80006ca:	4b15      	ldr	r3, [pc, #84]	; (8000720 <HAL_MspInit+0x5c>)
 80006cc:	699b      	ldr	r3, [r3, #24]
 80006ce:	4a14      	ldr	r2, [pc, #80]	; (8000720 <HAL_MspInit+0x5c>)
 80006d0:	f043 0301 	orr.w	r3, r3, #1
 80006d4:	6193      	str	r3, [r2, #24]
 80006d6:	4b12      	ldr	r3, [pc, #72]	; (8000720 <HAL_MspInit+0x5c>)
 80006d8:	699b      	ldr	r3, [r3, #24]
 80006da:	f003 0301 	and.w	r3, r3, #1
 80006de:	60bb      	str	r3, [r7, #8]
 80006e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e2:	4b0f      	ldr	r3, [pc, #60]	; (8000720 <HAL_MspInit+0x5c>)
 80006e4:	69db      	ldr	r3, [r3, #28]
 80006e6:	4a0e      	ldr	r2, [pc, #56]	; (8000720 <HAL_MspInit+0x5c>)
 80006e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ec:	61d3      	str	r3, [r2, #28]
 80006ee:	4b0c      	ldr	r3, [pc, #48]	; (8000720 <HAL_MspInit+0x5c>)
 80006f0:	69db      	ldr	r3, [r3, #28]
 80006f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006f6:	607b      	str	r3, [r7, #4]
 80006f8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80006fa:	4b0a      	ldr	r3, [pc, #40]	; (8000724 <HAL_MspInit+0x60>)
 80006fc:	685b      	ldr	r3, [r3, #4]
 80006fe:	60fb      	str	r3, [r7, #12]
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000706:	60fb      	str	r3, [r7, #12]
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800070e:	60fb      	str	r3, [r7, #12]
 8000710:	4a04      	ldr	r2, [pc, #16]	; (8000724 <HAL_MspInit+0x60>)
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000716:	bf00      	nop
 8000718:	3714      	adds	r7, #20
 800071a:	46bd      	mov	sp, r7
 800071c:	bc80      	pop	{r7}
 800071e:	4770      	bx	lr
 8000720:	40021000 	.word	0x40021000
 8000724:	40010000 	.word	0x40010000

08000728 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800072c:	e7fe      	b.n	800072c <NMI_Handler+0x4>

0800072e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800072e:	b480      	push	{r7}
 8000730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000732:	e7fe      	b.n	8000732 <HardFault_Handler+0x4>

08000734 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000738:	e7fe      	b.n	8000738 <MemManage_Handler+0x4>

0800073a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800073a:	b480      	push	{r7}
 800073c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800073e:	e7fe      	b.n	800073e <BusFault_Handler+0x4>

08000740 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000744:	e7fe      	b.n	8000744 <UsageFault_Handler+0x4>

08000746 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000746:	b480      	push	{r7}
 8000748:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800074a:	bf00      	nop
 800074c:	46bd      	mov	sp, r7
 800074e:	bc80      	pop	{r7}
 8000750:	4770      	bx	lr

08000752 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000752:	b480      	push	{r7}
 8000754:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000756:	bf00      	nop
 8000758:	46bd      	mov	sp, r7
 800075a:	bc80      	pop	{r7}
 800075c:	4770      	bx	lr

0800075e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800075e:	b480      	push	{r7}
 8000760:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000762:	bf00      	nop
 8000764:	46bd      	mov	sp, r7
 8000766:	bc80      	pop	{r7}
 8000768:	4770      	bx	lr

0800076a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800076a:	b580      	push	{r7, lr}
 800076c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800076e:	f000 f9d9 	bl	8000b24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000772:	bf00      	nop
 8000774:	bd80      	pop	{r7, pc}

08000776 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000776:	b580      	push	{r7, lr}
 8000778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DS3231_ALARM_Pin);
 800077a:	2001      	movs	r0, #1
 800077c:	f001 f92e 	bl	80019dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000780:	bf00      	nop
 8000782:	bd80      	pop	{r7, pc}

08000784 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_1_Pin);
 8000788:	2002      	movs	r0, #2
 800078a:	f001 f927 	bl	80019dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}

08000792 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000792:	b580      	push	{r7, lr}
 8000794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_2_Pin);
 8000796:	2004      	movs	r0, #4
 8000798:	f001 f920 	bl	80019dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800079c:	bf00      	nop
 800079e:	bd80      	pop	{r7, pc}

080007a0 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_3_Pin);
 80007a4:	2008      	movs	r0, #8
 80007a6:	f001 f919 	bl	80019dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80007aa:	bf00      	nop
 80007ac:	bd80      	pop	{r7, pc}

080007ae <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80007ae:	b580      	push	{r7, lr}
 80007b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_4_Pin);
 80007b2:	2010      	movs	r0, #16
 80007b4:	f001 f912 	bl	80019dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80007b8:	bf00      	nop
 80007ba:	bd80      	pop	{r7, pc}

080007bc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_5_Pin);
 80007c0:	2020      	movs	r0, #32
 80007c2:	f001 f90b 	bl	80019dc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_6_Pin);
 80007c6:	f44f 7080 	mov.w	r0, #256	; 0x100
 80007ca:	f001 f907 	bl	80019dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80007ce:	bf00      	nop
 80007d0:	bd80      	pop	{r7, pc}

080007d2 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80007d2:	b480      	push	{r7}
 80007d4:	af00      	add	r7, sp, #0
	return 1;
 80007d6:	2301      	movs	r3, #1
}
 80007d8:	4618      	mov	r0, r3
 80007da:	46bd      	mov	sp, r7
 80007dc:	bc80      	pop	{r7}
 80007de:	4770      	bx	lr

080007e0 <_kill>:

int _kill(int pid, int sig)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
 80007e8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80007ea:	f005 fa49 	bl	8005c80 <__errno>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2216      	movs	r2, #22
 80007f2:	601a      	str	r2, [r3, #0]
	return -1;
 80007f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80007f8:	4618      	mov	r0, r3
 80007fa:	3708      	adds	r7, #8
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}

08000800 <_exit>:

void _exit (int status)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000808:	f04f 31ff 	mov.w	r1, #4294967295
 800080c:	6878      	ldr	r0, [r7, #4]
 800080e:	f7ff ffe7 	bl	80007e0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000812:	e7fe      	b.n	8000812 <_exit+0x12>

08000814 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b086      	sub	sp, #24
 8000818:	af00      	add	r7, sp, #0
 800081a:	60f8      	str	r0, [r7, #12]
 800081c:	60b9      	str	r1, [r7, #8]
 800081e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000820:	2300      	movs	r3, #0
 8000822:	617b      	str	r3, [r7, #20]
 8000824:	e00a      	b.n	800083c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000826:	f3af 8000 	nop.w
 800082a:	4601      	mov	r1, r0
 800082c:	68bb      	ldr	r3, [r7, #8]
 800082e:	1c5a      	adds	r2, r3, #1
 8000830:	60ba      	str	r2, [r7, #8]
 8000832:	b2ca      	uxtb	r2, r1
 8000834:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000836:	697b      	ldr	r3, [r7, #20]
 8000838:	3301      	adds	r3, #1
 800083a:	617b      	str	r3, [r7, #20]
 800083c:	697a      	ldr	r2, [r7, #20]
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	429a      	cmp	r2, r3
 8000842:	dbf0      	blt.n	8000826 <_read+0x12>
	}

return len;
 8000844:	687b      	ldr	r3, [r7, #4]
}
 8000846:	4618      	mov	r0, r3
 8000848:	3718      	adds	r7, #24
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}

0800084e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800084e:	b580      	push	{r7, lr}
 8000850:	b086      	sub	sp, #24
 8000852:	af00      	add	r7, sp, #0
 8000854:	60f8      	str	r0, [r7, #12]
 8000856:	60b9      	str	r1, [r7, #8]
 8000858:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800085a:	2300      	movs	r3, #0
 800085c:	617b      	str	r3, [r7, #20]
 800085e:	e009      	b.n	8000874 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000860:	68bb      	ldr	r3, [r7, #8]
 8000862:	1c5a      	adds	r2, r3, #1
 8000864:	60ba      	str	r2, [r7, #8]
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	4618      	mov	r0, r3
 800086a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800086e:	697b      	ldr	r3, [r7, #20]
 8000870:	3301      	adds	r3, #1
 8000872:	617b      	str	r3, [r7, #20]
 8000874:	697a      	ldr	r2, [r7, #20]
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	429a      	cmp	r2, r3
 800087a:	dbf1      	blt.n	8000860 <_write+0x12>
	}
	return len;
 800087c:	687b      	ldr	r3, [r7, #4]
}
 800087e:	4618      	mov	r0, r3
 8000880:	3718      	adds	r7, #24
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}

08000886 <_close>:

int _close(int file)
{
 8000886:	b480      	push	{r7}
 8000888:	b083      	sub	sp, #12
 800088a:	af00      	add	r7, sp, #0
 800088c:	6078      	str	r0, [r7, #4]
	return -1;
 800088e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000892:	4618      	mov	r0, r3
 8000894:	370c      	adds	r7, #12
 8000896:	46bd      	mov	sp, r7
 8000898:	bc80      	pop	{r7}
 800089a:	4770      	bx	lr

0800089c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800089c:	b480      	push	{r7}
 800089e:	b083      	sub	sp, #12
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
 80008a4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80008a6:	683b      	ldr	r3, [r7, #0]
 80008a8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008ac:	605a      	str	r2, [r3, #4]
	return 0;
 80008ae:	2300      	movs	r3, #0
}
 80008b0:	4618      	mov	r0, r3
 80008b2:	370c      	adds	r7, #12
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bc80      	pop	{r7}
 80008b8:	4770      	bx	lr

080008ba <_isatty>:

int _isatty(int file)
{
 80008ba:	b480      	push	{r7}
 80008bc:	b083      	sub	sp, #12
 80008be:	af00      	add	r7, sp, #0
 80008c0:	6078      	str	r0, [r7, #4]
	return 1;
 80008c2:	2301      	movs	r3, #1
}
 80008c4:	4618      	mov	r0, r3
 80008c6:	370c      	adds	r7, #12
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bc80      	pop	{r7}
 80008cc:	4770      	bx	lr

080008ce <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80008ce:	b480      	push	{r7}
 80008d0:	b085      	sub	sp, #20
 80008d2:	af00      	add	r7, sp, #0
 80008d4:	60f8      	str	r0, [r7, #12]
 80008d6:	60b9      	str	r1, [r7, #8]
 80008d8:	607a      	str	r2, [r7, #4]
	return 0;
 80008da:	2300      	movs	r3, #0
}
 80008dc:	4618      	mov	r0, r3
 80008de:	3714      	adds	r7, #20
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bc80      	pop	{r7}
 80008e4:	4770      	bx	lr
	...

080008e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b086      	sub	sp, #24
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008f0:	4a14      	ldr	r2, [pc, #80]	; (8000944 <_sbrk+0x5c>)
 80008f2:	4b15      	ldr	r3, [pc, #84]	; (8000948 <_sbrk+0x60>)
 80008f4:	1ad3      	subs	r3, r2, r3
 80008f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008f8:	697b      	ldr	r3, [r7, #20]
 80008fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008fc:	4b13      	ldr	r3, [pc, #76]	; (800094c <_sbrk+0x64>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	2b00      	cmp	r3, #0
 8000902:	d102      	bne.n	800090a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000904:	4b11      	ldr	r3, [pc, #68]	; (800094c <_sbrk+0x64>)
 8000906:	4a12      	ldr	r2, [pc, #72]	; (8000950 <_sbrk+0x68>)
 8000908:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800090a:	4b10      	ldr	r3, [pc, #64]	; (800094c <_sbrk+0x64>)
 800090c:	681a      	ldr	r2, [r3, #0]
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	4413      	add	r3, r2
 8000912:	693a      	ldr	r2, [r7, #16]
 8000914:	429a      	cmp	r2, r3
 8000916:	d207      	bcs.n	8000928 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000918:	f005 f9b2 	bl	8005c80 <__errno>
 800091c:	4603      	mov	r3, r0
 800091e:	220c      	movs	r2, #12
 8000920:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000922:	f04f 33ff 	mov.w	r3, #4294967295
 8000926:	e009      	b.n	800093c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000928:	4b08      	ldr	r3, [pc, #32]	; (800094c <_sbrk+0x64>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800092e:	4b07      	ldr	r3, [pc, #28]	; (800094c <_sbrk+0x64>)
 8000930:	681a      	ldr	r2, [r3, #0]
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	4413      	add	r3, r2
 8000936:	4a05      	ldr	r2, [pc, #20]	; (800094c <_sbrk+0x64>)
 8000938:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800093a:	68fb      	ldr	r3, [r7, #12]
}
 800093c:	4618      	mov	r0, r3
 800093e:	3718      	adds	r7, #24
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	20005000 	.word	0x20005000
 8000948:	00000400 	.word	0x00000400
 800094c:	20000174 	.word	0x20000174
 8000950:	20000210 	.word	0x20000210

08000954 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000958:	bf00      	nop
 800095a:	46bd      	mov	sp, r7
 800095c:	bc80      	pop	{r7}
 800095e:	4770      	bx	lr

08000960 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000964:	4b11      	ldr	r3, [pc, #68]	; (80009ac <MX_USART1_UART_Init+0x4c>)
 8000966:	4a12      	ldr	r2, [pc, #72]	; (80009b0 <MX_USART1_UART_Init+0x50>)
 8000968:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800096a:	4b10      	ldr	r3, [pc, #64]	; (80009ac <MX_USART1_UART_Init+0x4c>)
 800096c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000970:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000972:	4b0e      	ldr	r3, [pc, #56]	; (80009ac <MX_USART1_UART_Init+0x4c>)
 8000974:	2200      	movs	r2, #0
 8000976:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000978:	4b0c      	ldr	r3, [pc, #48]	; (80009ac <MX_USART1_UART_Init+0x4c>)
 800097a:	2200      	movs	r2, #0
 800097c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800097e:	4b0b      	ldr	r3, [pc, #44]	; (80009ac <MX_USART1_UART_Init+0x4c>)
 8000980:	2200      	movs	r2, #0
 8000982:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000984:	4b09      	ldr	r3, [pc, #36]	; (80009ac <MX_USART1_UART_Init+0x4c>)
 8000986:	220c      	movs	r2, #12
 8000988:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800098a:	4b08      	ldr	r3, [pc, #32]	; (80009ac <MX_USART1_UART_Init+0x4c>)
 800098c:	2200      	movs	r2, #0
 800098e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000990:	4b06      	ldr	r3, [pc, #24]	; (80009ac <MX_USART1_UART_Init+0x4c>)
 8000992:	2200      	movs	r2, #0
 8000994:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000996:	4805      	ldr	r0, [pc, #20]	; (80009ac <MX_USART1_UART_Init+0x4c>)
 8000998:	f003 fb16 	bl	8003fc8 <HAL_UART_Init>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80009a2:	f7ff fe13 	bl	80005cc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009a6:	bf00      	nop
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	20000178 	.word	0x20000178
 80009b0:	40013800 	.word	0x40013800

080009b4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b088      	sub	sp, #32
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009bc:	f107 0310 	add.w	r3, r7, #16
 80009c0:	2200      	movs	r2, #0
 80009c2:	601a      	str	r2, [r3, #0]
 80009c4:	605a      	str	r2, [r3, #4]
 80009c6:	609a      	str	r2, [r3, #8]
 80009c8:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	4a1c      	ldr	r2, [pc, #112]	; (8000a40 <HAL_UART_MspInit+0x8c>)
 80009d0:	4293      	cmp	r3, r2
 80009d2:	d131      	bne.n	8000a38 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80009d4:	4b1b      	ldr	r3, [pc, #108]	; (8000a44 <HAL_UART_MspInit+0x90>)
 80009d6:	699b      	ldr	r3, [r3, #24]
 80009d8:	4a1a      	ldr	r2, [pc, #104]	; (8000a44 <HAL_UART_MspInit+0x90>)
 80009da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009de:	6193      	str	r3, [r2, #24]
 80009e0:	4b18      	ldr	r3, [pc, #96]	; (8000a44 <HAL_UART_MspInit+0x90>)
 80009e2:	699b      	ldr	r3, [r3, #24]
 80009e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009e8:	60fb      	str	r3, [r7, #12]
 80009ea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ec:	4b15      	ldr	r3, [pc, #84]	; (8000a44 <HAL_UART_MspInit+0x90>)
 80009ee:	699b      	ldr	r3, [r3, #24]
 80009f0:	4a14      	ldr	r2, [pc, #80]	; (8000a44 <HAL_UART_MspInit+0x90>)
 80009f2:	f043 0304 	orr.w	r3, r3, #4
 80009f6:	6193      	str	r3, [r2, #24]
 80009f8:	4b12      	ldr	r3, [pc, #72]	; (8000a44 <HAL_UART_MspInit+0x90>)
 80009fa:	699b      	ldr	r3, [r3, #24]
 80009fc:	f003 0304 	and.w	r3, r3, #4
 8000a00:	60bb      	str	r3, [r7, #8]
 8000a02:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000a04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a08:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a0a:	2302      	movs	r3, #2
 8000a0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a0e:	2303      	movs	r3, #3
 8000a10:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a12:	f107 0310 	add.w	r3, r7, #16
 8000a16:	4619      	mov	r1, r3
 8000a18:	480b      	ldr	r0, [pc, #44]	; (8000a48 <HAL_UART_MspInit+0x94>)
 8000a1a:	f000 fe29 	bl	8001670 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000a1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a22:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a24:	2300      	movs	r3, #0
 8000a26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a2c:	f107 0310 	add.w	r3, r7, #16
 8000a30:	4619      	mov	r1, r3
 8000a32:	4805      	ldr	r0, [pc, #20]	; (8000a48 <HAL_UART_MspInit+0x94>)
 8000a34:	f000 fe1c 	bl	8001670 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000a38:	bf00      	nop
 8000a3a:	3720      	adds	r7, #32
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	40013800 	.word	0x40013800
 8000a44:	40021000 	.word	0x40021000
 8000a48:	40010800 	.word	0x40010800

08000a4c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a4c:	480c      	ldr	r0, [pc, #48]	; (8000a80 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a4e:	490d      	ldr	r1, [pc, #52]	; (8000a84 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a50:	4a0d      	ldr	r2, [pc, #52]	; (8000a88 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a54:	e002      	b.n	8000a5c <LoopCopyDataInit>

08000a56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a5a:	3304      	adds	r3, #4

08000a5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a60:	d3f9      	bcc.n	8000a56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a62:	4a0a      	ldr	r2, [pc, #40]	; (8000a8c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a64:	4c0a      	ldr	r4, [pc, #40]	; (8000a90 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a68:	e001      	b.n	8000a6e <LoopFillZerobss>

08000a6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a6c:	3204      	adds	r2, #4

08000a6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a70:	d3fb      	bcc.n	8000a6a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a72:	f7ff ff6f 	bl	8000954 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a76:	f005 f909 	bl	8005c8c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a7a:	f7ff fd33 	bl	80004e4 <main>
  bx lr
 8000a7e:	4770      	bx	lr
  ldr r0, =_sdata
 8000a80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a84:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000a88:	080075cc 	.word	0x080075cc
  ldr r2, =_sbss
 8000a8c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000a90:	20000210 	.word	0x20000210

08000a94 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a94:	e7fe      	b.n	8000a94 <ADC1_2_IRQHandler>
	...

08000a98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a9c:	4b08      	ldr	r3, [pc, #32]	; (8000ac0 <HAL_Init+0x28>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a07      	ldr	r2, [pc, #28]	; (8000ac0 <HAL_Init+0x28>)
 8000aa2:	f043 0310 	orr.w	r3, r3, #16
 8000aa6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000aa8:	2003      	movs	r0, #3
 8000aaa:	f000 fd9f 	bl	80015ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000aae:	2000      	movs	r0, #0
 8000ab0:	f000 f808 	bl	8000ac4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ab4:	f7ff fe06 	bl	80006c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ab8:	2300      	movs	r3, #0
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	40022000 	.word	0x40022000

08000ac4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000acc:	4b12      	ldr	r3, [pc, #72]	; (8000b18 <HAL_InitTick+0x54>)
 8000ace:	681a      	ldr	r2, [r3, #0]
 8000ad0:	4b12      	ldr	r3, [pc, #72]	; (8000b1c <HAL_InitTick+0x58>)
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ada:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ade:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f000 fdb7 	bl	8001656 <HAL_SYSTICK_Config>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000aee:	2301      	movs	r3, #1
 8000af0:	e00e      	b.n	8000b10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	2b0f      	cmp	r3, #15
 8000af6:	d80a      	bhi.n	8000b0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000af8:	2200      	movs	r2, #0
 8000afa:	6879      	ldr	r1, [r7, #4]
 8000afc:	f04f 30ff 	mov.w	r0, #4294967295
 8000b00:	f000 fd7f 	bl	8001602 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b04:	4a06      	ldr	r2, [pc, #24]	; (8000b20 <HAL_InitTick+0x5c>)
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	e000      	b.n	8000b10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b0e:	2301      	movs	r3, #1
}
 8000b10:	4618      	mov	r0, r3
 8000b12:	3708      	adds	r7, #8
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	20000000 	.word	0x20000000
 8000b1c:	20000008 	.word	0x20000008
 8000b20:	20000004 	.word	0x20000004

08000b24 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b28:	4b05      	ldr	r3, [pc, #20]	; (8000b40 <HAL_IncTick+0x1c>)
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	461a      	mov	r2, r3
 8000b2e:	4b05      	ldr	r3, [pc, #20]	; (8000b44 <HAL_IncTick+0x20>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	4413      	add	r3, r2
 8000b34:	4a03      	ldr	r2, [pc, #12]	; (8000b44 <HAL_IncTick+0x20>)
 8000b36:	6013      	str	r3, [r2, #0]
}
 8000b38:	bf00      	nop
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bc80      	pop	{r7}
 8000b3e:	4770      	bx	lr
 8000b40:	20000008 	.word	0x20000008
 8000b44:	200001bc 	.word	0x200001bc

08000b48 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b4c:	4b02      	ldr	r3, [pc, #8]	; (8000b58 <HAL_GetTick+0x10>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bc80      	pop	{r7}
 8000b56:	4770      	bx	lr
 8000b58:	200001bc 	.word	0x200001bc

08000b5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b084      	sub	sp, #16
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b64:	f7ff fff0 	bl	8000b48 <HAL_GetTick>
 8000b68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b74:	d005      	beq.n	8000b82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b76:	4b0a      	ldr	r3, [pc, #40]	; (8000ba0 <HAL_Delay+0x44>)
 8000b78:	781b      	ldrb	r3, [r3, #0]
 8000b7a:	461a      	mov	r2, r3
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	4413      	add	r3, r2
 8000b80:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b82:	bf00      	nop
 8000b84:	f7ff ffe0 	bl	8000b48 <HAL_GetTick>
 8000b88:	4602      	mov	r2, r0
 8000b8a:	68bb      	ldr	r3, [r7, #8]
 8000b8c:	1ad3      	subs	r3, r2, r3
 8000b8e:	68fa      	ldr	r2, [r7, #12]
 8000b90:	429a      	cmp	r2, r3
 8000b92:	d8f7      	bhi.n	8000b84 <HAL_Delay+0x28>
  {
  }
}
 8000b94:	bf00      	nop
 8000b96:	bf00      	nop
 8000b98:	3710      	adds	r7, #16
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	20000008 	.word	0x20000008

08000ba4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b086      	sub	sp, #24
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000bac:	2300      	movs	r3, #0
 8000bae:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d101      	bne.n	8000bc6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	e0be      	b.n	8000d44 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	689b      	ldr	r3, [r3, #8]
 8000bca:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d109      	bne.n	8000be8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	2200      	movs	r2, #0
 8000bde:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000be2:	6878      	ldr	r0, [r7, #4]
 8000be4:	f7ff faf8 	bl	80001d8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000be8:	6878      	ldr	r0, [r7, #4]
 8000bea:	f000 fbf1 	bl	80013d0 <ADC_ConversionStop_Disable>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bf6:	f003 0310 	and.w	r3, r3, #16
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	f040 8099 	bne.w	8000d32 <HAL_ADC_Init+0x18e>
 8000c00:	7dfb      	ldrb	r3, [r7, #23]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	f040 8095 	bne.w	8000d32 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c0c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000c10:	f023 0302 	bic.w	r3, r3, #2
 8000c14:	f043 0202 	orr.w	r2, r3, #2
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000c24:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	7b1b      	ldrb	r3, [r3, #12]
 8000c2a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000c2c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000c2e:	68ba      	ldr	r2, [r7, #8]
 8000c30:	4313      	orrs	r3, r2
 8000c32:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	689b      	ldr	r3, [r3, #8]
 8000c38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000c3c:	d003      	beq.n	8000c46 <HAL_ADC_Init+0xa2>
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	689b      	ldr	r3, [r3, #8]
 8000c42:	2b01      	cmp	r3, #1
 8000c44:	d102      	bne.n	8000c4c <HAL_ADC_Init+0xa8>
 8000c46:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c4a:	e000      	b.n	8000c4e <HAL_ADC_Init+0xaa>
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	693a      	ldr	r2, [r7, #16]
 8000c50:	4313      	orrs	r3, r2
 8000c52:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	7d1b      	ldrb	r3, [r3, #20]
 8000c58:	2b01      	cmp	r3, #1
 8000c5a:	d119      	bne.n	8000c90 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	7b1b      	ldrb	r3, [r3, #12]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d109      	bne.n	8000c78 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	699b      	ldr	r3, [r3, #24]
 8000c68:	3b01      	subs	r3, #1
 8000c6a:	035a      	lsls	r2, r3, #13
 8000c6c:	693b      	ldr	r3, [r7, #16]
 8000c6e:	4313      	orrs	r3, r2
 8000c70:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c74:	613b      	str	r3, [r7, #16]
 8000c76:	e00b      	b.n	8000c90 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c7c:	f043 0220 	orr.w	r2, r3, #32
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c88:	f043 0201 	orr.w	r2, r3, #1
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	685b      	ldr	r3, [r3, #4]
 8000c96:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	693a      	ldr	r2, [r7, #16]
 8000ca0:	430a      	orrs	r2, r1
 8000ca2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	689a      	ldr	r2, [r3, #8]
 8000caa:	4b28      	ldr	r3, [pc, #160]	; (8000d4c <HAL_ADC_Init+0x1a8>)
 8000cac:	4013      	ands	r3, r2
 8000cae:	687a      	ldr	r2, [r7, #4]
 8000cb0:	6812      	ldr	r2, [r2, #0]
 8000cb2:	68b9      	ldr	r1, [r7, #8]
 8000cb4:	430b      	orrs	r3, r1
 8000cb6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	689b      	ldr	r3, [r3, #8]
 8000cbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000cc0:	d003      	beq.n	8000cca <HAL_ADC_Init+0x126>
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	689b      	ldr	r3, [r3, #8]
 8000cc6:	2b01      	cmp	r3, #1
 8000cc8:	d104      	bne.n	8000cd4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	691b      	ldr	r3, [r3, #16]
 8000cce:	3b01      	subs	r3, #1
 8000cd0:	051b      	lsls	r3, r3, #20
 8000cd2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cda:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	68fa      	ldr	r2, [r7, #12]
 8000ce4:	430a      	orrs	r2, r1
 8000ce6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	689a      	ldr	r2, [r3, #8]
 8000cee:	4b18      	ldr	r3, [pc, #96]	; (8000d50 <HAL_ADC_Init+0x1ac>)
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	68ba      	ldr	r2, [r7, #8]
 8000cf4:	429a      	cmp	r2, r3
 8000cf6:	d10b      	bne.n	8000d10 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d02:	f023 0303 	bic.w	r3, r3, #3
 8000d06:	f043 0201 	orr.w	r2, r3, #1
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000d0e:	e018      	b.n	8000d42 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d14:	f023 0312 	bic.w	r3, r3, #18
 8000d18:	f043 0210 	orr.w	r2, r3, #16
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d24:	f043 0201 	orr.w	r2, r3, #1
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000d30:	e007      	b.n	8000d42 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d36:	f043 0210 	orr.w	r2, r3, #16
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000d42:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	3718      	adds	r7, #24
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	ffe1f7fd 	.word	0xffe1f7fd
 8000d50:	ff1f0efe 	.word	0xff1f0efe

08000d54 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b084      	sub	sp, #16
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000d66:	2b01      	cmp	r3, #1
 8000d68:	d101      	bne.n	8000d6e <HAL_ADC_Start+0x1a>
 8000d6a:	2302      	movs	r3, #2
 8000d6c:	e098      	b.n	8000ea0 <HAL_ADC_Start+0x14c>
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	2201      	movs	r2, #1
 8000d72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000d76:	6878      	ldr	r0, [r7, #4]
 8000d78:	f000 fad0 	bl	800131c <ADC_Enable>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000d80:	7bfb      	ldrb	r3, [r7, #15]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	f040 8087 	bne.w	8000e96 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000d90:	f023 0301 	bic.w	r3, r3, #1
 8000d94:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a41      	ldr	r2, [pc, #260]	; (8000ea8 <HAL_ADC_Start+0x154>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d105      	bne.n	8000db2 <HAL_ADC_Start+0x5e>
 8000da6:	4b41      	ldr	r3, [pc, #260]	; (8000eac <HAL_ADC_Start+0x158>)
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d115      	bne.n	8000dde <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000db6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d026      	beq.n	8000e1a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dd0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000dd4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000ddc:	e01d      	b.n	8000e1a <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000de2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4a2f      	ldr	r2, [pc, #188]	; (8000eac <HAL_ADC_Start+0x158>)
 8000df0:	4293      	cmp	r3, r2
 8000df2:	d004      	beq.n	8000dfe <HAL_ADC_Start+0xaa>
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a2b      	ldr	r2, [pc, #172]	; (8000ea8 <HAL_ADC_Start+0x154>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d10d      	bne.n	8000e1a <HAL_ADC_Start+0xc6>
 8000dfe:	4b2b      	ldr	r3, [pc, #172]	; (8000eac <HAL_ADC_Start+0x158>)
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d007      	beq.n	8000e1a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e0e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000e12:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d006      	beq.n	8000e34 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e2a:	f023 0206 	bic.w	r2, r3, #6
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e32:	e002      	b.n	8000e3a <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	2200      	movs	r2, #0
 8000e38:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f06f 0202 	mvn.w	r2, #2
 8000e4a:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	689b      	ldr	r3, [r3, #8]
 8000e52:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000e56:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000e5a:	d113      	bne.n	8000e84 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000e60:	4a11      	ldr	r2, [pc, #68]	; (8000ea8 <HAL_ADC_Start+0x154>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d105      	bne.n	8000e72 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000e66:	4b11      	ldr	r3, [pc, #68]	; (8000eac <HAL_ADC_Start+0x158>)
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d108      	bne.n	8000e84 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	689a      	ldr	r2, [r3, #8]
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000e80:	609a      	str	r2, [r3, #8]
 8000e82:	e00c      	b.n	8000e9e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	689a      	ldr	r2, [r3, #8]
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000e92:	609a      	str	r2, [r3, #8]
 8000e94:	e003      	b.n	8000e9e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	2200      	movs	r2, #0
 8000e9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000e9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	3710      	adds	r7, #16
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	40012800 	.word	0x40012800
 8000eac:	40012400 	.word	0x40012400

08000eb0 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b084      	sub	sp, #16
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000ec2:	2b01      	cmp	r3, #1
 8000ec4:	d101      	bne.n	8000eca <HAL_ADC_Stop+0x1a>
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	e01a      	b.n	8000f00 <HAL_ADC_Stop+0x50>
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	2201      	movs	r2, #1
 8000ece:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000ed2:	6878      	ldr	r0, [r7, #4]
 8000ed4:	f000 fa7c 	bl	80013d0 <ADC_ConversionStop_Disable>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8000edc:	7bfb      	ldrb	r3, [r7, #15]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d109      	bne.n	8000ef6 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ee6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000eea:	f023 0301 	bic.w	r3, r3, #1
 8000eee:	f043 0201 	orr.w	r2, r3, #1
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	2200      	movs	r2, #0
 8000efa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000efe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	3710      	adds	r7, #16
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}

08000f08 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000f08:	b590      	push	{r4, r7, lr}
 8000f0a:	b087      	sub	sp, #28
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
 8000f10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000f12:	2300      	movs	r3, #0
 8000f14:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8000f16:	2300      	movs	r3, #0
 8000f18:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000f1e:	f7ff fe13 	bl	8000b48 <HAL_GetTick>
 8000f22:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	689b      	ldr	r3, [r3, #8]
 8000f2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d00b      	beq.n	8000f4a <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f36:	f043 0220 	orr.w	r2, r3, #32
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	2200      	movs	r2, #0
 8000f42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8000f46:	2301      	movs	r3, #1
 8000f48:	e0d3      	b.n	80010f2 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d131      	bne.n	8000fbc <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f5e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d12a      	bne.n	8000fbc <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000f66:	e021      	b.n	8000fac <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f6e:	d01d      	beq.n	8000fac <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d007      	beq.n	8000f86 <HAL_ADC_PollForConversion+0x7e>
 8000f76:	f7ff fde7 	bl	8000b48 <HAL_GetTick>
 8000f7a:	4602      	mov	r2, r0
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	1ad3      	subs	r3, r2, r3
 8000f80:	683a      	ldr	r2, [r7, #0]
 8000f82:	429a      	cmp	r2, r3
 8000f84:	d212      	bcs.n	8000fac <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f003 0302 	and.w	r3, r3, #2
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d10b      	bne.n	8000fac <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f98:	f043 0204 	orr.w	r2, r3, #4
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8000fa8:	2303      	movs	r3, #3
 8000faa:	e0a2      	b.n	80010f2 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f003 0302 	and.w	r3, r3, #2
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d0d6      	beq.n	8000f68 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000fba:	e070      	b.n	800109e <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000fbc:	4b4f      	ldr	r3, [pc, #316]	; (80010fc <HAL_ADC_PollForConversion+0x1f4>)
 8000fbe:	681c      	ldr	r4, [r3, #0]
 8000fc0:	2002      	movs	r0, #2
 8000fc2:	f002 fcdb 	bl	800397c <HAL_RCCEx_GetPeriphCLKFreq>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	6919      	ldr	r1, [r3, #16]
 8000fd2:	4b4b      	ldr	r3, [pc, #300]	; (8001100 <HAL_ADC_PollForConversion+0x1f8>)
 8000fd4:	400b      	ands	r3, r1
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d118      	bne.n	800100c <HAL_ADC_PollForConversion+0x104>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	68d9      	ldr	r1, [r3, #12]
 8000fe0:	4b48      	ldr	r3, [pc, #288]	; (8001104 <HAL_ADC_PollForConversion+0x1fc>)
 8000fe2:	400b      	ands	r3, r1
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d111      	bne.n	800100c <HAL_ADC_PollForConversion+0x104>
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	6919      	ldr	r1, [r3, #16]
 8000fee:	4b46      	ldr	r3, [pc, #280]	; (8001108 <HAL_ADC_PollForConversion+0x200>)
 8000ff0:	400b      	ands	r3, r1
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d108      	bne.n	8001008 <HAL_ADC_PollForConversion+0x100>
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	68d9      	ldr	r1, [r3, #12]
 8000ffc:	4b43      	ldr	r3, [pc, #268]	; (800110c <HAL_ADC_PollForConversion+0x204>)
 8000ffe:	400b      	ands	r3, r1
 8001000:	2b00      	cmp	r3, #0
 8001002:	d101      	bne.n	8001008 <HAL_ADC_PollForConversion+0x100>
 8001004:	2314      	movs	r3, #20
 8001006:	e020      	b.n	800104a <HAL_ADC_PollForConversion+0x142>
 8001008:	2329      	movs	r3, #41	; 0x29
 800100a:	e01e      	b.n	800104a <HAL_ADC_PollForConversion+0x142>
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	6919      	ldr	r1, [r3, #16]
 8001012:	4b3d      	ldr	r3, [pc, #244]	; (8001108 <HAL_ADC_PollForConversion+0x200>)
 8001014:	400b      	ands	r3, r1
 8001016:	2b00      	cmp	r3, #0
 8001018:	d106      	bne.n	8001028 <HAL_ADC_PollForConversion+0x120>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	68d9      	ldr	r1, [r3, #12]
 8001020:	4b3a      	ldr	r3, [pc, #232]	; (800110c <HAL_ADC_PollForConversion+0x204>)
 8001022:	400b      	ands	r3, r1
 8001024:	2b00      	cmp	r3, #0
 8001026:	d00d      	beq.n	8001044 <HAL_ADC_PollForConversion+0x13c>
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	6919      	ldr	r1, [r3, #16]
 800102e:	4b38      	ldr	r3, [pc, #224]	; (8001110 <HAL_ADC_PollForConversion+0x208>)
 8001030:	400b      	ands	r3, r1
 8001032:	2b00      	cmp	r3, #0
 8001034:	d108      	bne.n	8001048 <HAL_ADC_PollForConversion+0x140>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	68d9      	ldr	r1, [r3, #12]
 800103c:	4b34      	ldr	r3, [pc, #208]	; (8001110 <HAL_ADC_PollForConversion+0x208>)
 800103e:	400b      	ands	r3, r1
 8001040:	2b00      	cmp	r3, #0
 8001042:	d101      	bne.n	8001048 <HAL_ADC_PollForConversion+0x140>
 8001044:	2354      	movs	r3, #84	; 0x54
 8001046:	e000      	b.n	800104a <HAL_ADC_PollForConversion+0x142>
 8001048:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 800104a:	fb02 f303 	mul.w	r3, r2, r3
 800104e:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001050:	e021      	b.n	8001096 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001058:	d01a      	beq.n	8001090 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d007      	beq.n	8001070 <HAL_ADC_PollForConversion+0x168>
 8001060:	f7ff fd72 	bl	8000b48 <HAL_GetTick>
 8001064:	4602      	mov	r2, r0
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	1ad3      	subs	r3, r2, r3
 800106a:	683a      	ldr	r2, [r7, #0]
 800106c:	429a      	cmp	r2, r3
 800106e:	d20f      	bcs.n	8001090 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	693a      	ldr	r2, [r7, #16]
 8001074:	429a      	cmp	r2, r3
 8001076:	d90b      	bls.n	8001090 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800107c:	f043 0204 	orr.w	r2, r3, #4
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2200      	movs	r2, #0
 8001088:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 800108c:	2303      	movs	r3, #3
 800108e:	e030      	b.n	80010f2 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	3301      	adds	r3, #1
 8001094:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	693a      	ldr	r2, [r7, #16]
 800109a:	429a      	cmp	r2, r3
 800109c:	d8d9      	bhi.n	8001052 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f06f 0212 	mvn.w	r2, #18
 80010a6:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010ac:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	689b      	ldr	r3, [r3, #8]
 80010ba:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80010be:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80010c2:	d115      	bne.n	80010f0 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d111      	bne.n	80010f0 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010d0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d105      	bne.n	80010f0 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010e8:	f043 0201 	orr.w	r2, r3, #1
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80010f0:	2300      	movs	r3, #0
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	371c      	adds	r7, #28
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd90      	pop	{r4, r7, pc}
 80010fa:	bf00      	nop
 80010fc:	20000000 	.word	0x20000000
 8001100:	24924924 	.word	0x24924924
 8001104:	00924924 	.word	0x00924924
 8001108:	12492492 	.word	0x12492492
 800110c:	00492492 	.word	0x00492492
 8001110:	00249249 	.word	0x00249249

08001114 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001122:	4618      	mov	r0, r3
 8001124:	370c      	adds	r7, #12
 8001126:	46bd      	mov	sp, r7
 8001128:	bc80      	pop	{r7}
 800112a:	4770      	bx	lr

0800112c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800112c:	b480      	push	{r7}
 800112e:	b085      	sub	sp, #20
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001136:	2300      	movs	r3, #0
 8001138:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800113a:	2300      	movs	r3, #0
 800113c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001144:	2b01      	cmp	r3, #1
 8001146:	d101      	bne.n	800114c <HAL_ADC_ConfigChannel+0x20>
 8001148:	2302      	movs	r3, #2
 800114a:	e0dc      	b.n	8001306 <HAL_ADC_ConfigChannel+0x1da>
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2201      	movs	r2, #1
 8001150:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	2b06      	cmp	r3, #6
 800115a:	d81c      	bhi.n	8001196 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	685a      	ldr	r2, [r3, #4]
 8001166:	4613      	mov	r3, r2
 8001168:	009b      	lsls	r3, r3, #2
 800116a:	4413      	add	r3, r2
 800116c:	3b05      	subs	r3, #5
 800116e:	221f      	movs	r2, #31
 8001170:	fa02 f303 	lsl.w	r3, r2, r3
 8001174:	43db      	mvns	r3, r3
 8001176:	4019      	ands	r1, r3
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	6818      	ldr	r0, [r3, #0]
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	685a      	ldr	r2, [r3, #4]
 8001180:	4613      	mov	r3, r2
 8001182:	009b      	lsls	r3, r3, #2
 8001184:	4413      	add	r3, r2
 8001186:	3b05      	subs	r3, #5
 8001188:	fa00 f203 	lsl.w	r2, r0, r3
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	430a      	orrs	r2, r1
 8001192:	635a      	str	r2, [r3, #52]	; 0x34
 8001194:	e03c      	b.n	8001210 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	2b0c      	cmp	r3, #12
 800119c:	d81c      	bhi.n	80011d8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	685a      	ldr	r2, [r3, #4]
 80011a8:	4613      	mov	r3, r2
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	4413      	add	r3, r2
 80011ae:	3b23      	subs	r3, #35	; 0x23
 80011b0:	221f      	movs	r2, #31
 80011b2:	fa02 f303 	lsl.w	r3, r2, r3
 80011b6:	43db      	mvns	r3, r3
 80011b8:	4019      	ands	r1, r3
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	6818      	ldr	r0, [r3, #0]
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	685a      	ldr	r2, [r3, #4]
 80011c2:	4613      	mov	r3, r2
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	4413      	add	r3, r2
 80011c8:	3b23      	subs	r3, #35	; 0x23
 80011ca:	fa00 f203 	lsl.w	r2, r0, r3
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	430a      	orrs	r2, r1
 80011d4:	631a      	str	r2, [r3, #48]	; 0x30
 80011d6:	e01b      	b.n	8001210 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	685a      	ldr	r2, [r3, #4]
 80011e2:	4613      	mov	r3, r2
 80011e4:	009b      	lsls	r3, r3, #2
 80011e6:	4413      	add	r3, r2
 80011e8:	3b41      	subs	r3, #65	; 0x41
 80011ea:	221f      	movs	r2, #31
 80011ec:	fa02 f303 	lsl.w	r3, r2, r3
 80011f0:	43db      	mvns	r3, r3
 80011f2:	4019      	ands	r1, r3
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	6818      	ldr	r0, [r3, #0]
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	685a      	ldr	r2, [r3, #4]
 80011fc:	4613      	mov	r3, r2
 80011fe:	009b      	lsls	r3, r3, #2
 8001200:	4413      	add	r3, r2
 8001202:	3b41      	subs	r3, #65	; 0x41
 8001204:	fa00 f203 	lsl.w	r2, r0, r3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	430a      	orrs	r2, r1
 800120e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	2b09      	cmp	r3, #9
 8001216:	d91c      	bls.n	8001252 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	68d9      	ldr	r1, [r3, #12]
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	4613      	mov	r3, r2
 8001224:	005b      	lsls	r3, r3, #1
 8001226:	4413      	add	r3, r2
 8001228:	3b1e      	subs	r3, #30
 800122a:	2207      	movs	r2, #7
 800122c:	fa02 f303 	lsl.w	r3, r2, r3
 8001230:	43db      	mvns	r3, r3
 8001232:	4019      	ands	r1, r3
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	6898      	ldr	r0, [r3, #8]
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	681a      	ldr	r2, [r3, #0]
 800123c:	4613      	mov	r3, r2
 800123e:	005b      	lsls	r3, r3, #1
 8001240:	4413      	add	r3, r2
 8001242:	3b1e      	subs	r3, #30
 8001244:	fa00 f203 	lsl.w	r2, r0, r3
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	430a      	orrs	r2, r1
 800124e:	60da      	str	r2, [r3, #12]
 8001250:	e019      	b.n	8001286 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	6919      	ldr	r1, [r3, #16]
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	4613      	mov	r3, r2
 800125e:	005b      	lsls	r3, r3, #1
 8001260:	4413      	add	r3, r2
 8001262:	2207      	movs	r2, #7
 8001264:	fa02 f303 	lsl.w	r3, r2, r3
 8001268:	43db      	mvns	r3, r3
 800126a:	4019      	ands	r1, r3
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	6898      	ldr	r0, [r3, #8]
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	4613      	mov	r3, r2
 8001276:	005b      	lsls	r3, r3, #1
 8001278:	4413      	add	r3, r2
 800127a:	fa00 f203 	lsl.w	r2, r0, r3
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	430a      	orrs	r2, r1
 8001284:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	2b10      	cmp	r3, #16
 800128c:	d003      	beq.n	8001296 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001292:	2b11      	cmp	r3, #17
 8001294:	d132      	bne.n	80012fc <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4a1d      	ldr	r2, [pc, #116]	; (8001310 <HAL_ADC_ConfigChannel+0x1e4>)
 800129c:	4293      	cmp	r3, r2
 800129e:	d125      	bne.n	80012ec <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	689b      	ldr	r3, [r3, #8]
 80012a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d126      	bne.n	80012fc <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	689a      	ldr	r2, [r3, #8]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80012bc:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	2b10      	cmp	r3, #16
 80012c4:	d11a      	bne.n	80012fc <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80012c6:	4b13      	ldr	r3, [pc, #76]	; (8001314 <HAL_ADC_ConfigChannel+0x1e8>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4a13      	ldr	r2, [pc, #76]	; (8001318 <HAL_ADC_ConfigChannel+0x1ec>)
 80012cc:	fba2 2303 	umull	r2, r3, r2, r3
 80012d0:	0c9a      	lsrs	r2, r3, #18
 80012d2:	4613      	mov	r3, r2
 80012d4:	009b      	lsls	r3, r3, #2
 80012d6:	4413      	add	r3, r2
 80012d8:	005b      	lsls	r3, r3, #1
 80012da:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80012dc:	e002      	b.n	80012e4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80012de:	68bb      	ldr	r3, [r7, #8]
 80012e0:	3b01      	subs	r3, #1
 80012e2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d1f9      	bne.n	80012de <HAL_ADC_ConfigChannel+0x1b2>
 80012ea:	e007      	b.n	80012fc <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012f0:	f043 0220 	orr.w	r2, r3, #32
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80012f8:	2301      	movs	r3, #1
 80012fa:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2200      	movs	r2, #0
 8001300:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001304:	7bfb      	ldrb	r3, [r7, #15]
}
 8001306:	4618      	mov	r0, r3
 8001308:	3714      	adds	r7, #20
 800130a:	46bd      	mov	sp, r7
 800130c:	bc80      	pop	{r7}
 800130e:	4770      	bx	lr
 8001310:	40012400 	.word	0x40012400
 8001314:	20000000 	.word	0x20000000
 8001318:	431bde83 	.word	0x431bde83

0800131c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b084      	sub	sp, #16
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001324:	2300      	movs	r3, #0
 8001326:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001328:	2300      	movs	r3, #0
 800132a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	689b      	ldr	r3, [r3, #8]
 8001332:	f003 0301 	and.w	r3, r3, #1
 8001336:	2b01      	cmp	r3, #1
 8001338:	d040      	beq.n	80013bc <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	689a      	ldr	r2, [r3, #8]
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f042 0201 	orr.w	r2, r2, #1
 8001348:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800134a:	4b1f      	ldr	r3, [pc, #124]	; (80013c8 <ADC_Enable+0xac>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4a1f      	ldr	r2, [pc, #124]	; (80013cc <ADC_Enable+0xb0>)
 8001350:	fba2 2303 	umull	r2, r3, r2, r3
 8001354:	0c9b      	lsrs	r3, r3, #18
 8001356:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001358:	e002      	b.n	8001360 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800135a:	68bb      	ldr	r3, [r7, #8]
 800135c:	3b01      	subs	r3, #1
 800135e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d1f9      	bne.n	800135a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001366:	f7ff fbef 	bl	8000b48 <HAL_GetTick>
 800136a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800136c:	e01f      	b.n	80013ae <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800136e:	f7ff fbeb 	bl	8000b48 <HAL_GetTick>
 8001372:	4602      	mov	r2, r0
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	1ad3      	subs	r3, r2, r3
 8001378:	2b02      	cmp	r3, #2
 800137a:	d918      	bls.n	80013ae <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	689b      	ldr	r3, [r3, #8]
 8001382:	f003 0301 	and.w	r3, r3, #1
 8001386:	2b01      	cmp	r3, #1
 8001388:	d011      	beq.n	80013ae <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800138e:	f043 0210 	orr.w	r2, r3, #16
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800139a:	f043 0201 	orr.w	r2, r3, #1
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2200      	movs	r2, #0
 80013a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80013aa:	2301      	movs	r3, #1
 80013ac:	e007      	b.n	80013be <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	f003 0301 	and.w	r3, r3, #1
 80013b8:	2b01      	cmp	r3, #1
 80013ba:	d1d8      	bne.n	800136e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80013bc:	2300      	movs	r3, #0
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3710      	adds	r7, #16
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	20000000 	.word	0x20000000
 80013cc:	431bde83 	.word	0x431bde83

080013d0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b084      	sub	sp, #16
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80013d8:	2300      	movs	r3, #0
 80013da:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	689b      	ldr	r3, [r3, #8]
 80013e2:	f003 0301 	and.w	r3, r3, #1
 80013e6:	2b01      	cmp	r3, #1
 80013e8:	d12e      	bne.n	8001448 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	689a      	ldr	r2, [r3, #8]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f022 0201 	bic.w	r2, r2, #1
 80013f8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80013fa:	f7ff fba5 	bl	8000b48 <HAL_GetTick>
 80013fe:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001400:	e01b      	b.n	800143a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001402:	f7ff fba1 	bl	8000b48 <HAL_GetTick>
 8001406:	4602      	mov	r2, r0
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	1ad3      	subs	r3, r2, r3
 800140c:	2b02      	cmp	r3, #2
 800140e:	d914      	bls.n	800143a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	689b      	ldr	r3, [r3, #8]
 8001416:	f003 0301 	and.w	r3, r3, #1
 800141a:	2b01      	cmp	r3, #1
 800141c:	d10d      	bne.n	800143a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001422:	f043 0210 	orr.w	r2, r3, #16
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800142e:	f043 0201 	orr.w	r2, r3, #1
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	e007      	b.n	800144a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	689b      	ldr	r3, [r3, #8]
 8001440:	f003 0301 	and.w	r3, r3, #1
 8001444:	2b01      	cmp	r3, #1
 8001446:	d0dc      	beq.n	8001402 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001448:	2300      	movs	r3, #0
}
 800144a:	4618      	mov	r0, r3
 800144c:	3710      	adds	r7, #16
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
	...

08001454 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001454:	b480      	push	{r7}
 8001456:	b085      	sub	sp, #20
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	f003 0307 	and.w	r3, r3, #7
 8001462:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001464:	4b0c      	ldr	r3, [pc, #48]	; (8001498 <__NVIC_SetPriorityGrouping+0x44>)
 8001466:	68db      	ldr	r3, [r3, #12]
 8001468:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800146a:	68ba      	ldr	r2, [r7, #8]
 800146c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001470:	4013      	ands	r3, r2
 8001472:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800147c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001480:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001484:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001486:	4a04      	ldr	r2, [pc, #16]	; (8001498 <__NVIC_SetPriorityGrouping+0x44>)
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	60d3      	str	r3, [r2, #12]
}
 800148c:	bf00      	nop
 800148e:	3714      	adds	r7, #20
 8001490:	46bd      	mov	sp, r7
 8001492:	bc80      	pop	{r7}
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	e000ed00 	.word	0xe000ed00

0800149c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014a0:	4b04      	ldr	r3, [pc, #16]	; (80014b4 <__NVIC_GetPriorityGrouping+0x18>)
 80014a2:	68db      	ldr	r3, [r3, #12]
 80014a4:	0a1b      	lsrs	r3, r3, #8
 80014a6:	f003 0307 	and.w	r3, r3, #7
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bc80      	pop	{r7}
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	e000ed00 	.word	0xe000ed00

080014b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	4603      	mov	r3, r0
 80014c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	db0b      	blt.n	80014e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014ca:	79fb      	ldrb	r3, [r7, #7]
 80014cc:	f003 021f 	and.w	r2, r3, #31
 80014d0:	4906      	ldr	r1, [pc, #24]	; (80014ec <__NVIC_EnableIRQ+0x34>)
 80014d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d6:	095b      	lsrs	r3, r3, #5
 80014d8:	2001      	movs	r0, #1
 80014da:	fa00 f202 	lsl.w	r2, r0, r2
 80014de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014e2:	bf00      	nop
 80014e4:	370c      	adds	r7, #12
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bc80      	pop	{r7}
 80014ea:	4770      	bx	lr
 80014ec:	e000e100 	.word	0xe000e100

080014f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	4603      	mov	r3, r0
 80014f8:	6039      	str	r1, [r7, #0]
 80014fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001500:	2b00      	cmp	r3, #0
 8001502:	db0a      	blt.n	800151a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	b2da      	uxtb	r2, r3
 8001508:	490c      	ldr	r1, [pc, #48]	; (800153c <__NVIC_SetPriority+0x4c>)
 800150a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800150e:	0112      	lsls	r2, r2, #4
 8001510:	b2d2      	uxtb	r2, r2
 8001512:	440b      	add	r3, r1
 8001514:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001518:	e00a      	b.n	8001530 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	b2da      	uxtb	r2, r3
 800151e:	4908      	ldr	r1, [pc, #32]	; (8001540 <__NVIC_SetPriority+0x50>)
 8001520:	79fb      	ldrb	r3, [r7, #7]
 8001522:	f003 030f 	and.w	r3, r3, #15
 8001526:	3b04      	subs	r3, #4
 8001528:	0112      	lsls	r2, r2, #4
 800152a:	b2d2      	uxtb	r2, r2
 800152c:	440b      	add	r3, r1
 800152e:	761a      	strb	r2, [r3, #24]
}
 8001530:	bf00      	nop
 8001532:	370c      	adds	r7, #12
 8001534:	46bd      	mov	sp, r7
 8001536:	bc80      	pop	{r7}
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	e000e100 	.word	0xe000e100
 8001540:	e000ed00 	.word	0xe000ed00

08001544 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001544:	b480      	push	{r7}
 8001546:	b089      	sub	sp, #36	; 0x24
 8001548:	af00      	add	r7, sp, #0
 800154a:	60f8      	str	r0, [r7, #12]
 800154c:	60b9      	str	r1, [r7, #8]
 800154e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	f003 0307 	and.w	r3, r3, #7
 8001556:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001558:	69fb      	ldr	r3, [r7, #28]
 800155a:	f1c3 0307 	rsb	r3, r3, #7
 800155e:	2b04      	cmp	r3, #4
 8001560:	bf28      	it	cs
 8001562:	2304      	movcs	r3, #4
 8001564:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001566:	69fb      	ldr	r3, [r7, #28]
 8001568:	3304      	adds	r3, #4
 800156a:	2b06      	cmp	r3, #6
 800156c:	d902      	bls.n	8001574 <NVIC_EncodePriority+0x30>
 800156e:	69fb      	ldr	r3, [r7, #28]
 8001570:	3b03      	subs	r3, #3
 8001572:	e000      	b.n	8001576 <NVIC_EncodePriority+0x32>
 8001574:	2300      	movs	r3, #0
 8001576:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001578:	f04f 32ff 	mov.w	r2, #4294967295
 800157c:	69bb      	ldr	r3, [r7, #24]
 800157e:	fa02 f303 	lsl.w	r3, r2, r3
 8001582:	43da      	mvns	r2, r3
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	401a      	ands	r2, r3
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800158c:	f04f 31ff 	mov.w	r1, #4294967295
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	fa01 f303 	lsl.w	r3, r1, r3
 8001596:	43d9      	mvns	r1, r3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800159c:	4313      	orrs	r3, r2
         );
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3724      	adds	r7, #36	; 0x24
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bc80      	pop	{r7}
 80015a6:	4770      	bx	lr

080015a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	3b01      	subs	r3, #1
 80015b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015b8:	d301      	bcc.n	80015be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015ba:	2301      	movs	r3, #1
 80015bc:	e00f      	b.n	80015de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015be:	4a0a      	ldr	r2, [pc, #40]	; (80015e8 <SysTick_Config+0x40>)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	3b01      	subs	r3, #1
 80015c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015c6:	210f      	movs	r1, #15
 80015c8:	f04f 30ff 	mov.w	r0, #4294967295
 80015cc:	f7ff ff90 	bl	80014f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015d0:	4b05      	ldr	r3, [pc, #20]	; (80015e8 <SysTick_Config+0x40>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015d6:	4b04      	ldr	r3, [pc, #16]	; (80015e8 <SysTick_Config+0x40>)
 80015d8:	2207      	movs	r2, #7
 80015da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015dc:	2300      	movs	r3, #0
}
 80015de:	4618      	mov	r0, r3
 80015e0:	3708      	adds	r7, #8
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	e000e010 	.word	0xe000e010

080015ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015f4:	6878      	ldr	r0, [r7, #4]
 80015f6:	f7ff ff2d 	bl	8001454 <__NVIC_SetPriorityGrouping>
}
 80015fa:	bf00      	nop
 80015fc:	3708      	adds	r7, #8
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}

08001602 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001602:	b580      	push	{r7, lr}
 8001604:	b086      	sub	sp, #24
 8001606:	af00      	add	r7, sp, #0
 8001608:	4603      	mov	r3, r0
 800160a:	60b9      	str	r1, [r7, #8]
 800160c:	607a      	str	r2, [r7, #4]
 800160e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001610:	2300      	movs	r3, #0
 8001612:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001614:	f7ff ff42 	bl	800149c <__NVIC_GetPriorityGrouping>
 8001618:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800161a:	687a      	ldr	r2, [r7, #4]
 800161c:	68b9      	ldr	r1, [r7, #8]
 800161e:	6978      	ldr	r0, [r7, #20]
 8001620:	f7ff ff90 	bl	8001544 <NVIC_EncodePriority>
 8001624:	4602      	mov	r2, r0
 8001626:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800162a:	4611      	mov	r1, r2
 800162c:	4618      	mov	r0, r3
 800162e:	f7ff ff5f 	bl	80014f0 <__NVIC_SetPriority>
}
 8001632:	bf00      	nop
 8001634:	3718      	adds	r7, #24
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}

0800163a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800163a:	b580      	push	{r7, lr}
 800163c:	b082      	sub	sp, #8
 800163e:	af00      	add	r7, sp, #0
 8001640:	4603      	mov	r3, r0
 8001642:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001644:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001648:	4618      	mov	r0, r3
 800164a:	f7ff ff35 	bl	80014b8 <__NVIC_EnableIRQ>
}
 800164e:	bf00      	nop
 8001650:	3708      	adds	r7, #8
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}

08001656 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001656:	b580      	push	{r7, lr}
 8001658:	b082      	sub	sp, #8
 800165a:	af00      	add	r7, sp, #0
 800165c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	f7ff ffa2 	bl	80015a8 <SysTick_Config>
 8001664:	4603      	mov	r3, r0
}
 8001666:	4618      	mov	r0, r3
 8001668:	3708      	adds	r7, #8
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
	...

08001670 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001670:	b480      	push	{r7}
 8001672:	b08b      	sub	sp, #44	; 0x2c
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
 8001678:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800167a:	2300      	movs	r3, #0
 800167c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800167e:	2300      	movs	r3, #0
 8001680:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001682:	e169      	b.n	8001958 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001684:	2201      	movs	r2, #1
 8001686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001688:	fa02 f303 	lsl.w	r3, r2, r3
 800168c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	69fa      	ldr	r2, [r7, #28]
 8001694:	4013      	ands	r3, r2
 8001696:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001698:	69ba      	ldr	r2, [r7, #24]
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	429a      	cmp	r2, r3
 800169e:	f040 8158 	bne.w	8001952 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	4a9a      	ldr	r2, [pc, #616]	; (8001910 <HAL_GPIO_Init+0x2a0>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d05e      	beq.n	800176a <HAL_GPIO_Init+0xfa>
 80016ac:	4a98      	ldr	r2, [pc, #608]	; (8001910 <HAL_GPIO_Init+0x2a0>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d875      	bhi.n	800179e <HAL_GPIO_Init+0x12e>
 80016b2:	4a98      	ldr	r2, [pc, #608]	; (8001914 <HAL_GPIO_Init+0x2a4>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d058      	beq.n	800176a <HAL_GPIO_Init+0xfa>
 80016b8:	4a96      	ldr	r2, [pc, #600]	; (8001914 <HAL_GPIO_Init+0x2a4>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d86f      	bhi.n	800179e <HAL_GPIO_Init+0x12e>
 80016be:	4a96      	ldr	r2, [pc, #600]	; (8001918 <HAL_GPIO_Init+0x2a8>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d052      	beq.n	800176a <HAL_GPIO_Init+0xfa>
 80016c4:	4a94      	ldr	r2, [pc, #592]	; (8001918 <HAL_GPIO_Init+0x2a8>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d869      	bhi.n	800179e <HAL_GPIO_Init+0x12e>
 80016ca:	4a94      	ldr	r2, [pc, #592]	; (800191c <HAL_GPIO_Init+0x2ac>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d04c      	beq.n	800176a <HAL_GPIO_Init+0xfa>
 80016d0:	4a92      	ldr	r2, [pc, #584]	; (800191c <HAL_GPIO_Init+0x2ac>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d863      	bhi.n	800179e <HAL_GPIO_Init+0x12e>
 80016d6:	4a92      	ldr	r2, [pc, #584]	; (8001920 <HAL_GPIO_Init+0x2b0>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d046      	beq.n	800176a <HAL_GPIO_Init+0xfa>
 80016dc:	4a90      	ldr	r2, [pc, #576]	; (8001920 <HAL_GPIO_Init+0x2b0>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d85d      	bhi.n	800179e <HAL_GPIO_Init+0x12e>
 80016e2:	2b12      	cmp	r3, #18
 80016e4:	d82a      	bhi.n	800173c <HAL_GPIO_Init+0xcc>
 80016e6:	2b12      	cmp	r3, #18
 80016e8:	d859      	bhi.n	800179e <HAL_GPIO_Init+0x12e>
 80016ea:	a201      	add	r2, pc, #4	; (adr r2, 80016f0 <HAL_GPIO_Init+0x80>)
 80016ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016f0:	0800176b 	.word	0x0800176b
 80016f4:	08001745 	.word	0x08001745
 80016f8:	08001757 	.word	0x08001757
 80016fc:	08001799 	.word	0x08001799
 8001700:	0800179f 	.word	0x0800179f
 8001704:	0800179f 	.word	0x0800179f
 8001708:	0800179f 	.word	0x0800179f
 800170c:	0800179f 	.word	0x0800179f
 8001710:	0800179f 	.word	0x0800179f
 8001714:	0800179f 	.word	0x0800179f
 8001718:	0800179f 	.word	0x0800179f
 800171c:	0800179f 	.word	0x0800179f
 8001720:	0800179f 	.word	0x0800179f
 8001724:	0800179f 	.word	0x0800179f
 8001728:	0800179f 	.word	0x0800179f
 800172c:	0800179f 	.word	0x0800179f
 8001730:	0800179f 	.word	0x0800179f
 8001734:	0800174d 	.word	0x0800174d
 8001738:	08001761 	.word	0x08001761
 800173c:	4a79      	ldr	r2, [pc, #484]	; (8001924 <HAL_GPIO_Init+0x2b4>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d013      	beq.n	800176a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001742:	e02c      	b.n	800179e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	623b      	str	r3, [r7, #32]
          break;
 800174a:	e029      	b.n	80017a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	68db      	ldr	r3, [r3, #12]
 8001750:	3304      	adds	r3, #4
 8001752:	623b      	str	r3, [r7, #32]
          break;
 8001754:	e024      	b.n	80017a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	68db      	ldr	r3, [r3, #12]
 800175a:	3308      	adds	r3, #8
 800175c:	623b      	str	r3, [r7, #32]
          break;
 800175e:	e01f      	b.n	80017a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	330c      	adds	r3, #12
 8001766:	623b      	str	r3, [r7, #32]
          break;
 8001768:	e01a      	b.n	80017a0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d102      	bne.n	8001778 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001772:	2304      	movs	r3, #4
 8001774:	623b      	str	r3, [r7, #32]
          break;
 8001776:	e013      	b.n	80017a0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	2b01      	cmp	r3, #1
 800177e:	d105      	bne.n	800178c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001780:	2308      	movs	r3, #8
 8001782:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	69fa      	ldr	r2, [r7, #28]
 8001788:	611a      	str	r2, [r3, #16]
          break;
 800178a:	e009      	b.n	80017a0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800178c:	2308      	movs	r3, #8
 800178e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	69fa      	ldr	r2, [r7, #28]
 8001794:	615a      	str	r2, [r3, #20]
          break;
 8001796:	e003      	b.n	80017a0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001798:	2300      	movs	r3, #0
 800179a:	623b      	str	r3, [r7, #32]
          break;
 800179c:	e000      	b.n	80017a0 <HAL_GPIO_Init+0x130>
          break;
 800179e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80017a0:	69bb      	ldr	r3, [r7, #24]
 80017a2:	2bff      	cmp	r3, #255	; 0xff
 80017a4:	d801      	bhi.n	80017aa <HAL_GPIO_Init+0x13a>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	e001      	b.n	80017ae <HAL_GPIO_Init+0x13e>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	3304      	adds	r3, #4
 80017ae:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80017b0:	69bb      	ldr	r3, [r7, #24]
 80017b2:	2bff      	cmp	r3, #255	; 0xff
 80017b4:	d802      	bhi.n	80017bc <HAL_GPIO_Init+0x14c>
 80017b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b8:	009b      	lsls	r3, r3, #2
 80017ba:	e002      	b.n	80017c2 <HAL_GPIO_Init+0x152>
 80017bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017be:	3b08      	subs	r3, #8
 80017c0:	009b      	lsls	r3, r3, #2
 80017c2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	210f      	movs	r1, #15
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	fa01 f303 	lsl.w	r3, r1, r3
 80017d0:	43db      	mvns	r3, r3
 80017d2:	401a      	ands	r2, r3
 80017d4:	6a39      	ldr	r1, [r7, #32]
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	fa01 f303 	lsl.w	r3, r1, r3
 80017dc:	431a      	orrs	r2, r3
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	f000 80b1 	beq.w	8001952 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80017f0:	4b4d      	ldr	r3, [pc, #308]	; (8001928 <HAL_GPIO_Init+0x2b8>)
 80017f2:	699b      	ldr	r3, [r3, #24]
 80017f4:	4a4c      	ldr	r2, [pc, #304]	; (8001928 <HAL_GPIO_Init+0x2b8>)
 80017f6:	f043 0301 	orr.w	r3, r3, #1
 80017fa:	6193      	str	r3, [r2, #24]
 80017fc:	4b4a      	ldr	r3, [pc, #296]	; (8001928 <HAL_GPIO_Init+0x2b8>)
 80017fe:	699b      	ldr	r3, [r3, #24]
 8001800:	f003 0301 	and.w	r3, r3, #1
 8001804:	60bb      	str	r3, [r7, #8]
 8001806:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001808:	4a48      	ldr	r2, [pc, #288]	; (800192c <HAL_GPIO_Init+0x2bc>)
 800180a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180c:	089b      	lsrs	r3, r3, #2
 800180e:	3302      	adds	r3, #2
 8001810:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001814:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001818:	f003 0303 	and.w	r3, r3, #3
 800181c:	009b      	lsls	r3, r3, #2
 800181e:	220f      	movs	r2, #15
 8001820:	fa02 f303 	lsl.w	r3, r2, r3
 8001824:	43db      	mvns	r3, r3
 8001826:	68fa      	ldr	r2, [r7, #12]
 8001828:	4013      	ands	r3, r2
 800182a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	4a40      	ldr	r2, [pc, #256]	; (8001930 <HAL_GPIO_Init+0x2c0>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d013      	beq.n	800185c <HAL_GPIO_Init+0x1ec>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	4a3f      	ldr	r2, [pc, #252]	; (8001934 <HAL_GPIO_Init+0x2c4>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d00d      	beq.n	8001858 <HAL_GPIO_Init+0x1e8>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	4a3e      	ldr	r2, [pc, #248]	; (8001938 <HAL_GPIO_Init+0x2c8>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d007      	beq.n	8001854 <HAL_GPIO_Init+0x1e4>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	4a3d      	ldr	r2, [pc, #244]	; (800193c <HAL_GPIO_Init+0x2cc>)
 8001848:	4293      	cmp	r3, r2
 800184a:	d101      	bne.n	8001850 <HAL_GPIO_Init+0x1e0>
 800184c:	2303      	movs	r3, #3
 800184e:	e006      	b.n	800185e <HAL_GPIO_Init+0x1ee>
 8001850:	2304      	movs	r3, #4
 8001852:	e004      	b.n	800185e <HAL_GPIO_Init+0x1ee>
 8001854:	2302      	movs	r3, #2
 8001856:	e002      	b.n	800185e <HAL_GPIO_Init+0x1ee>
 8001858:	2301      	movs	r3, #1
 800185a:	e000      	b.n	800185e <HAL_GPIO_Init+0x1ee>
 800185c:	2300      	movs	r3, #0
 800185e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001860:	f002 0203 	and.w	r2, r2, #3
 8001864:	0092      	lsls	r2, r2, #2
 8001866:	4093      	lsls	r3, r2
 8001868:	68fa      	ldr	r2, [r7, #12]
 800186a:	4313      	orrs	r3, r2
 800186c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800186e:	492f      	ldr	r1, [pc, #188]	; (800192c <HAL_GPIO_Init+0x2bc>)
 8001870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001872:	089b      	lsrs	r3, r3, #2
 8001874:	3302      	adds	r3, #2
 8001876:	68fa      	ldr	r2, [r7, #12]
 8001878:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001884:	2b00      	cmp	r3, #0
 8001886:	d006      	beq.n	8001896 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001888:	4b2d      	ldr	r3, [pc, #180]	; (8001940 <HAL_GPIO_Init+0x2d0>)
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	492c      	ldr	r1, [pc, #176]	; (8001940 <HAL_GPIO_Init+0x2d0>)
 800188e:	69bb      	ldr	r3, [r7, #24]
 8001890:	4313      	orrs	r3, r2
 8001892:	600b      	str	r3, [r1, #0]
 8001894:	e006      	b.n	80018a4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001896:	4b2a      	ldr	r3, [pc, #168]	; (8001940 <HAL_GPIO_Init+0x2d0>)
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	69bb      	ldr	r3, [r7, #24]
 800189c:	43db      	mvns	r3, r3
 800189e:	4928      	ldr	r1, [pc, #160]	; (8001940 <HAL_GPIO_Init+0x2d0>)
 80018a0:	4013      	ands	r3, r2
 80018a2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d006      	beq.n	80018be <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80018b0:	4b23      	ldr	r3, [pc, #140]	; (8001940 <HAL_GPIO_Init+0x2d0>)
 80018b2:	685a      	ldr	r2, [r3, #4]
 80018b4:	4922      	ldr	r1, [pc, #136]	; (8001940 <HAL_GPIO_Init+0x2d0>)
 80018b6:	69bb      	ldr	r3, [r7, #24]
 80018b8:	4313      	orrs	r3, r2
 80018ba:	604b      	str	r3, [r1, #4]
 80018bc:	e006      	b.n	80018cc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80018be:	4b20      	ldr	r3, [pc, #128]	; (8001940 <HAL_GPIO_Init+0x2d0>)
 80018c0:	685a      	ldr	r2, [r3, #4]
 80018c2:	69bb      	ldr	r3, [r7, #24]
 80018c4:	43db      	mvns	r3, r3
 80018c6:	491e      	ldr	r1, [pc, #120]	; (8001940 <HAL_GPIO_Init+0x2d0>)
 80018c8:	4013      	ands	r3, r2
 80018ca:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d006      	beq.n	80018e6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80018d8:	4b19      	ldr	r3, [pc, #100]	; (8001940 <HAL_GPIO_Init+0x2d0>)
 80018da:	689a      	ldr	r2, [r3, #8]
 80018dc:	4918      	ldr	r1, [pc, #96]	; (8001940 <HAL_GPIO_Init+0x2d0>)
 80018de:	69bb      	ldr	r3, [r7, #24]
 80018e0:	4313      	orrs	r3, r2
 80018e2:	608b      	str	r3, [r1, #8]
 80018e4:	e006      	b.n	80018f4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80018e6:	4b16      	ldr	r3, [pc, #88]	; (8001940 <HAL_GPIO_Init+0x2d0>)
 80018e8:	689a      	ldr	r2, [r3, #8]
 80018ea:	69bb      	ldr	r3, [r7, #24]
 80018ec:	43db      	mvns	r3, r3
 80018ee:	4914      	ldr	r1, [pc, #80]	; (8001940 <HAL_GPIO_Init+0x2d0>)
 80018f0:	4013      	ands	r3, r2
 80018f2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d021      	beq.n	8001944 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001900:	4b0f      	ldr	r3, [pc, #60]	; (8001940 <HAL_GPIO_Init+0x2d0>)
 8001902:	68da      	ldr	r2, [r3, #12]
 8001904:	490e      	ldr	r1, [pc, #56]	; (8001940 <HAL_GPIO_Init+0x2d0>)
 8001906:	69bb      	ldr	r3, [r7, #24]
 8001908:	4313      	orrs	r3, r2
 800190a:	60cb      	str	r3, [r1, #12]
 800190c:	e021      	b.n	8001952 <HAL_GPIO_Init+0x2e2>
 800190e:	bf00      	nop
 8001910:	10320000 	.word	0x10320000
 8001914:	10310000 	.word	0x10310000
 8001918:	10220000 	.word	0x10220000
 800191c:	10210000 	.word	0x10210000
 8001920:	10120000 	.word	0x10120000
 8001924:	10110000 	.word	0x10110000
 8001928:	40021000 	.word	0x40021000
 800192c:	40010000 	.word	0x40010000
 8001930:	40010800 	.word	0x40010800
 8001934:	40010c00 	.word	0x40010c00
 8001938:	40011000 	.word	0x40011000
 800193c:	40011400 	.word	0x40011400
 8001940:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001944:	4b0b      	ldr	r3, [pc, #44]	; (8001974 <HAL_GPIO_Init+0x304>)
 8001946:	68da      	ldr	r2, [r3, #12]
 8001948:	69bb      	ldr	r3, [r7, #24]
 800194a:	43db      	mvns	r3, r3
 800194c:	4909      	ldr	r1, [pc, #36]	; (8001974 <HAL_GPIO_Init+0x304>)
 800194e:	4013      	ands	r3, r2
 8001950:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001954:	3301      	adds	r3, #1
 8001956:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195e:	fa22 f303 	lsr.w	r3, r2, r3
 8001962:	2b00      	cmp	r3, #0
 8001964:	f47f ae8e 	bne.w	8001684 <HAL_GPIO_Init+0x14>
  }
}
 8001968:	bf00      	nop
 800196a:	bf00      	nop
 800196c:	372c      	adds	r7, #44	; 0x2c
 800196e:	46bd      	mov	sp, r7
 8001970:	bc80      	pop	{r7}
 8001972:	4770      	bx	lr
 8001974:	40010400 	.word	0x40010400

08001978 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
 8001980:	460b      	mov	r3, r1
 8001982:	807b      	strh	r3, [r7, #2]
 8001984:	4613      	mov	r3, r2
 8001986:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001988:	787b      	ldrb	r3, [r7, #1]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d003      	beq.n	8001996 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800198e:	887a      	ldrh	r2, [r7, #2]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001994:	e003      	b.n	800199e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001996:	887b      	ldrh	r3, [r7, #2]
 8001998:	041a      	lsls	r2, r3, #16
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	611a      	str	r2, [r3, #16]
}
 800199e:	bf00      	nop
 80019a0:	370c      	adds	r7, #12
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bc80      	pop	{r7}
 80019a6:	4770      	bx	lr

080019a8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b085      	sub	sp, #20
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	460b      	mov	r3, r1
 80019b2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80019ba:	887a      	ldrh	r2, [r7, #2]
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	4013      	ands	r3, r2
 80019c0:	041a      	lsls	r2, r3, #16
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	43d9      	mvns	r1, r3
 80019c6:	887b      	ldrh	r3, [r7, #2]
 80019c8:	400b      	ands	r3, r1
 80019ca:	431a      	orrs	r2, r3
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	611a      	str	r2, [r3, #16]
}
 80019d0:	bf00      	nop
 80019d2:	3714      	adds	r7, #20
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bc80      	pop	{r7}
 80019d8:	4770      	bx	lr
	...

080019dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	4603      	mov	r3, r0
 80019e4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80019e6:	4b08      	ldr	r3, [pc, #32]	; (8001a08 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019e8:	695a      	ldr	r2, [r3, #20]
 80019ea:	88fb      	ldrh	r3, [r7, #6]
 80019ec:	4013      	ands	r3, r2
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d006      	beq.n	8001a00 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80019f2:	4a05      	ldr	r2, [pc, #20]	; (8001a08 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019f4:	88fb      	ldrh	r3, [r7, #6]
 80019f6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80019f8:	88fb      	ldrh	r3, [r7, #6]
 80019fa:	4618      	mov	r0, r3
 80019fc:	f000 f806 	bl	8001a0c <HAL_GPIO_EXTI_Callback>
  }
}
 8001a00:	bf00      	nop
 8001a02:	3708      	adds	r7, #8
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	40010400 	.word	0x40010400

08001a0c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	4603      	mov	r3, r0
 8001a14:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001a16:	bf00      	nop
 8001a18:	370c      	adds	r7, #12
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bc80      	pop	{r7}
 8001a1e:	4770      	bx	lr

08001a20 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b084      	sub	sp, #16
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d101      	bne.n	8001a32 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e12b      	b.n	8001c8a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d106      	bne.n	8001a4c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2200      	movs	r2, #0
 8001a42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f7fe fcf4 	bl	8000434 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2224      	movs	r2, #36	; 0x24
 8001a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f022 0201 	bic.w	r2, r2, #1
 8001a62:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001a72:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a82:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001a84:	f001 fe7e 	bl	8003784 <HAL_RCC_GetPCLK1Freq>
 8001a88:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	4a81      	ldr	r2, [pc, #516]	; (8001c94 <HAL_I2C_Init+0x274>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d807      	bhi.n	8001aa4 <HAL_I2C_Init+0x84>
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	4a80      	ldr	r2, [pc, #512]	; (8001c98 <HAL_I2C_Init+0x278>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	bf94      	ite	ls
 8001a9c:	2301      	movls	r3, #1
 8001a9e:	2300      	movhi	r3, #0
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	e006      	b.n	8001ab2 <HAL_I2C_Init+0x92>
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	4a7d      	ldr	r2, [pc, #500]	; (8001c9c <HAL_I2C_Init+0x27c>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	bf94      	ite	ls
 8001aac:	2301      	movls	r3, #1
 8001aae:	2300      	movhi	r3, #0
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d001      	beq.n	8001aba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e0e7      	b.n	8001c8a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	4a78      	ldr	r2, [pc, #480]	; (8001ca0 <HAL_I2C_Init+0x280>)
 8001abe:	fba2 2303 	umull	r2, r3, r2, r3
 8001ac2:	0c9b      	lsrs	r3, r3, #18
 8001ac4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	68ba      	ldr	r2, [r7, #8]
 8001ad6:	430a      	orrs	r2, r1
 8001ad8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	6a1b      	ldr	r3, [r3, #32]
 8001ae0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	4a6a      	ldr	r2, [pc, #424]	; (8001c94 <HAL_I2C_Init+0x274>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d802      	bhi.n	8001af4 <HAL_I2C_Init+0xd4>
 8001aee:	68bb      	ldr	r3, [r7, #8]
 8001af0:	3301      	adds	r3, #1
 8001af2:	e009      	b.n	8001b08 <HAL_I2C_Init+0xe8>
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001afa:	fb02 f303 	mul.w	r3, r2, r3
 8001afe:	4a69      	ldr	r2, [pc, #420]	; (8001ca4 <HAL_I2C_Init+0x284>)
 8001b00:	fba2 2303 	umull	r2, r3, r2, r3
 8001b04:	099b      	lsrs	r3, r3, #6
 8001b06:	3301      	adds	r3, #1
 8001b08:	687a      	ldr	r2, [r7, #4]
 8001b0a:	6812      	ldr	r2, [r2, #0]
 8001b0c:	430b      	orrs	r3, r1
 8001b0e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	69db      	ldr	r3, [r3, #28]
 8001b16:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001b1a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	495c      	ldr	r1, [pc, #368]	; (8001c94 <HAL_I2C_Init+0x274>)
 8001b24:	428b      	cmp	r3, r1
 8001b26:	d819      	bhi.n	8001b5c <HAL_I2C_Init+0x13c>
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	1e59      	subs	r1, r3, #1
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	005b      	lsls	r3, r3, #1
 8001b32:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b36:	1c59      	adds	r1, r3, #1
 8001b38:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001b3c:	400b      	ands	r3, r1
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d00a      	beq.n	8001b58 <HAL_I2C_Init+0x138>
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	1e59      	subs	r1, r3, #1
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	005b      	lsls	r3, r3, #1
 8001b4c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b50:	3301      	adds	r3, #1
 8001b52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b56:	e051      	b.n	8001bfc <HAL_I2C_Init+0x1dc>
 8001b58:	2304      	movs	r3, #4
 8001b5a:	e04f      	b.n	8001bfc <HAL_I2C_Init+0x1dc>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d111      	bne.n	8001b88 <HAL_I2C_Init+0x168>
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	1e58      	subs	r0, r3, #1
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6859      	ldr	r1, [r3, #4]
 8001b6c:	460b      	mov	r3, r1
 8001b6e:	005b      	lsls	r3, r3, #1
 8001b70:	440b      	add	r3, r1
 8001b72:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b76:	3301      	adds	r3, #1
 8001b78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	bf0c      	ite	eq
 8001b80:	2301      	moveq	r3, #1
 8001b82:	2300      	movne	r3, #0
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	e012      	b.n	8001bae <HAL_I2C_Init+0x18e>
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	1e58      	subs	r0, r3, #1
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6859      	ldr	r1, [r3, #4]
 8001b90:	460b      	mov	r3, r1
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	440b      	add	r3, r1
 8001b96:	0099      	lsls	r1, r3, #2
 8001b98:	440b      	add	r3, r1
 8001b9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b9e:	3301      	adds	r3, #1
 8001ba0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	bf0c      	ite	eq
 8001ba8:	2301      	moveq	r3, #1
 8001baa:	2300      	movne	r3, #0
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <HAL_I2C_Init+0x196>
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e022      	b.n	8001bfc <HAL_I2C_Init+0x1dc>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d10e      	bne.n	8001bdc <HAL_I2C_Init+0x1bc>
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	1e58      	subs	r0, r3, #1
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6859      	ldr	r1, [r3, #4]
 8001bc6:	460b      	mov	r3, r1
 8001bc8:	005b      	lsls	r3, r3, #1
 8001bca:	440b      	add	r3, r1
 8001bcc:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bd0:	3301      	adds	r3, #1
 8001bd2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bda:	e00f      	b.n	8001bfc <HAL_I2C_Init+0x1dc>
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	1e58      	subs	r0, r3, #1
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6859      	ldr	r1, [r3, #4]
 8001be4:	460b      	mov	r3, r1
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	440b      	add	r3, r1
 8001bea:	0099      	lsls	r1, r3, #2
 8001bec:	440b      	add	r3, r1
 8001bee:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bf8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001bfc:	6879      	ldr	r1, [r7, #4]
 8001bfe:	6809      	ldr	r1, [r1, #0]
 8001c00:	4313      	orrs	r3, r2
 8001c02:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	69da      	ldr	r2, [r3, #28]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6a1b      	ldr	r3, [r3, #32]
 8001c16:	431a      	orrs	r2, r3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	430a      	orrs	r2, r1
 8001c1e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001c2a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001c2e:	687a      	ldr	r2, [r7, #4]
 8001c30:	6911      	ldr	r1, [r2, #16]
 8001c32:	687a      	ldr	r2, [r7, #4]
 8001c34:	68d2      	ldr	r2, [r2, #12]
 8001c36:	4311      	orrs	r1, r2
 8001c38:	687a      	ldr	r2, [r7, #4]
 8001c3a:	6812      	ldr	r2, [r2, #0]
 8001c3c:	430b      	orrs	r3, r1
 8001c3e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	68db      	ldr	r3, [r3, #12]
 8001c46:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	695a      	ldr	r2, [r3, #20]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	699b      	ldr	r3, [r3, #24]
 8001c52:	431a      	orrs	r2, r3
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	430a      	orrs	r2, r1
 8001c5a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f042 0201 	orr.w	r2, r2, #1
 8001c6a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2220      	movs	r2, #32
 8001c76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2200      	movs	r2, #0
 8001c84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001c88:	2300      	movs	r3, #0
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3710      	adds	r7, #16
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	000186a0 	.word	0x000186a0
 8001c98:	001e847f 	.word	0x001e847f
 8001c9c:	003d08ff 	.word	0x003d08ff
 8001ca0:	431bde83 	.word	0x431bde83
 8001ca4:	10624dd3 	.word	0x10624dd3

08001ca8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b088      	sub	sp, #32
 8001cac:	af02      	add	r7, sp, #8
 8001cae:	60f8      	str	r0, [r7, #12]
 8001cb0:	607a      	str	r2, [r7, #4]
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	460b      	mov	r3, r1
 8001cb6:	817b      	strh	r3, [r7, #10]
 8001cb8:	4613      	mov	r3, r2
 8001cba:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001cbc:	f7fe ff44 	bl	8000b48 <HAL_GetTick>
 8001cc0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	2b20      	cmp	r3, #32
 8001ccc:	f040 80e0 	bne.w	8001e90 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	9300      	str	r3, [sp, #0]
 8001cd4:	2319      	movs	r3, #25
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	4970      	ldr	r1, [pc, #448]	; (8001e9c <HAL_I2C_Master_Transmit+0x1f4>)
 8001cda:	68f8      	ldr	r0, [r7, #12]
 8001cdc:	f000 ff50 	bl	8002b80 <I2C_WaitOnFlagUntilTimeout>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d001      	beq.n	8001cea <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001ce6:	2302      	movs	r3, #2
 8001ce8:	e0d3      	b.n	8001e92 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d101      	bne.n	8001cf8 <HAL_I2C_Master_Transmit+0x50>
 8001cf4:	2302      	movs	r3, #2
 8001cf6:	e0cc      	b.n	8001e92 <HAL_I2C_Master_Transmit+0x1ea>
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 0301 	and.w	r3, r3, #1
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d007      	beq.n	8001d1e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f042 0201 	orr.w	r2, r2, #1
 8001d1c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d2c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	2221      	movs	r2, #33	; 0x21
 8001d32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	2210      	movs	r2, #16
 8001d3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	2200      	movs	r2, #0
 8001d42:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	687a      	ldr	r2, [r7, #4]
 8001d48:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	893a      	ldrh	r2, [r7, #8]
 8001d4e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d54:	b29a      	uxth	r2, r3
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	4a50      	ldr	r2, [pc, #320]	; (8001ea0 <HAL_I2C_Master_Transmit+0x1f8>)
 8001d5e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001d60:	8979      	ldrh	r1, [r7, #10]
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	6a3a      	ldr	r2, [r7, #32]
 8001d66:	68f8      	ldr	r0, [r7, #12]
 8001d68:	f000 fd24 	bl	80027b4 <I2C_MasterRequestWrite>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d001      	beq.n	8001d76 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e08d      	b.n	8001e92 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d76:	2300      	movs	r3, #0
 8001d78:	613b      	str	r3, [r7, #16]
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	695b      	ldr	r3, [r3, #20]
 8001d80:	613b      	str	r3, [r7, #16]
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	699b      	ldr	r3, [r3, #24]
 8001d88:	613b      	str	r3, [r7, #16]
 8001d8a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001d8c:	e066      	b.n	8001e5c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d8e:	697a      	ldr	r2, [r7, #20]
 8001d90:	6a39      	ldr	r1, [r7, #32]
 8001d92:	68f8      	ldr	r0, [r7, #12]
 8001d94:	f000 ffca 	bl	8002d2c <I2C_WaitOnTXEFlagUntilTimeout>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d00d      	beq.n	8001dba <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da2:	2b04      	cmp	r3, #4
 8001da4:	d107      	bne.n	8001db6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001db4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e06b      	b.n	8001e92 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dbe:	781a      	ldrb	r2, [r3, #0]
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dca:	1c5a      	adds	r2, r3, #1
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dd4:	b29b      	uxth	r3, r3
 8001dd6:	3b01      	subs	r3, #1
 8001dd8:	b29a      	uxth	r2, r3
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001de2:	3b01      	subs	r3, #1
 8001de4:	b29a      	uxth	r2, r3
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	695b      	ldr	r3, [r3, #20]
 8001df0:	f003 0304 	and.w	r3, r3, #4
 8001df4:	2b04      	cmp	r3, #4
 8001df6:	d11b      	bne.n	8001e30 <HAL_I2C_Master_Transmit+0x188>
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d017      	beq.n	8001e30 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e04:	781a      	ldrb	r2, [r3, #0]
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e10:	1c5a      	adds	r2, r3, #1
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e1a:	b29b      	uxth	r3, r3
 8001e1c:	3b01      	subs	r3, #1
 8001e1e:	b29a      	uxth	r2, r3
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e28:	3b01      	subs	r3, #1
 8001e2a:	b29a      	uxth	r2, r3
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e30:	697a      	ldr	r2, [r7, #20]
 8001e32:	6a39      	ldr	r1, [r7, #32]
 8001e34:	68f8      	ldr	r0, [r7, #12]
 8001e36:	f000 ffba 	bl	8002dae <I2C_WaitOnBTFFlagUntilTimeout>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d00d      	beq.n	8001e5c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e44:	2b04      	cmp	r3, #4
 8001e46:	d107      	bne.n	8001e58 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e56:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e01a      	b.n	8001e92 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d194      	bne.n	8001d8e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e72:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	2220      	movs	r2, #32
 8001e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	2200      	movs	r2, #0
 8001e88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	e000      	b.n	8001e92 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001e90:	2302      	movs	r3, #2
  }
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3718      	adds	r7, #24
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	00100002 	.word	0x00100002
 8001ea0:	ffff0000 	.word	0xffff0000

08001ea4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b08c      	sub	sp, #48	; 0x30
 8001ea8:	af02      	add	r7, sp, #8
 8001eaa:	60f8      	str	r0, [r7, #12]
 8001eac:	607a      	str	r2, [r7, #4]
 8001eae:	461a      	mov	r2, r3
 8001eb0:	460b      	mov	r3, r1
 8001eb2:	817b      	strh	r3, [r7, #10]
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001ebc:	f7fe fe44 	bl	8000b48 <HAL_GetTick>
 8001ec0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	2b20      	cmp	r3, #32
 8001ecc:	f040 823f 	bne.w	800234e <HAL_I2C_Master_Receive+0x4aa>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed2:	9300      	str	r3, [sp, #0]
 8001ed4:	2319      	movs	r3, #25
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	497f      	ldr	r1, [pc, #508]	; (80020d8 <HAL_I2C_Master_Receive+0x234>)
 8001eda:	68f8      	ldr	r0, [r7, #12]
 8001edc:	f000 fe50 	bl	8002b80 <I2C_WaitOnFlagUntilTimeout>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d001      	beq.n	8001eea <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8001ee6:	2302      	movs	r3, #2
 8001ee8:	e232      	b.n	8002350 <HAL_I2C_Master_Receive+0x4ac>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d101      	bne.n	8001ef8 <HAL_I2C_Master_Receive+0x54>
 8001ef4:	2302      	movs	r3, #2
 8001ef6:	e22b      	b.n	8002350 <HAL_I2C_Master_Receive+0x4ac>
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	2201      	movs	r2, #1
 8001efc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 0301 	and.w	r3, r3, #1
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d007      	beq.n	8001f1e <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f042 0201 	orr.w	r2, r2, #1
 8001f1c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f2c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	2222      	movs	r2, #34	; 0x22
 8001f32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	2210      	movs	r2, #16
 8001f3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	2200      	movs	r2, #0
 8001f42:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	687a      	ldr	r2, [r7, #4]
 8001f48:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	893a      	ldrh	r2, [r7, #8]
 8001f4e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f54:	b29a      	uxth	r2, r3
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	4a5f      	ldr	r2, [pc, #380]	; (80020dc <HAL_I2C_Master_Receive+0x238>)
 8001f5e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001f60:	8979      	ldrh	r1, [r7, #10]
 8001f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001f66:	68f8      	ldr	r0, [r7, #12]
 8001f68:	f000 fca6 	bl	80028b8 <I2C_MasterRequestRead>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d001      	beq.n	8001f76 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e1ec      	b.n	8002350 <HAL_I2C_Master_Receive+0x4ac>
    }

    if (hi2c->XferSize == 0U)
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d113      	bne.n	8001fa6 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f7e:	2300      	movs	r3, #0
 8001f80:	61fb      	str	r3, [r7, #28]
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	695b      	ldr	r3, [r3, #20]
 8001f88:	61fb      	str	r3, [r7, #28]
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	699b      	ldr	r3, [r3, #24]
 8001f90:	61fb      	str	r3, [r7, #28]
 8001f92:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fa2:	601a      	str	r2, [r3, #0]
 8001fa4:	e1c0      	b.n	8002328 <HAL_I2C_Master_Receive+0x484>
    }
    else if (hi2c->XferSize == 1U)
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d11e      	bne.n	8001fec <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001fbc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001fbe:	b672      	cpsid	i
}
 8001fc0:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	61bb      	str	r3, [r7, #24]
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	695b      	ldr	r3, [r3, #20]
 8001fcc:	61bb      	str	r3, [r7, #24]
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	699b      	ldr	r3, [r3, #24]
 8001fd4:	61bb      	str	r3, [r7, #24]
 8001fd6:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fe6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001fe8:	b662      	cpsie	i
}
 8001fea:	e035      	b.n	8002058 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ff0:	2b02      	cmp	r3, #2
 8001ff2:	d11e      	bne.n	8002032 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002002:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002004:	b672      	cpsid	i
}
 8002006:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002008:	2300      	movs	r3, #0
 800200a:	617b      	str	r3, [r7, #20]
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	695b      	ldr	r3, [r3, #20]
 8002012:	617b      	str	r3, [r7, #20]
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	699b      	ldr	r3, [r3, #24]
 800201a:	617b      	str	r3, [r7, #20]
 800201c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800202c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800202e:	b662      	cpsie	i
}
 8002030:	e012      	b.n	8002058 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002040:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002042:	2300      	movs	r3, #0
 8002044:	613b      	str	r3, [r7, #16]
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	695b      	ldr	r3, [r3, #20]
 800204c:	613b      	str	r3, [r7, #16]
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	699b      	ldr	r3, [r3, #24]
 8002054:	613b      	str	r3, [r7, #16]
 8002056:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002058:	e166      	b.n	8002328 <HAL_I2C_Master_Receive+0x484>
    {
      if (hi2c->XferSize <= 3U)
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800205e:	2b03      	cmp	r3, #3
 8002060:	f200 811f 	bhi.w	80022a2 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002068:	2b01      	cmp	r3, #1
 800206a:	d123      	bne.n	80020b4 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800206c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800206e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002070:	68f8      	ldr	r0, [r7, #12]
 8002072:	f000 fedd 	bl	8002e30 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d001      	beq.n	8002080 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e167      	b.n	8002350 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	691a      	ldr	r2, [r3, #16]
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800208a:	b2d2      	uxtb	r2, r2
 800208c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002092:	1c5a      	adds	r2, r3, #1
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800209c:	3b01      	subs	r3, #1
 800209e:	b29a      	uxth	r2, r3
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020a8:	b29b      	uxth	r3, r3
 80020aa:	3b01      	subs	r3, #1
 80020ac:	b29a      	uxth	r2, r3
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80020b2:	e139      	b.n	8002328 <HAL_I2C_Master_Receive+0x484>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020b8:	2b02      	cmp	r3, #2
 80020ba:	d152      	bne.n	8002162 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80020bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020be:	9300      	str	r3, [sp, #0]
 80020c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020c2:	2200      	movs	r2, #0
 80020c4:	4906      	ldr	r1, [pc, #24]	; (80020e0 <HAL_I2C_Master_Receive+0x23c>)
 80020c6:	68f8      	ldr	r0, [r7, #12]
 80020c8:	f000 fd5a 	bl	8002b80 <I2C_WaitOnFlagUntilTimeout>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d008      	beq.n	80020e4 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e13c      	b.n	8002350 <HAL_I2C_Master_Receive+0x4ac>
 80020d6:	bf00      	nop
 80020d8:	00100002 	.word	0x00100002
 80020dc:	ffff0000 	.word	0xffff0000
 80020e0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80020e4:	b672      	cpsid	i
}
 80020e6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	691a      	ldr	r2, [r3, #16]
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002102:	b2d2      	uxtb	r2, r2
 8002104:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800210a:	1c5a      	adds	r2, r3, #1
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002114:	3b01      	subs	r3, #1
 8002116:	b29a      	uxth	r2, r3
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002120:	b29b      	uxth	r3, r3
 8002122:	3b01      	subs	r3, #1
 8002124:	b29a      	uxth	r2, r3
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800212a:	b662      	cpsie	i
}
 800212c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	691a      	ldr	r2, [r3, #16]
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002138:	b2d2      	uxtb	r2, r2
 800213a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002140:	1c5a      	adds	r2, r3, #1
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800214a:	3b01      	subs	r3, #1
 800214c:	b29a      	uxth	r2, r3
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002156:	b29b      	uxth	r3, r3
 8002158:	3b01      	subs	r3, #1
 800215a:	b29a      	uxth	r2, r3
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002160:	e0e2      	b.n	8002328 <HAL_I2C_Master_Receive+0x484>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002164:	9300      	str	r3, [sp, #0]
 8002166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002168:	2200      	movs	r2, #0
 800216a:	497b      	ldr	r1, [pc, #492]	; (8002358 <HAL_I2C_Master_Receive+0x4b4>)
 800216c:	68f8      	ldr	r0, [r7, #12]
 800216e:	f000 fd07 	bl	8002b80 <I2C_WaitOnFlagUntilTimeout>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d001      	beq.n	800217c <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	e0e9      	b.n	8002350 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800218a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800218c:	b672      	cpsid	i
}
 800218e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	691a      	ldr	r2, [r3, #16]
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800219a:	b2d2      	uxtb	r2, r2
 800219c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a2:	1c5a      	adds	r2, r3, #1
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021ac:	3b01      	subs	r3, #1
 80021ae:	b29a      	uxth	r2, r3
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021b8:	b29b      	uxth	r3, r3
 80021ba:	3b01      	subs	r3, #1
 80021bc:	b29a      	uxth	r2, r3
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80021c2:	4b66      	ldr	r3, [pc, #408]	; (800235c <HAL_I2C_Master_Receive+0x4b8>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	08db      	lsrs	r3, r3, #3
 80021c8:	4a65      	ldr	r2, [pc, #404]	; (8002360 <HAL_I2C_Master_Receive+0x4bc>)
 80021ca:	fba2 2303 	umull	r2, r3, r2, r3
 80021ce:	0a1a      	lsrs	r2, r3, #8
 80021d0:	4613      	mov	r3, r2
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	4413      	add	r3, r2
 80021d6:	00da      	lsls	r2, r3, #3
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80021dc:	6a3b      	ldr	r3, [r7, #32]
 80021de:	3b01      	subs	r3, #1
 80021e0:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80021e2:	6a3b      	ldr	r3, [r7, #32]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d118      	bne.n	800221a <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	2200      	movs	r2, #0
 80021ec:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	2220      	movs	r2, #32
 80021f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2200      	movs	r2, #0
 80021fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002202:	f043 0220 	orr.w	r2, r3, #32
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800220a:	b662      	cpsie	i
}
 800220c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	2200      	movs	r2, #0
 8002212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e09a      	b.n	8002350 <HAL_I2C_Master_Receive+0x4ac>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	695b      	ldr	r3, [r3, #20]
 8002220:	f003 0304 	and.w	r3, r3, #4
 8002224:	2b04      	cmp	r3, #4
 8002226:	d1d9      	bne.n	80021dc <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002236:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	691a      	ldr	r2, [r3, #16]
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002242:	b2d2      	uxtb	r2, r2
 8002244:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800224a:	1c5a      	adds	r2, r3, #1
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002254:	3b01      	subs	r3, #1
 8002256:	b29a      	uxth	r2, r3
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002260:	b29b      	uxth	r3, r3
 8002262:	3b01      	subs	r3, #1
 8002264:	b29a      	uxth	r2, r3
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800226a:	b662      	cpsie	i
}
 800226c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	691a      	ldr	r2, [r3, #16]
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002278:	b2d2      	uxtb	r2, r2
 800227a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002280:	1c5a      	adds	r2, r3, #1
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800228a:	3b01      	subs	r3, #1
 800228c:	b29a      	uxth	r2, r3
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002296:	b29b      	uxth	r3, r3
 8002298:	3b01      	subs	r3, #1
 800229a:	b29a      	uxth	r2, r3
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	855a      	strh	r2, [r3, #42]	; 0x2a
 80022a0:	e042      	b.n	8002328 <HAL_I2C_Master_Receive+0x484>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022a4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80022a6:	68f8      	ldr	r0, [r7, #12]
 80022a8:	f000 fdc2 	bl	8002e30 <I2C_WaitOnRXNEFlagUntilTimeout>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d001      	beq.n	80022b6 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e04c      	b.n	8002350 <HAL_I2C_Master_Receive+0x4ac>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	691a      	ldr	r2, [r3, #16]
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c0:	b2d2      	uxtb	r2, r2
 80022c2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c8:	1c5a      	adds	r2, r3, #1
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022d2:	3b01      	subs	r3, #1
 80022d4:	b29a      	uxth	r2, r3
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022de:	b29b      	uxth	r3, r3
 80022e0:	3b01      	subs	r3, #1
 80022e2:	b29a      	uxth	r2, r3
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	695b      	ldr	r3, [r3, #20]
 80022ee:	f003 0304 	and.w	r3, r3, #4
 80022f2:	2b04      	cmp	r3, #4
 80022f4:	d118      	bne.n	8002328 <HAL_I2C_Master_Receive+0x484>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	691a      	ldr	r2, [r3, #16]
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002300:	b2d2      	uxtb	r2, r2
 8002302:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002308:	1c5a      	adds	r2, r3, #1
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002312:	3b01      	subs	r3, #1
 8002314:	b29a      	uxth	r2, r3
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800231e:	b29b      	uxth	r3, r3
 8002320:	3b01      	subs	r3, #1
 8002322:	b29a      	uxth	r2, r3
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800232c:	2b00      	cmp	r3, #0
 800232e:	f47f ae94 	bne.w	800205a <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	2220      	movs	r2, #32
 8002336:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2200      	movs	r2, #0
 800233e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	2200      	movs	r2, #0
 8002346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800234a:	2300      	movs	r3, #0
 800234c:	e000      	b.n	8002350 <HAL_I2C_Master_Receive+0x4ac>
  }
  else
  {
    return HAL_BUSY;
 800234e:	2302      	movs	r3, #2
  }
}
 8002350:	4618      	mov	r0, r3
 8002352:	3728      	adds	r7, #40	; 0x28
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}
 8002358:	00010004 	.word	0x00010004
 800235c:	20000000 	.word	0x20000000
 8002360:	14f8b589 	.word	0x14f8b589

08002364 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b088      	sub	sp, #32
 8002368:	af02      	add	r7, sp, #8
 800236a:	60f8      	str	r0, [r7, #12]
 800236c:	4608      	mov	r0, r1
 800236e:	4611      	mov	r1, r2
 8002370:	461a      	mov	r2, r3
 8002372:	4603      	mov	r3, r0
 8002374:	817b      	strh	r3, [r7, #10]
 8002376:	460b      	mov	r3, r1
 8002378:	813b      	strh	r3, [r7, #8]
 800237a:	4613      	mov	r3, r2
 800237c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800237e:	f7fe fbe3 	bl	8000b48 <HAL_GetTick>
 8002382:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800238a:	b2db      	uxtb	r3, r3
 800238c:	2b20      	cmp	r3, #32
 800238e:	f040 80d9 	bne.w	8002544 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	9300      	str	r3, [sp, #0]
 8002396:	2319      	movs	r3, #25
 8002398:	2201      	movs	r2, #1
 800239a:	496d      	ldr	r1, [pc, #436]	; (8002550 <HAL_I2C_Mem_Write+0x1ec>)
 800239c:	68f8      	ldr	r0, [r7, #12]
 800239e:	f000 fbef 	bl	8002b80 <I2C_WaitOnFlagUntilTimeout>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d001      	beq.n	80023ac <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80023a8:	2302      	movs	r3, #2
 80023aa:	e0cc      	b.n	8002546 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d101      	bne.n	80023ba <HAL_I2C_Mem_Write+0x56>
 80023b6:	2302      	movs	r3, #2
 80023b8:	e0c5      	b.n	8002546 <HAL_I2C_Mem_Write+0x1e2>
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2201      	movs	r2, #1
 80023be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0301 	and.w	r3, r3, #1
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d007      	beq.n	80023e0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f042 0201 	orr.w	r2, r2, #1
 80023de:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023ee:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2221      	movs	r2, #33	; 0x21
 80023f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2240      	movs	r2, #64	; 0x40
 80023fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2200      	movs	r2, #0
 8002404:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	6a3a      	ldr	r2, [r7, #32]
 800240a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002410:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002416:	b29a      	uxth	r2, r3
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	4a4d      	ldr	r2, [pc, #308]	; (8002554 <HAL_I2C_Mem_Write+0x1f0>)
 8002420:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002422:	88f8      	ldrh	r0, [r7, #6]
 8002424:	893a      	ldrh	r2, [r7, #8]
 8002426:	8979      	ldrh	r1, [r7, #10]
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	9301      	str	r3, [sp, #4]
 800242c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800242e:	9300      	str	r3, [sp, #0]
 8002430:	4603      	mov	r3, r0
 8002432:	68f8      	ldr	r0, [r7, #12]
 8002434:	f000 fb0e 	bl	8002a54 <I2C_RequestMemoryWrite>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d052      	beq.n	80024e4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e081      	b.n	8002546 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002442:	697a      	ldr	r2, [r7, #20]
 8002444:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002446:	68f8      	ldr	r0, [r7, #12]
 8002448:	f000 fc70 	bl	8002d2c <I2C_WaitOnTXEFlagUntilTimeout>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d00d      	beq.n	800246e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002456:	2b04      	cmp	r3, #4
 8002458:	d107      	bne.n	800246a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002468:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e06b      	b.n	8002546 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002472:	781a      	ldrb	r2, [r3, #0]
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800247e:	1c5a      	adds	r2, r3, #1
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002488:	3b01      	subs	r3, #1
 800248a:	b29a      	uxth	r2, r3
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002494:	b29b      	uxth	r3, r3
 8002496:	3b01      	subs	r3, #1
 8002498:	b29a      	uxth	r2, r3
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	695b      	ldr	r3, [r3, #20]
 80024a4:	f003 0304 	and.w	r3, r3, #4
 80024a8:	2b04      	cmp	r3, #4
 80024aa:	d11b      	bne.n	80024e4 <HAL_I2C_Mem_Write+0x180>
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d017      	beq.n	80024e4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b8:	781a      	ldrb	r2, [r3, #0]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c4:	1c5a      	adds	r2, r3, #1
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024ce:	3b01      	subs	r3, #1
 80024d0:	b29a      	uxth	r2, r3
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024da:	b29b      	uxth	r3, r3
 80024dc:	3b01      	subs	r3, #1
 80024de:	b29a      	uxth	r2, r3
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d1aa      	bne.n	8002442 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024ec:	697a      	ldr	r2, [r7, #20]
 80024ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80024f0:	68f8      	ldr	r0, [r7, #12]
 80024f2:	f000 fc5c 	bl	8002dae <I2C_WaitOnBTFFlagUntilTimeout>
 80024f6:	4603      	mov	r3, r0
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d00d      	beq.n	8002518 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002500:	2b04      	cmp	r3, #4
 8002502:	d107      	bne.n	8002514 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002512:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	e016      	b.n	8002546 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002526:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	2220      	movs	r2, #32
 800252c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2200      	movs	r2, #0
 8002534:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2200      	movs	r2, #0
 800253c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002540:	2300      	movs	r3, #0
 8002542:	e000      	b.n	8002546 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002544:	2302      	movs	r3, #2
  }
}
 8002546:	4618      	mov	r0, r3
 8002548:	3718      	adds	r7, #24
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	00100002 	.word	0x00100002
 8002554:	ffff0000 	.word	0xffff0000

08002558 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b08a      	sub	sp, #40	; 0x28
 800255c:	af02      	add	r7, sp, #8
 800255e:	60f8      	str	r0, [r7, #12]
 8002560:	607a      	str	r2, [r7, #4]
 8002562:	603b      	str	r3, [r7, #0]
 8002564:	460b      	mov	r3, r1
 8002566:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002568:	f7fe faee 	bl	8000b48 <HAL_GetTick>
 800256c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 800256e:	2301      	movs	r3, #1
 8002570:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002578:	b2db      	uxtb	r3, r3
 800257a:	2b20      	cmp	r3, #32
 800257c:	f040 8111 	bne.w	80027a2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	9300      	str	r3, [sp, #0]
 8002584:	2319      	movs	r3, #25
 8002586:	2201      	movs	r2, #1
 8002588:	4988      	ldr	r1, [pc, #544]	; (80027ac <HAL_I2C_IsDeviceReady+0x254>)
 800258a:	68f8      	ldr	r0, [r7, #12]
 800258c:	f000 faf8 	bl	8002b80 <I2C_WaitOnFlagUntilTimeout>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	d001      	beq.n	800259a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002596:	2302      	movs	r3, #2
 8002598:	e104      	b.n	80027a4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d101      	bne.n	80025a8 <HAL_I2C_IsDeviceReady+0x50>
 80025a4:	2302      	movs	r3, #2
 80025a6:	e0fd      	b.n	80027a4 <HAL_I2C_IsDeviceReady+0x24c>
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2201      	movs	r2, #1
 80025ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0301 	and.w	r3, r3, #1
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d007      	beq.n	80025ce <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f042 0201 	orr.w	r2, r2, #1
 80025cc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025dc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	2224      	movs	r2, #36	; 0x24
 80025e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	2200      	movs	r2, #0
 80025ea:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	4a70      	ldr	r2, [pc, #448]	; (80027b0 <HAL_I2C_IsDeviceReady+0x258>)
 80025f0:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002600:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	9300      	str	r3, [sp, #0]
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	2200      	movs	r2, #0
 800260a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800260e:	68f8      	ldr	r0, [r7, #12]
 8002610:	f000 fab6 	bl	8002b80 <I2C_WaitOnFlagUntilTimeout>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d00d      	beq.n	8002636 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002624:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002628:	d103      	bne.n	8002632 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002630:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002632:	2303      	movs	r3, #3
 8002634:	e0b6      	b.n	80027a4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002636:	897b      	ldrh	r3, [r7, #10]
 8002638:	b2db      	uxtb	r3, r3
 800263a:	461a      	mov	r2, r3
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002644:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002646:	f7fe fa7f 	bl	8000b48 <HAL_GetTick>
 800264a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	695b      	ldr	r3, [r3, #20]
 8002652:	f003 0302 	and.w	r3, r3, #2
 8002656:	2b02      	cmp	r3, #2
 8002658:	bf0c      	ite	eq
 800265a:	2301      	moveq	r3, #1
 800265c:	2300      	movne	r3, #0
 800265e:	b2db      	uxtb	r3, r3
 8002660:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	695b      	ldr	r3, [r3, #20]
 8002668:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800266c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002670:	bf0c      	ite	eq
 8002672:	2301      	moveq	r3, #1
 8002674:	2300      	movne	r3, #0
 8002676:	b2db      	uxtb	r3, r3
 8002678:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800267a:	e025      	b.n	80026c8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800267c:	f7fe fa64 	bl	8000b48 <HAL_GetTick>
 8002680:	4602      	mov	r2, r0
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	683a      	ldr	r2, [r7, #0]
 8002688:	429a      	cmp	r2, r3
 800268a:	d302      	bcc.n	8002692 <HAL_I2C_IsDeviceReady+0x13a>
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d103      	bne.n	800269a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	22a0      	movs	r2, #160	; 0xa0
 8002696:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	695b      	ldr	r3, [r3, #20]
 80026a0:	f003 0302 	and.w	r3, r3, #2
 80026a4:	2b02      	cmp	r3, #2
 80026a6:	bf0c      	ite	eq
 80026a8:	2301      	moveq	r3, #1
 80026aa:	2300      	movne	r3, #0
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	695b      	ldr	r3, [r3, #20]
 80026b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026be:	bf0c      	ite	eq
 80026c0:	2301      	moveq	r3, #1
 80026c2:	2300      	movne	r3, #0
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026ce:	b2db      	uxtb	r3, r3
 80026d0:	2ba0      	cmp	r3, #160	; 0xa0
 80026d2:	d005      	beq.n	80026e0 <HAL_I2C_IsDeviceReady+0x188>
 80026d4:	7dfb      	ldrb	r3, [r7, #23]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d102      	bne.n	80026e0 <HAL_I2C_IsDeviceReady+0x188>
 80026da:	7dbb      	ldrb	r3, [r7, #22]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d0cd      	beq.n	800267c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2220      	movs	r2, #32
 80026e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	695b      	ldr	r3, [r3, #20]
 80026ee:	f003 0302 	and.w	r3, r3, #2
 80026f2:	2b02      	cmp	r3, #2
 80026f4:	d129      	bne.n	800274a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002704:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002706:	2300      	movs	r3, #0
 8002708:	613b      	str	r3, [r7, #16]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	695b      	ldr	r3, [r3, #20]
 8002710:	613b      	str	r3, [r7, #16]
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	699b      	ldr	r3, [r3, #24]
 8002718:	613b      	str	r3, [r7, #16]
 800271a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	9300      	str	r3, [sp, #0]
 8002720:	2319      	movs	r3, #25
 8002722:	2201      	movs	r2, #1
 8002724:	4921      	ldr	r1, [pc, #132]	; (80027ac <HAL_I2C_IsDeviceReady+0x254>)
 8002726:	68f8      	ldr	r0, [r7, #12]
 8002728:	f000 fa2a 	bl	8002b80 <I2C_WaitOnFlagUntilTimeout>
 800272c:	4603      	mov	r3, r0
 800272e:	2b00      	cmp	r3, #0
 8002730:	d001      	beq.n	8002736 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e036      	b.n	80027a4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2220      	movs	r2, #32
 800273a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2200      	movs	r2, #0
 8002742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002746:	2300      	movs	r3, #0
 8002748:	e02c      	b.n	80027a4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002758:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002762:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002764:	69fb      	ldr	r3, [r7, #28]
 8002766:	9300      	str	r3, [sp, #0]
 8002768:	2319      	movs	r3, #25
 800276a:	2201      	movs	r2, #1
 800276c:	490f      	ldr	r1, [pc, #60]	; (80027ac <HAL_I2C_IsDeviceReady+0x254>)
 800276e:	68f8      	ldr	r0, [r7, #12]
 8002770:	f000 fa06 	bl	8002b80 <I2C_WaitOnFlagUntilTimeout>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d001      	beq.n	800277e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e012      	b.n	80027a4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800277e:	69bb      	ldr	r3, [r7, #24]
 8002780:	3301      	adds	r3, #1
 8002782:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002784:	69ba      	ldr	r2, [r7, #24]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	429a      	cmp	r2, r3
 800278a:	f4ff af32 	bcc.w	80025f2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2220      	movs	r2, #32
 8002792:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2200      	movs	r2, #0
 800279a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e000      	b.n	80027a4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80027a2:	2302      	movs	r3, #2
  }
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3720      	adds	r7, #32
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	00100002 	.word	0x00100002
 80027b0:	ffff0000 	.word	0xffff0000

080027b4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b088      	sub	sp, #32
 80027b8:	af02      	add	r7, sp, #8
 80027ba:	60f8      	str	r0, [r7, #12]
 80027bc:	607a      	str	r2, [r7, #4]
 80027be:	603b      	str	r3, [r7, #0]
 80027c0:	460b      	mov	r3, r1
 80027c2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	2b08      	cmp	r3, #8
 80027ce:	d006      	beq.n	80027de <I2C_MasterRequestWrite+0x2a>
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d003      	beq.n	80027de <I2C_MasterRequestWrite+0x2a>
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80027dc:	d108      	bne.n	80027f0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027ec:	601a      	str	r2, [r3, #0]
 80027ee:	e00b      	b.n	8002808 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f4:	2b12      	cmp	r3, #18
 80027f6:	d107      	bne.n	8002808 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002806:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	9300      	str	r3, [sp, #0]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2200      	movs	r2, #0
 8002810:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002814:	68f8      	ldr	r0, [r7, #12]
 8002816:	f000 f9b3 	bl	8002b80 <I2C_WaitOnFlagUntilTimeout>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d00d      	beq.n	800283c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800282a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800282e:	d103      	bne.n	8002838 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002836:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002838:	2303      	movs	r3, #3
 800283a:	e035      	b.n	80028a8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	691b      	ldr	r3, [r3, #16]
 8002840:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002844:	d108      	bne.n	8002858 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002846:	897b      	ldrh	r3, [r7, #10]
 8002848:	b2db      	uxtb	r3, r3
 800284a:	461a      	mov	r2, r3
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002854:	611a      	str	r2, [r3, #16]
 8002856:	e01b      	b.n	8002890 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002858:	897b      	ldrh	r3, [r7, #10]
 800285a:	11db      	asrs	r3, r3, #7
 800285c:	b2db      	uxtb	r3, r3
 800285e:	f003 0306 	and.w	r3, r3, #6
 8002862:	b2db      	uxtb	r3, r3
 8002864:	f063 030f 	orn	r3, r3, #15
 8002868:	b2da      	uxtb	r2, r3
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	687a      	ldr	r2, [r7, #4]
 8002874:	490e      	ldr	r1, [pc, #56]	; (80028b0 <I2C_MasterRequestWrite+0xfc>)
 8002876:	68f8      	ldr	r0, [r7, #12]
 8002878:	f000 f9d9 	bl	8002c2e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d001      	beq.n	8002886 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e010      	b.n	80028a8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002886:	897b      	ldrh	r3, [r7, #10]
 8002888:	b2da      	uxtb	r2, r3
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	4907      	ldr	r1, [pc, #28]	; (80028b4 <I2C_MasterRequestWrite+0x100>)
 8002896:	68f8      	ldr	r0, [r7, #12]
 8002898:	f000 f9c9 	bl	8002c2e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d001      	beq.n	80028a6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e000      	b.n	80028a8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80028a6:	2300      	movs	r3, #0
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	3718      	adds	r7, #24
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	00010008 	.word	0x00010008
 80028b4:	00010002 	.word	0x00010002

080028b8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b088      	sub	sp, #32
 80028bc:	af02      	add	r7, sp, #8
 80028be:	60f8      	str	r0, [r7, #12]
 80028c0:	607a      	str	r2, [r7, #4]
 80028c2:	603b      	str	r3, [r7, #0]
 80028c4:	460b      	mov	r3, r1
 80028c6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028cc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80028dc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	2b08      	cmp	r3, #8
 80028e2:	d006      	beq.n	80028f2 <I2C_MasterRequestRead+0x3a>
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d003      	beq.n	80028f2 <I2C_MasterRequestRead+0x3a>
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80028f0:	d108      	bne.n	8002904 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002900:	601a      	str	r2, [r3, #0]
 8002902:	e00b      	b.n	800291c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002908:	2b11      	cmp	r3, #17
 800290a:	d107      	bne.n	800291c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800291a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	9300      	str	r3, [sp, #0]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2200      	movs	r2, #0
 8002924:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002928:	68f8      	ldr	r0, [r7, #12]
 800292a:	f000 f929 	bl	8002b80 <I2C_WaitOnFlagUntilTimeout>
 800292e:	4603      	mov	r3, r0
 8002930:	2b00      	cmp	r3, #0
 8002932:	d00d      	beq.n	8002950 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800293e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002942:	d103      	bne.n	800294c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	f44f 7200 	mov.w	r2, #512	; 0x200
 800294a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800294c:	2303      	movs	r3, #3
 800294e:	e079      	b.n	8002a44 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	691b      	ldr	r3, [r3, #16]
 8002954:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002958:	d108      	bne.n	800296c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800295a:	897b      	ldrh	r3, [r7, #10]
 800295c:	b2db      	uxtb	r3, r3
 800295e:	f043 0301 	orr.w	r3, r3, #1
 8002962:	b2da      	uxtb	r2, r3
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	611a      	str	r2, [r3, #16]
 800296a:	e05f      	b.n	8002a2c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800296c:	897b      	ldrh	r3, [r7, #10]
 800296e:	11db      	asrs	r3, r3, #7
 8002970:	b2db      	uxtb	r3, r3
 8002972:	f003 0306 	and.w	r3, r3, #6
 8002976:	b2db      	uxtb	r3, r3
 8002978:	f063 030f 	orn	r3, r3, #15
 800297c:	b2da      	uxtb	r2, r3
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	4930      	ldr	r1, [pc, #192]	; (8002a4c <I2C_MasterRequestRead+0x194>)
 800298a:	68f8      	ldr	r0, [r7, #12]
 800298c:	f000 f94f 	bl	8002c2e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002990:	4603      	mov	r3, r0
 8002992:	2b00      	cmp	r3, #0
 8002994:	d001      	beq.n	800299a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e054      	b.n	8002a44 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800299a:	897b      	ldrh	r3, [r7, #10]
 800299c:	b2da      	uxtb	r2, r3
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	687a      	ldr	r2, [r7, #4]
 80029a8:	4929      	ldr	r1, [pc, #164]	; (8002a50 <I2C_MasterRequestRead+0x198>)
 80029aa:	68f8      	ldr	r0, [r7, #12]
 80029ac:	f000 f93f 	bl	8002c2e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d001      	beq.n	80029ba <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e044      	b.n	8002a44 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029ba:	2300      	movs	r3, #0
 80029bc:	613b      	str	r3, [r7, #16]
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	695b      	ldr	r3, [r3, #20]
 80029c4:	613b      	str	r3, [r7, #16]
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	699b      	ldr	r3, [r3, #24]
 80029cc:	613b      	str	r3, [r7, #16]
 80029ce:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029de:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	9300      	str	r3, [sp, #0]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2200      	movs	r2, #0
 80029e8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80029ec:	68f8      	ldr	r0, [r7, #12]
 80029ee:	f000 f8c7 	bl	8002b80 <I2C_WaitOnFlagUntilTimeout>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d00d      	beq.n	8002a14 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a06:	d103      	bne.n	8002a10 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a0e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002a10:	2303      	movs	r3, #3
 8002a12:	e017      	b.n	8002a44 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002a14:	897b      	ldrh	r3, [r7, #10]
 8002a16:	11db      	asrs	r3, r3, #7
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	f003 0306 	and.w	r3, r3, #6
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	f063 030e 	orn	r3, r3, #14
 8002a24:	b2da      	uxtb	r2, r3
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	4907      	ldr	r1, [pc, #28]	; (8002a50 <I2C_MasterRequestRead+0x198>)
 8002a32:	68f8      	ldr	r0, [r7, #12]
 8002a34:	f000 f8fb 	bl	8002c2e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d001      	beq.n	8002a42 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e000      	b.n	8002a44 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002a42:	2300      	movs	r3, #0
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	3718      	adds	r7, #24
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}
 8002a4c:	00010008 	.word	0x00010008
 8002a50:	00010002 	.word	0x00010002

08002a54 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b088      	sub	sp, #32
 8002a58:	af02      	add	r7, sp, #8
 8002a5a:	60f8      	str	r0, [r7, #12]
 8002a5c:	4608      	mov	r0, r1
 8002a5e:	4611      	mov	r1, r2
 8002a60:	461a      	mov	r2, r3
 8002a62:	4603      	mov	r3, r0
 8002a64:	817b      	strh	r3, [r7, #10]
 8002a66:	460b      	mov	r3, r1
 8002a68:	813b      	strh	r3, [r7, #8]
 8002a6a:	4613      	mov	r3, r2
 8002a6c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a7c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a80:	9300      	str	r3, [sp, #0]
 8002a82:	6a3b      	ldr	r3, [r7, #32]
 8002a84:	2200      	movs	r2, #0
 8002a86:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002a8a:	68f8      	ldr	r0, [r7, #12]
 8002a8c:	f000 f878 	bl	8002b80 <I2C_WaitOnFlagUntilTimeout>
 8002a90:	4603      	mov	r3, r0
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d00d      	beq.n	8002ab2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aa0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002aa4:	d103      	bne.n	8002aae <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002aac:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	e05f      	b.n	8002b72 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002ab2:	897b      	ldrh	r3, [r7, #10]
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002ac0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac4:	6a3a      	ldr	r2, [r7, #32]
 8002ac6:	492d      	ldr	r1, [pc, #180]	; (8002b7c <I2C_RequestMemoryWrite+0x128>)
 8002ac8:	68f8      	ldr	r0, [r7, #12]
 8002aca:	f000 f8b0 	bl	8002c2e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d001      	beq.n	8002ad8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e04c      	b.n	8002b72 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ad8:	2300      	movs	r3, #0
 8002ada:	617b      	str	r3, [r7, #20]
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	695b      	ldr	r3, [r3, #20]
 8002ae2:	617b      	str	r3, [r7, #20]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	699b      	ldr	r3, [r3, #24]
 8002aea:	617b      	str	r3, [r7, #20]
 8002aec:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002aee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002af0:	6a39      	ldr	r1, [r7, #32]
 8002af2:	68f8      	ldr	r0, [r7, #12]
 8002af4:	f000 f91a 	bl	8002d2c <I2C_WaitOnTXEFlagUntilTimeout>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d00d      	beq.n	8002b1a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b02:	2b04      	cmp	r3, #4
 8002b04:	d107      	bne.n	8002b16 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b14:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e02b      	b.n	8002b72 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002b1a:	88fb      	ldrh	r3, [r7, #6]
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d105      	bne.n	8002b2c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002b20:	893b      	ldrh	r3, [r7, #8]
 8002b22:	b2da      	uxtb	r2, r3
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	611a      	str	r2, [r3, #16]
 8002b2a:	e021      	b.n	8002b70 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002b2c:	893b      	ldrh	r3, [r7, #8]
 8002b2e:	0a1b      	lsrs	r3, r3, #8
 8002b30:	b29b      	uxth	r3, r3
 8002b32:	b2da      	uxtb	r2, r3
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b3c:	6a39      	ldr	r1, [r7, #32]
 8002b3e:	68f8      	ldr	r0, [r7, #12]
 8002b40:	f000 f8f4 	bl	8002d2c <I2C_WaitOnTXEFlagUntilTimeout>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d00d      	beq.n	8002b66 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4e:	2b04      	cmp	r3, #4
 8002b50:	d107      	bne.n	8002b62 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b60:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e005      	b.n	8002b72 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002b66:	893b      	ldrh	r3, [r7, #8]
 8002b68:	b2da      	uxtb	r2, r3
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002b70:	2300      	movs	r3, #0
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3718      	adds	r7, #24
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	00010002 	.word	0x00010002

08002b80 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b084      	sub	sp, #16
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	60f8      	str	r0, [r7, #12]
 8002b88:	60b9      	str	r1, [r7, #8]
 8002b8a:	603b      	str	r3, [r7, #0]
 8002b8c:	4613      	mov	r3, r2
 8002b8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b90:	e025      	b.n	8002bde <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b98:	d021      	beq.n	8002bde <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b9a:	f7fd ffd5 	bl	8000b48 <HAL_GetTick>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	69bb      	ldr	r3, [r7, #24]
 8002ba2:	1ad3      	subs	r3, r2, r3
 8002ba4:	683a      	ldr	r2, [r7, #0]
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	d302      	bcc.n	8002bb0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d116      	bne.n	8002bde <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2220      	movs	r2, #32
 8002bba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bca:	f043 0220 	orr.w	r2, r3, #32
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e023      	b.n	8002c26 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	0c1b      	lsrs	r3, r3, #16
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d10d      	bne.n	8002c04 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	695b      	ldr	r3, [r3, #20]
 8002bee:	43da      	mvns	r2, r3
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	b29b      	uxth	r3, r3
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	bf0c      	ite	eq
 8002bfa:	2301      	moveq	r3, #1
 8002bfc:	2300      	movne	r3, #0
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	461a      	mov	r2, r3
 8002c02:	e00c      	b.n	8002c1e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	699b      	ldr	r3, [r3, #24]
 8002c0a:	43da      	mvns	r2, r3
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	4013      	ands	r3, r2
 8002c10:	b29b      	uxth	r3, r3
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	bf0c      	ite	eq
 8002c16:	2301      	moveq	r3, #1
 8002c18:	2300      	movne	r3, #0
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	79fb      	ldrb	r3, [r7, #7]
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d0b6      	beq.n	8002b92 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002c24:	2300      	movs	r3, #0
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3710      	adds	r7, #16
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}

08002c2e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002c2e:	b580      	push	{r7, lr}
 8002c30:	b084      	sub	sp, #16
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	60f8      	str	r0, [r7, #12]
 8002c36:	60b9      	str	r1, [r7, #8]
 8002c38:	607a      	str	r2, [r7, #4]
 8002c3a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c3c:	e051      	b.n	8002ce2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	695b      	ldr	r3, [r3, #20]
 8002c44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c4c:	d123      	bne.n	8002c96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c5c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c66:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2220      	movs	r2, #32
 8002c72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c82:	f043 0204 	orr.w	r2, r3, #4
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e046      	b.n	8002d24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c9c:	d021      	beq.n	8002ce2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c9e:	f7fd ff53 	bl	8000b48 <HAL_GetTick>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	1ad3      	subs	r3, r2, r3
 8002ca8:	687a      	ldr	r2, [r7, #4]
 8002caa:	429a      	cmp	r2, r3
 8002cac:	d302      	bcc.n	8002cb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d116      	bne.n	8002ce2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2220      	movs	r2, #32
 8002cbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cce:	f043 0220 	orr.w	r2, r3, #32
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e020      	b.n	8002d24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	0c1b      	lsrs	r3, r3, #16
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d10c      	bne.n	8002d06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	695b      	ldr	r3, [r3, #20]
 8002cf2:	43da      	mvns	r2, r3
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	b29b      	uxth	r3, r3
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	bf14      	ite	ne
 8002cfe:	2301      	movne	r3, #1
 8002d00:	2300      	moveq	r3, #0
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	e00b      	b.n	8002d1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	699b      	ldr	r3, [r3, #24]
 8002d0c:	43da      	mvns	r2, r3
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	4013      	ands	r3, r2
 8002d12:	b29b      	uxth	r3, r3
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	bf14      	ite	ne
 8002d18:	2301      	movne	r3, #1
 8002d1a:	2300      	moveq	r3, #0
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d18d      	bne.n	8002c3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002d22:	2300      	movs	r3, #0
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3710      	adds	r7, #16
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}

08002d2c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b084      	sub	sp, #16
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	60f8      	str	r0, [r7, #12]
 8002d34:	60b9      	str	r1, [r7, #8]
 8002d36:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d38:	e02d      	b.n	8002d96 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d3a:	68f8      	ldr	r0, [r7, #12]
 8002d3c:	f000 f8ce 	bl	8002edc <I2C_IsAcknowledgeFailed>
 8002d40:	4603      	mov	r3, r0
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d001      	beq.n	8002d4a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e02d      	b.n	8002da6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d50:	d021      	beq.n	8002d96 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d52:	f7fd fef9 	bl	8000b48 <HAL_GetTick>
 8002d56:	4602      	mov	r2, r0
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	1ad3      	subs	r3, r2, r3
 8002d5c:	68ba      	ldr	r2, [r7, #8]
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	d302      	bcc.n	8002d68 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d116      	bne.n	8002d96 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2220      	movs	r2, #32
 8002d72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d82:	f043 0220 	orr.w	r2, r3, #32
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e007      	b.n	8002da6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	695b      	ldr	r3, [r3, #20]
 8002d9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002da0:	2b80      	cmp	r3, #128	; 0x80
 8002da2:	d1ca      	bne.n	8002d3a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002da4:	2300      	movs	r3, #0
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3710      	adds	r7, #16
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}

08002dae <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002dae:	b580      	push	{r7, lr}
 8002db0:	b084      	sub	sp, #16
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	60f8      	str	r0, [r7, #12]
 8002db6:	60b9      	str	r1, [r7, #8]
 8002db8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002dba:	e02d      	b.n	8002e18 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002dbc:	68f8      	ldr	r0, [r7, #12]
 8002dbe:	f000 f88d 	bl	8002edc <I2C_IsAcknowledgeFailed>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d001      	beq.n	8002dcc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e02d      	b.n	8002e28 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dd2:	d021      	beq.n	8002e18 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dd4:	f7fd feb8 	bl	8000b48 <HAL_GetTick>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	68ba      	ldr	r2, [r7, #8]
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d302      	bcc.n	8002dea <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d116      	bne.n	8002e18 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2200      	movs	r2, #0
 8002dee:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2220      	movs	r2, #32
 8002df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e04:	f043 0220 	orr.w	r2, r3, #32
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e007      	b.n	8002e28 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	695b      	ldr	r3, [r3, #20]
 8002e1e:	f003 0304 	and.w	r3, r3, #4
 8002e22:	2b04      	cmp	r3, #4
 8002e24:	d1ca      	bne.n	8002dbc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002e26:	2300      	movs	r3, #0
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3710      	adds	r7, #16
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}

08002e30 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b084      	sub	sp, #16
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	60f8      	str	r0, [r7, #12]
 8002e38:	60b9      	str	r1, [r7, #8]
 8002e3a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002e3c:	e042      	b.n	8002ec4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	695b      	ldr	r3, [r3, #20]
 8002e44:	f003 0310 	and.w	r3, r3, #16
 8002e48:	2b10      	cmp	r3, #16
 8002e4a:	d119      	bne.n	8002e80 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f06f 0210 	mvn.w	r2, #16
 8002e54:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2220      	movs	r2, #32
 8002e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2200      	movs	r2, #0
 8002e68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2200      	movs	r2, #0
 8002e78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e029      	b.n	8002ed4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e80:	f7fd fe62 	bl	8000b48 <HAL_GetTick>
 8002e84:	4602      	mov	r2, r0
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	68ba      	ldr	r2, [r7, #8]
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d302      	bcc.n	8002e96 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d116      	bne.n	8002ec4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2220      	movs	r2, #32
 8002ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb0:	f043 0220 	orr.w	r2, r3, #32
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e007      	b.n	8002ed4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	695b      	ldr	r3, [r3, #20]
 8002eca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ece:	2b40      	cmp	r3, #64	; 0x40
 8002ed0:	d1b5      	bne.n	8002e3e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002ed2:	2300      	movs	r3, #0
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	3710      	adds	r7, #16
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}

08002edc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b083      	sub	sp, #12
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	695b      	ldr	r3, [r3, #20]
 8002eea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ef2:	d11b      	bne.n	8002f2c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002efc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2200      	movs	r2, #0
 8002f02:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2220      	movs	r2, #32
 8002f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f18:	f043 0204 	orr.w	r2, r3, #4
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2200      	movs	r2, #0
 8002f24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e000      	b.n	8002f2e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002f2c:	2300      	movs	r3, #0
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	370c      	adds	r7, #12
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bc80      	pop	{r7}
 8002f36:	4770      	bx	lr

08002f38 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b084      	sub	sp, #16
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d101      	bne.n	8002f4a <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e034      	b.n	8002fb4 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8002f52:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f245 5255 	movw	r2, #21845	; 0x5555
 8002f5c:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	6852      	ldr	r2, [r2, #4]
 8002f66:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	687a      	ldr	r2, [r7, #4]
 8002f6e:	6892      	ldr	r2, [r2, #8]
 8002f70:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8002f72:	f7fd fde9 	bl	8000b48 <HAL_GetTick>
 8002f76:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8002f78:	e00f      	b.n	8002f9a <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8002f7a:	f7fd fde5 	bl	8000b48 <HAL_GetTick>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	1ad3      	subs	r3, r2, r3
 8002f84:	2b27      	cmp	r3, #39	; 0x27
 8002f86:	d908      	bls.n	8002f9a <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	68db      	ldr	r3, [r3, #12]
 8002f8e:	f003 0303 	and.w	r3, r3, #3
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d001      	beq.n	8002f9a <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8002f96:	2303      	movs	r3, #3
 8002f98:	e00c      	b.n	8002fb4 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	f003 0303 	and.w	r3, r3, #3
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d1e8      	bne.n	8002f7a <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8002fb0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002fb2:	2300      	movs	r3, #0
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3710      	adds	r7, #16
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}

08002fbc <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b083      	sub	sp, #12
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8002fcc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002fce:	2300      	movs	r3, #0
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	370c      	adds	r7, #12
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bc80      	pop	{r7}
 8002fd8:	4770      	bx	lr
	...

08002fdc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b086      	sub	sp, #24
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d101      	bne.n	8002fee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e272      	b.n	80034d4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 0301 	and.w	r3, r3, #1
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	f000 8087 	beq.w	800310a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ffc:	4b92      	ldr	r3, [pc, #584]	; (8003248 <HAL_RCC_OscConfig+0x26c>)
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	f003 030c 	and.w	r3, r3, #12
 8003004:	2b04      	cmp	r3, #4
 8003006:	d00c      	beq.n	8003022 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003008:	4b8f      	ldr	r3, [pc, #572]	; (8003248 <HAL_RCC_OscConfig+0x26c>)
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	f003 030c 	and.w	r3, r3, #12
 8003010:	2b08      	cmp	r3, #8
 8003012:	d112      	bne.n	800303a <HAL_RCC_OscConfig+0x5e>
 8003014:	4b8c      	ldr	r3, [pc, #560]	; (8003248 <HAL_RCC_OscConfig+0x26c>)
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800301c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003020:	d10b      	bne.n	800303a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003022:	4b89      	ldr	r3, [pc, #548]	; (8003248 <HAL_RCC_OscConfig+0x26c>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800302a:	2b00      	cmp	r3, #0
 800302c:	d06c      	beq.n	8003108 <HAL_RCC_OscConfig+0x12c>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d168      	bne.n	8003108 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e24c      	b.n	80034d4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003042:	d106      	bne.n	8003052 <HAL_RCC_OscConfig+0x76>
 8003044:	4b80      	ldr	r3, [pc, #512]	; (8003248 <HAL_RCC_OscConfig+0x26c>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a7f      	ldr	r2, [pc, #508]	; (8003248 <HAL_RCC_OscConfig+0x26c>)
 800304a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800304e:	6013      	str	r3, [r2, #0]
 8003050:	e02e      	b.n	80030b0 <HAL_RCC_OscConfig+0xd4>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d10c      	bne.n	8003074 <HAL_RCC_OscConfig+0x98>
 800305a:	4b7b      	ldr	r3, [pc, #492]	; (8003248 <HAL_RCC_OscConfig+0x26c>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a7a      	ldr	r2, [pc, #488]	; (8003248 <HAL_RCC_OscConfig+0x26c>)
 8003060:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003064:	6013      	str	r3, [r2, #0]
 8003066:	4b78      	ldr	r3, [pc, #480]	; (8003248 <HAL_RCC_OscConfig+0x26c>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a77      	ldr	r2, [pc, #476]	; (8003248 <HAL_RCC_OscConfig+0x26c>)
 800306c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003070:	6013      	str	r3, [r2, #0]
 8003072:	e01d      	b.n	80030b0 <HAL_RCC_OscConfig+0xd4>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800307c:	d10c      	bne.n	8003098 <HAL_RCC_OscConfig+0xbc>
 800307e:	4b72      	ldr	r3, [pc, #456]	; (8003248 <HAL_RCC_OscConfig+0x26c>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a71      	ldr	r2, [pc, #452]	; (8003248 <HAL_RCC_OscConfig+0x26c>)
 8003084:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003088:	6013      	str	r3, [r2, #0]
 800308a:	4b6f      	ldr	r3, [pc, #444]	; (8003248 <HAL_RCC_OscConfig+0x26c>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a6e      	ldr	r2, [pc, #440]	; (8003248 <HAL_RCC_OscConfig+0x26c>)
 8003090:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003094:	6013      	str	r3, [r2, #0]
 8003096:	e00b      	b.n	80030b0 <HAL_RCC_OscConfig+0xd4>
 8003098:	4b6b      	ldr	r3, [pc, #428]	; (8003248 <HAL_RCC_OscConfig+0x26c>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a6a      	ldr	r2, [pc, #424]	; (8003248 <HAL_RCC_OscConfig+0x26c>)
 800309e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030a2:	6013      	str	r3, [r2, #0]
 80030a4:	4b68      	ldr	r3, [pc, #416]	; (8003248 <HAL_RCC_OscConfig+0x26c>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a67      	ldr	r2, [pc, #412]	; (8003248 <HAL_RCC_OscConfig+0x26c>)
 80030aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030ae:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d013      	beq.n	80030e0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030b8:	f7fd fd46 	bl	8000b48 <HAL_GetTick>
 80030bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030be:	e008      	b.n	80030d2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030c0:	f7fd fd42 	bl	8000b48 <HAL_GetTick>
 80030c4:	4602      	mov	r2, r0
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	2b64      	cmp	r3, #100	; 0x64
 80030cc:	d901      	bls.n	80030d2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80030ce:	2303      	movs	r3, #3
 80030d0:	e200      	b.n	80034d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030d2:	4b5d      	ldr	r3, [pc, #372]	; (8003248 <HAL_RCC_OscConfig+0x26c>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d0f0      	beq.n	80030c0 <HAL_RCC_OscConfig+0xe4>
 80030de:	e014      	b.n	800310a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030e0:	f7fd fd32 	bl	8000b48 <HAL_GetTick>
 80030e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030e6:	e008      	b.n	80030fa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030e8:	f7fd fd2e 	bl	8000b48 <HAL_GetTick>
 80030ec:	4602      	mov	r2, r0
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	2b64      	cmp	r3, #100	; 0x64
 80030f4:	d901      	bls.n	80030fa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80030f6:	2303      	movs	r3, #3
 80030f8:	e1ec      	b.n	80034d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030fa:	4b53      	ldr	r3, [pc, #332]	; (8003248 <HAL_RCC_OscConfig+0x26c>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d1f0      	bne.n	80030e8 <HAL_RCC_OscConfig+0x10c>
 8003106:	e000      	b.n	800310a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003108:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 0302 	and.w	r3, r3, #2
 8003112:	2b00      	cmp	r3, #0
 8003114:	d063      	beq.n	80031de <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003116:	4b4c      	ldr	r3, [pc, #304]	; (8003248 <HAL_RCC_OscConfig+0x26c>)
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	f003 030c 	and.w	r3, r3, #12
 800311e:	2b00      	cmp	r3, #0
 8003120:	d00b      	beq.n	800313a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003122:	4b49      	ldr	r3, [pc, #292]	; (8003248 <HAL_RCC_OscConfig+0x26c>)
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	f003 030c 	and.w	r3, r3, #12
 800312a:	2b08      	cmp	r3, #8
 800312c:	d11c      	bne.n	8003168 <HAL_RCC_OscConfig+0x18c>
 800312e:	4b46      	ldr	r3, [pc, #280]	; (8003248 <HAL_RCC_OscConfig+0x26c>)
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d116      	bne.n	8003168 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800313a:	4b43      	ldr	r3, [pc, #268]	; (8003248 <HAL_RCC_OscConfig+0x26c>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 0302 	and.w	r3, r3, #2
 8003142:	2b00      	cmp	r3, #0
 8003144:	d005      	beq.n	8003152 <HAL_RCC_OscConfig+0x176>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	691b      	ldr	r3, [r3, #16]
 800314a:	2b01      	cmp	r3, #1
 800314c:	d001      	beq.n	8003152 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e1c0      	b.n	80034d4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003152:	4b3d      	ldr	r3, [pc, #244]	; (8003248 <HAL_RCC_OscConfig+0x26c>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	695b      	ldr	r3, [r3, #20]
 800315e:	00db      	lsls	r3, r3, #3
 8003160:	4939      	ldr	r1, [pc, #228]	; (8003248 <HAL_RCC_OscConfig+0x26c>)
 8003162:	4313      	orrs	r3, r2
 8003164:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003166:	e03a      	b.n	80031de <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	691b      	ldr	r3, [r3, #16]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d020      	beq.n	80031b2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003170:	4b36      	ldr	r3, [pc, #216]	; (800324c <HAL_RCC_OscConfig+0x270>)
 8003172:	2201      	movs	r2, #1
 8003174:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003176:	f7fd fce7 	bl	8000b48 <HAL_GetTick>
 800317a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800317c:	e008      	b.n	8003190 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800317e:	f7fd fce3 	bl	8000b48 <HAL_GetTick>
 8003182:	4602      	mov	r2, r0
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	2b02      	cmp	r3, #2
 800318a:	d901      	bls.n	8003190 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800318c:	2303      	movs	r3, #3
 800318e:	e1a1      	b.n	80034d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003190:	4b2d      	ldr	r3, [pc, #180]	; (8003248 <HAL_RCC_OscConfig+0x26c>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 0302 	and.w	r3, r3, #2
 8003198:	2b00      	cmp	r3, #0
 800319a:	d0f0      	beq.n	800317e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800319c:	4b2a      	ldr	r3, [pc, #168]	; (8003248 <HAL_RCC_OscConfig+0x26c>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	695b      	ldr	r3, [r3, #20]
 80031a8:	00db      	lsls	r3, r3, #3
 80031aa:	4927      	ldr	r1, [pc, #156]	; (8003248 <HAL_RCC_OscConfig+0x26c>)
 80031ac:	4313      	orrs	r3, r2
 80031ae:	600b      	str	r3, [r1, #0]
 80031b0:	e015      	b.n	80031de <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031b2:	4b26      	ldr	r3, [pc, #152]	; (800324c <HAL_RCC_OscConfig+0x270>)
 80031b4:	2200      	movs	r2, #0
 80031b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031b8:	f7fd fcc6 	bl	8000b48 <HAL_GetTick>
 80031bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031be:	e008      	b.n	80031d2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031c0:	f7fd fcc2 	bl	8000b48 <HAL_GetTick>
 80031c4:	4602      	mov	r2, r0
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	2b02      	cmp	r3, #2
 80031cc:	d901      	bls.n	80031d2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	e180      	b.n	80034d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031d2:	4b1d      	ldr	r3, [pc, #116]	; (8003248 <HAL_RCC_OscConfig+0x26c>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 0302 	and.w	r3, r3, #2
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d1f0      	bne.n	80031c0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 0308 	and.w	r3, r3, #8
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d03a      	beq.n	8003260 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	699b      	ldr	r3, [r3, #24]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d019      	beq.n	8003226 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031f2:	4b17      	ldr	r3, [pc, #92]	; (8003250 <HAL_RCC_OscConfig+0x274>)
 80031f4:	2201      	movs	r2, #1
 80031f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031f8:	f7fd fca6 	bl	8000b48 <HAL_GetTick>
 80031fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031fe:	e008      	b.n	8003212 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003200:	f7fd fca2 	bl	8000b48 <HAL_GetTick>
 8003204:	4602      	mov	r2, r0
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	2b02      	cmp	r3, #2
 800320c:	d901      	bls.n	8003212 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800320e:	2303      	movs	r3, #3
 8003210:	e160      	b.n	80034d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003212:	4b0d      	ldr	r3, [pc, #52]	; (8003248 <HAL_RCC_OscConfig+0x26c>)
 8003214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003216:	f003 0302 	and.w	r3, r3, #2
 800321a:	2b00      	cmp	r3, #0
 800321c:	d0f0      	beq.n	8003200 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800321e:	2001      	movs	r0, #1
 8003220:	f000 fad8 	bl	80037d4 <RCC_Delay>
 8003224:	e01c      	b.n	8003260 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003226:	4b0a      	ldr	r3, [pc, #40]	; (8003250 <HAL_RCC_OscConfig+0x274>)
 8003228:	2200      	movs	r2, #0
 800322a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800322c:	f7fd fc8c 	bl	8000b48 <HAL_GetTick>
 8003230:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003232:	e00f      	b.n	8003254 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003234:	f7fd fc88 	bl	8000b48 <HAL_GetTick>
 8003238:	4602      	mov	r2, r0
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	1ad3      	subs	r3, r2, r3
 800323e:	2b02      	cmp	r3, #2
 8003240:	d908      	bls.n	8003254 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003242:	2303      	movs	r3, #3
 8003244:	e146      	b.n	80034d4 <HAL_RCC_OscConfig+0x4f8>
 8003246:	bf00      	nop
 8003248:	40021000 	.word	0x40021000
 800324c:	42420000 	.word	0x42420000
 8003250:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003254:	4b92      	ldr	r3, [pc, #584]	; (80034a0 <HAL_RCC_OscConfig+0x4c4>)
 8003256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003258:	f003 0302 	and.w	r3, r3, #2
 800325c:	2b00      	cmp	r3, #0
 800325e:	d1e9      	bne.n	8003234 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 0304 	and.w	r3, r3, #4
 8003268:	2b00      	cmp	r3, #0
 800326a:	f000 80a6 	beq.w	80033ba <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800326e:	2300      	movs	r3, #0
 8003270:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003272:	4b8b      	ldr	r3, [pc, #556]	; (80034a0 <HAL_RCC_OscConfig+0x4c4>)
 8003274:	69db      	ldr	r3, [r3, #28]
 8003276:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d10d      	bne.n	800329a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800327e:	4b88      	ldr	r3, [pc, #544]	; (80034a0 <HAL_RCC_OscConfig+0x4c4>)
 8003280:	69db      	ldr	r3, [r3, #28]
 8003282:	4a87      	ldr	r2, [pc, #540]	; (80034a0 <HAL_RCC_OscConfig+0x4c4>)
 8003284:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003288:	61d3      	str	r3, [r2, #28]
 800328a:	4b85      	ldr	r3, [pc, #532]	; (80034a0 <HAL_RCC_OscConfig+0x4c4>)
 800328c:	69db      	ldr	r3, [r3, #28]
 800328e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003292:	60bb      	str	r3, [r7, #8]
 8003294:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003296:	2301      	movs	r3, #1
 8003298:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800329a:	4b82      	ldr	r3, [pc, #520]	; (80034a4 <HAL_RCC_OscConfig+0x4c8>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d118      	bne.n	80032d8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032a6:	4b7f      	ldr	r3, [pc, #508]	; (80034a4 <HAL_RCC_OscConfig+0x4c8>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a7e      	ldr	r2, [pc, #504]	; (80034a4 <HAL_RCC_OscConfig+0x4c8>)
 80032ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032b2:	f7fd fc49 	bl	8000b48 <HAL_GetTick>
 80032b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032b8:	e008      	b.n	80032cc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032ba:	f7fd fc45 	bl	8000b48 <HAL_GetTick>
 80032be:	4602      	mov	r2, r0
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	1ad3      	subs	r3, r2, r3
 80032c4:	2b64      	cmp	r3, #100	; 0x64
 80032c6:	d901      	bls.n	80032cc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80032c8:	2303      	movs	r3, #3
 80032ca:	e103      	b.n	80034d4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032cc:	4b75      	ldr	r3, [pc, #468]	; (80034a4 <HAL_RCC_OscConfig+0x4c8>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d0f0      	beq.n	80032ba <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d106      	bne.n	80032ee <HAL_RCC_OscConfig+0x312>
 80032e0:	4b6f      	ldr	r3, [pc, #444]	; (80034a0 <HAL_RCC_OscConfig+0x4c4>)
 80032e2:	6a1b      	ldr	r3, [r3, #32]
 80032e4:	4a6e      	ldr	r2, [pc, #440]	; (80034a0 <HAL_RCC_OscConfig+0x4c4>)
 80032e6:	f043 0301 	orr.w	r3, r3, #1
 80032ea:	6213      	str	r3, [r2, #32]
 80032ec:	e02d      	b.n	800334a <HAL_RCC_OscConfig+0x36e>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	68db      	ldr	r3, [r3, #12]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d10c      	bne.n	8003310 <HAL_RCC_OscConfig+0x334>
 80032f6:	4b6a      	ldr	r3, [pc, #424]	; (80034a0 <HAL_RCC_OscConfig+0x4c4>)
 80032f8:	6a1b      	ldr	r3, [r3, #32]
 80032fa:	4a69      	ldr	r2, [pc, #420]	; (80034a0 <HAL_RCC_OscConfig+0x4c4>)
 80032fc:	f023 0301 	bic.w	r3, r3, #1
 8003300:	6213      	str	r3, [r2, #32]
 8003302:	4b67      	ldr	r3, [pc, #412]	; (80034a0 <HAL_RCC_OscConfig+0x4c4>)
 8003304:	6a1b      	ldr	r3, [r3, #32]
 8003306:	4a66      	ldr	r2, [pc, #408]	; (80034a0 <HAL_RCC_OscConfig+0x4c4>)
 8003308:	f023 0304 	bic.w	r3, r3, #4
 800330c:	6213      	str	r3, [r2, #32]
 800330e:	e01c      	b.n	800334a <HAL_RCC_OscConfig+0x36e>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	2b05      	cmp	r3, #5
 8003316:	d10c      	bne.n	8003332 <HAL_RCC_OscConfig+0x356>
 8003318:	4b61      	ldr	r3, [pc, #388]	; (80034a0 <HAL_RCC_OscConfig+0x4c4>)
 800331a:	6a1b      	ldr	r3, [r3, #32]
 800331c:	4a60      	ldr	r2, [pc, #384]	; (80034a0 <HAL_RCC_OscConfig+0x4c4>)
 800331e:	f043 0304 	orr.w	r3, r3, #4
 8003322:	6213      	str	r3, [r2, #32]
 8003324:	4b5e      	ldr	r3, [pc, #376]	; (80034a0 <HAL_RCC_OscConfig+0x4c4>)
 8003326:	6a1b      	ldr	r3, [r3, #32]
 8003328:	4a5d      	ldr	r2, [pc, #372]	; (80034a0 <HAL_RCC_OscConfig+0x4c4>)
 800332a:	f043 0301 	orr.w	r3, r3, #1
 800332e:	6213      	str	r3, [r2, #32]
 8003330:	e00b      	b.n	800334a <HAL_RCC_OscConfig+0x36e>
 8003332:	4b5b      	ldr	r3, [pc, #364]	; (80034a0 <HAL_RCC_OscConfig+0x4c4>)
 8003334:	6a1b      	ldr	r3, [r3, #32]
 8003336:	4a5a      	ldr	r2, [pc, #360]	; (80034a0 <HAL_RCC_OscConfig+0x4c4>)
 8003338:	f023 0301 	bic.w	r3, r3, #1
 800333c:	6213      	str	r3, [r2, #32]
 800333e:	4b58      	ldr	r3, [pc, #352]	; (80034a0 <HAL_RCC_OscConfig+0x4c4>)
 8003340:	6a1b      	ldr	r3, [r3, #32]
 8003342:	4a57      	ldr	r2, [pc, #348]	; (80034a0 <HAL_RCC_OscConfig+0x4c4>)
 8003344:	f023 0304 	bic.w	r3, r3, #4
 8003348:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	68db      	ldr	r3, [r3, #12]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d015      	beq.n	800337e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003352:	f7fd fbf9 	bl	8000b48 <HAL_GetTick>
 8003356:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003358:	e00a      	b.n	8003370 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800335a:	f7fd fbf5 	bl	8000b48 <HAL_GetTick>
 800335e:	4602      	mov	r2, r0
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	1ad3      	subs	r3, r2, r3
 8003364:	f241 3288 	movw	r2, #5000	; 0x1388
 8003368:	4293      	cmp	r3, r2
 800336a:	d901      	bls.n	8003370 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800336c:	2303      	movs	r3, #3
 800336e:	e0b1      	b.n	80034d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003370:	4b4b      	ldr	r3, [pc, #300]	; (80034a0 <HAL_RCC_OscConfig+0x4c4>)
 8003372:	6a1b      	ldr	r3, [r3, #32]
 8003374:	f003 0302 	and.w	r3, r3, #2
 8003378:	2b00      	cmp	r3, #0
 800337a:	d0ee      	beq.n	800335a <HAL_RCC_OscConfig+0x37e>
 800337c:	e014      	b.n	80033a8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800337e:	f7fd fbe3 	bl	8000b48 <HAL_GetTick>
 8003382:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003384:	e00a      	b.n	800339c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003386:	f7fd fbdf 	bl	8000b48 <HAL_GetTick>
 800338a:	4602      	mov	r2, r0
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	1ad3      	subs	r3, r2, r3
 8003390:	f241 3288 	movw	r2, #5000	; 0x1388
 8003394:	4293      	cmp	r3, r2
 8003396:	d901      	bls.n	800339c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003398:	2303      	movs	r3, #3
 800339a:	e09b      	b.n	80034d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800339c:	4b40      	ldr	r3, [pc, #256]	; (80034a0 <HAL_RCC_OscConfig+0x4c4>)
 800339e:	6a1b      	ldr	r3, [r3, #32]
 80033a0:	f003 0302 	and.w	r3, r3, #2
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d1ee      	bne.n	8003386 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80033a8:	7dfb      	ldrb	r3, [r7, #23]
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	d105      	bne.n	80033ba <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033ae:	4b3c      	ldr	r3, [pc, #240]	; (80034a0 <HAL_RCC_OscConfig+0x4c4>)
 80033b0:	69db      	ldr	r3, [r3, #28]
 80033b2:	4a3b      	ldr	r2, [pc, #236]	; (80034a0 <HAL_RCC_OscConfig+0x4c4>)
 80033b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033b8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	69db      	ldr	r3, [r3, #28]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	f000 8087 	beq.w	80034d2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033c4:	4b36      	ldr	r3, [pc, #216]	; (80034a0 <HAL_RCC_OscConfig+0x4c4>)
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	f003 030c 	and.w	r3, r3, #12
 80033cc:	2b08      	cmp	r3, #8
 80033ce:	d061      	beq.n	8003494 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	69db      	ldr	r3, [r3, #28]
 80033d4:	2b02      	cmp	r3, #2
 80033d6:	d146      	bne.n	8003466 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033d8:	4b33      	ldr	r3, [pc, #204]	; (80034a8 <HAL_RCC_OscConfig+0x4cc>)
 80033da:	2200      	movs	r2, #0
 80033dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033de:	f7fd fbb3 	bl	8000b48 <HAL_GetTick>
 80033e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033e4:	e008      	b.n	80033f8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033e6:	f7fd fbaf 	bl	8000b48 <HAL_GetTick>
 80033ea:	4602      	mov	r2, r0
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	1ad3      	subs	r3, r2, r3
 80033f0:	2b02      	cmp	r3, #2
 80033f2:	d901      	bls.n	80033f8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80033f4:	2303      	movs	r3, #3
 80033f6:	e06d      	b.n	80034d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033f8:	4b29      	ldr	r3, [pc, #164]	; (80034a0 <HAL_RCC_OscConfig+0x4c4>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003400:	2b00      	cmp	r3, #0
 8003402:	d1f0      	bne.n	80033e6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6a1b      	ldr	r3, [r3, #32]
 8003408:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800340c:	d108      	bne.n	8003420 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800340e:	4b24      	ldr	r3, [pc, #144]	; (80034a0 <HAL_RCC_OscConfig+0x4c4>)
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	4921      	ldr	r1, [pc, #132]	; (80034a0 <HAL_RCC_OscConfig+0x4c4>)
 800341c:	4313      	orrs	r3, r2
 800341e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003420:	4b1f      	ldr	r3, [pc, #124]	; (80034a0 <HAL_RCC_OscConfig+0x4c4>)
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6a19      	ldr	r1, [r3, #32]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003430:	430b      	orrs	r3, r1
 8003432:	491b      	ldr	r1, [pc, #108]	; (80034a0 <HAL_RCC_OscConfig+0x4c4>)
 8003434:	4313      	orrs	r3, r2
 8003436:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003438:	4b1b      	ldr	r3, [pc, #108]	; (80034a8 <HAL_RCC_OscConfig+0x4cc>)
 800343a:	2201      	movs	r2, #1
 800343c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800343e:	f7fd fb83 	bl	8000b48 <HAL_GetTick>
 8003442:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003444:	e008      	b.n	8003458 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003446:	f7fd fb7f 	bl	8000b48 <HAL_GetTick>
 800344a:	4602      	mov	r2, r0
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	1ad3      	subs	r3, r2, r3
 8003450:	2b02      	cmp	r3, #2
 8003452:	d901      	bls.n	8003458 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003454:	2303      	movs	r3, #3
 8003456:	e03d      	b.n	80034d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003458:	4b11      	ldr	r3, [pc, #68]	; (80034a0 <HAL_RCC_OscConfig+0x4c4>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003460:	2b00      	cmp	r3, #0
 8003462:	d0f0      	beq.n	8003446 <HAL_RCC_OscConfig+0x46a>
 8003464:	e035      	b.n	80034d2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003466:	4b10      	ldr	r3, [pc, #64]	; (80034a8 <HAL_RCC_OscConfig+0x4cc>)
 8003468:	2200      	movs	r2, #0
 800346a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800346c:	f7fd fb6c 	bl	8000b48 <HAL_GetTick>
 8003470:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003472:	e008      	b.n	8003486 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003474:	f7fd fb68 	bl	8000b48 <HAL_GetTick>
 8003478:	4602      	mov	r2, r0
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	2b02      	cmp	r3, #2
 8003480:	d901      	bls.n	8003486 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003482:	2303      	movs	r3, #3
 8003484:	e026      	b.n	80034d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003486:	4b06      	ldr	r3, [pc, #24]	; (80034a0 <HAL_RCC_OscConfig+0x4c4>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800348e:	2b00      	cmp	r3, #0
 8003490:	d1f0      	bne.n	8003474 <HAL_RCC_OscConfig+0x498>
 8003492:	e01e      	b.n	80034d2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	69db      	ldr	r3, [r3, #28]
 8003498:	2b01      	cmp	r3, #1
 800349a:	d107      	bne.n	80034ac <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	e019      	b.n	80034d4 <HAL_RCC_OscConfig+0x4f8>
 80034a0:	40021000 	.word	0x40021000
 80034a4:	40007000 	.word	0x40007000
 80034a8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80034ac:	4b0b      	ldr	r3, [pc, #44]	; (80034dc <HAL_RCC_OscConfig+0x500>)
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6a1b      	ldr	r3, [r3, #32]
 80034bc:	429a      	cmp	r2, r3
 80034be:	d106      	bne.n	80034ce <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034ca:	429a      	cmp	r2, r3
 80034cc:	d001      	beq.n	80034d2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e000      	b.n	80034d4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80034d2:	2300      	movs	r3, #0
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	3718      	adds	r7, #24
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}
 80034dc:	40021000 	.word	0x40021000

080034e0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b084      	sub	sp, #16
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
 80034e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d101      	bne.n	80034f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	e0d0      	b.n	8003696 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80034f4:	4b6a      	ldr	r3, [pc, #424]	; (80036a0 <HAL_RCC_ClockConfig+0x1c0>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 0307 	and.w	r3, r3, #7
 80034fc:	683a      	ldr	r2, [r7, #0]
 80034fe:	429a      	cmp	r2, r3
 8003500:	d910      	bls.n	8003524 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003502:	4b67      	ldr	r3, [pc, #412]	; (80036a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f023 0207 	bic.w	r2, r3, #7
 800350a:	4965      	ldr	r1, [pc, #404]	; (80036a0 <HAL_RCC_ClockConfig+0x1c0>)
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	4313      	orrs	r3, r2
 8003510:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003512:	4b63      	ldr	r3, [pc, #396]	; (80036a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 0307 	and.w	r3, r3, #7
 800351a:	683a      	ldr	r2, [r7, #0]
 800351c:	429a      	cmp	r2, r3
 800351e:	d001      	beq.n	8003524 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	e0b8      	b.n	8003696 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 0302 	and.w	r3, r3, #2
 800352c:	2b00      	cmp	r3, #0
 800352e:	d020      	beq.n	8003572 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f003 0304 	and.w	r3, r3, #4
 8003538:	2b00      	cmp	r3, #0
 800353a:	d005      	beq.n	8003548 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800353c:	4b59      	ldr	r3, [pc, #356]	; (80036a4 <HAL_RCC_ClockConfig+0x1c4>)
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	4a58      	ldr	r2, [pc, #352]	; (80036a4 <HAL_RCC_ClockConfig+0x1c4>)
 8003542:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003546:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f003 0308 	and.w	r3, r3, #8
 8003550:	2b00      	cmp	r3, #0
 8003552:	d005      	beq.n	8003560 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003554:	4b53      	ldr	r3, [pc, #332]	; (80036a4 <HAL_RCC_ClockConfig+0x1c4>)
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	4a52      	ldr	r2, [pc, #328]	; (80036a4 <HAL_RCC_ClockConfig+0x1c4>)
 800355a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800355e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003560:	4b50      	ldr	r3, [pc, #320]	; (80036a4 <HAL_RCC_ClockConfig+0x1c4>)
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	494d      	ldr	r1, [pc, #308]	; (80036a4 <HAL_RCC_ClockConfig+0x1c4>)
 800356e:	4313      	orrs	r3, r2
 8003570:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 0301 	and.w	r3, r3, #1
 800357a:	2b00      	cmp	r3, #0
 800357c:	d040      	beq.n	8003600 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	2b01      	cmp	r3, #1
 8003584:	d107      	bne.n	8003596 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003586:	4b47      	ldr	r3, [pc, #284]	; (80036a4 <HAL_RCC_ClockConfig+0x1c4>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800358e:	2b00      	cmp	r3, #0
 8003590:	d115      	bne.n	80035be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	e07f      	b.n	8003696 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	2b02      	cmp	r3, #2
 800359c:	d107      	bne.n	80035ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800359e:	4b41      	ldr	r3, [pc, #260]	; (80036a4 <HAL_RCC_ClockConfig+0x1c4>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d109      	bne.n	80035be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e073      	b.n	8003696 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035ae:	4b3d      	ldr	r3, [pc, #244]	; (80036a4 <HAL_RCC_ClockConfig+0x1c4>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 0302 	and.w	r3, r3, #2
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d101      	bne.n	80035be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e06b      	b.n	8003696 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035be:	4b39      	ldr	r3, [pc, #228]	; (80036a4 <HAL_RCC_ClockConfig+0x1c4>)
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	f023 0203 	bic.w	r2, r3, #3
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	4936      	ldr	r1, [pc, #216]	; (80036a4 <HAL_RCC_ClockConfig+0x1c4>)
 80035cc:	4313      	orrs	r3, r2
 80035ce:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035d0:	f7fd faba 	bl	8000b48 <HAL_GetTick>
 80035d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035d6:	e00a      	b.n	80035ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035d8:	f7fd fab6 	bl	8000b48 <HAL_GetTick>
 80035dc:	4602      	mov	r2, r0
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	1ad3      	subs	r3, r2, r3
 80035e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d901      	bls.n	80035ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80035ea:	2303      	movs	r3, #3
 80035ec:	e053      	b.n	8003696 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035ee:	4b2d      	ldr	r3, [pc, #180]	; (80036a4 <HAL_RCC_ClockConfig+0x1c4>)
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	f003 020c 	and.w	r2, r3, #12
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d1eb      	bne.n	80035d8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003600:	4b27      	ldr	r3, [pc, #156]	; (80036a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 0307 	and.w	r3, r3, #7
 8003608:	683a      	ldr	r2, [r7, #0]
 800360a:	429a      	cmp	r2, r3
 800360c:	d210      	bcs.n	8003630 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800360e:	4b24      	ldr	r3, [pc, #144]	; (80036a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f023 0207 	bic.w	r2, r3, #7
 8003616:	4922      	ldr	r1, [pc, #136]	; (80036a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	4313      	orrs	r3, r2
 800361c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800361e:	4b20      	ldr	r3, [pc, #128]	; (80036a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 0307 	and.w	r3, r3, #7
 8003626:	683a      	ldr	r2, [r7, #0]
 8003628:	429a      	cmp	r2, r3
 800362a:	d001      	beq.n	8003630 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	e032      	b.n	8003696 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 0304 	and.w	r3, r3, #4
 8003638:	2b00      	cmp	r3, #0
 800363a:	d008      	beq.n	800364e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800363c:	4b19      	ldr	r3, [pc, #100]	; (80036a4 <HAL_RCC_ClockConfig+0x1c4>)
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	4916      	ldr	r1, [pc, #88]	; (80036a4 <HAL_RCC_ClockConfig+0x1c4>)
 800364a:	4313      	orrs	r3, r2
 800364c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 0308 	and.w	r3, r3, #8
 8003656:	2b00      	cmp	r3, #0
 8003658:	d009      	beq.n	800366e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800365a:	4b12      	ldr	r3, [pc, #72]	; (80036a4 <HAL_RCC_ClockConfig+0x1c4>)
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	691b      	ldr	r3, [r3, #16]
 8003666:	00db      	lsls	r3, r3, #3
 8003668:	490e      	ldr	r1, [pc, #56]	; (80036a4 <HAL_RCC_ClockConfig+0x1c4>)
 800366a:	4313      	orrs	r3, r2
 800366c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800366e:	f000 f821 	bl	80036b4 <HAL_RCC_GetSysClockFreq>
 8003672:	4602      	mov	r2, r0
 8003674:	4b0b      	ldr	r3, [pc, #44]	; (80036a4 <HAL_RCC_ClockConfig+0x1c4>)
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	091b      	lsrs	r3, r3, #4
 800367a:	f003 030f 	and.w	r3, r3, #15
 800367e:	490a      	ldr	r1, [pc, #40]	; (80036a8 <HAL_RCC_ClockConfig+0x1c8>)
 8003680:	5ccb      	ldrb	r3, [r1, r3]
 8003682:	fa22 f303 	lsr.w	r3, r2, r3
 8003686:	4a09      	ldr	r2, [pc, #36]	; (80036ac <HAL_RCC_ClockConfig+0x1cc>)
 8003688:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800368a:	4b09      	ldr	r3, [pc, #36]	; (80036b0 <HAL_RCC_ClockConfig+0x1d0>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4618      	mov	r0, r3
 8003690:	f7fd fa18 	bl	8000ac4 <HAL_InitTick>

  return HAL_OK;
 8003694:	2300      	movs	r3, #0
}
 8003696:	4618      	mov	r0, r3
 8003698:	3710      	adds	r7, #16
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop
 80036a0:	40022000 	.word	0x40022000
 80036a4:	40021000 	.word	0x40021000
 80036a8:	08007464 	.word	0x08007464
 80036ac:	20000000 	.word	0x20000000
 80036b0:	20000004 	.word	0x20000004

080036b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036b4:	b490      	push	{r4, r7}
 80036b6:	b08a      	sub	sp, #40	; 0x28
 80036b8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80036ba:	4b29      	ldr	r3, [pc, #164]	; (8003760 <HAL_RCC_GetSysClockFreq+0xac>)
 80036bc:	1d3c      	adds	r4, r7, #4
 80036be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80036c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80036c4:	f240 2301 	movw	r3, #513	; 0x201
 80036c8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80036ca:	2300      	movs	r3, #0
 80036cc:	61fb      	str	r3, [r7, #28]
 80036ce:	2300      	movs	r3, #0
 80036d0:	61bb      	str	r3, [r7, #24]
 80036d2:	2300      	movs	r3, #0
 80036d4:	627b      	str	r3, [r7, #36]	; 0x24
 80036d6:	2300      	movs	r3, #0
 80036d8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80036da:	2300      	movs	r3, #0
 80036dc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80036de:	4b21      	ldr	r3, [pc, #132]	; (8003764 <HAL_RCC_GetSysClockFreq+0xb0>)
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80036e4:	69fb      	ldr	r3, [r7, #28]
 80036e6:	f003 030c 	and.w	r3, r3, #12
 80036ea:	2b04      	cmp	r3, #4
 80036ec:	d002      	beq.n	80036f4 <HAL_RCC_GetSysClockFreq+0x40>
 80036ee:	2b08      	cmp	r3, #8
 80036f0:	d003      	beq.n	80036fa <HAL_RCC_GetSysClockFreq+0x46>
 80036f2:	e02b      	b.n	800374c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80036f4:	4b1c      	ldr	r3, [pc, #112]	; (8003768 <HAL_RCC_GetSysClockFreq+0xb4>)
 80036f6:	623b      	str	r3, [r7, #32]
      break;
 80036f8:	e02b      	b.n	8003752 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80036fa:	69fb      	ldr	r3, [r7, #28]
 80036fc:	0c9b      	lsrs	r3, r3, #18
 80036fe:	f003 030f 	and.w	r3, r3, #15
 8003702:	3328      	adds	r3, #40	; 0x28
 8003704:	443b      	add	r3, r7
 8003706:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800370a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800370c:	69fb      	ldr	r3, [r7, #28]
 800370e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003712:	2b00      	cmp	r3, #0
 8003714:	d012      	beq.n	800373c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003716:	4b13      	ldr	r3, [pc, #76]	; (8003764 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	0c5b      	lsrs	r3, r3, #17
 800371c:	f003 0301 	and.w	r3, r3, #1
 8003720:	3328      	adds	r3, #40	; 0x28
 8003722:	443b      	add	r3, r7
 8003724:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003728:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	4a0e      	ldr	r2, [pc, #56]	; (8003768 <HAL_RCC_GetSysClockFreq+0xb4>)
 800372e:	fb03 f202 	mul.w	r2, r3, r2
 8003732:	69bb      	ldr	r3, [r7, #24]
 8003734:	fbb2 f3f3 	udiv	r3, r2, r3
 8003738:	627b      	str	r3, [r7, #36]	; 0x24
 800373a:	e004      	b.n	8003746 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	4a0b      	ldr	r2, [pc, #44]	; (800376c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003740:	fb02 f303 	mul.w	r3, r2, r3
 8003744:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003748:	623b      	str	r3, [r7, #32]
      break;
 800374a:	e002      	b.n	8003752 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800374c:	4b06      	ldr	r3, [pc, #24]	; (8003768 <HAL_RCC_GetSysClockFreq+0xb4>)
 800374e:	623b      	str	r3, [r7, #32]
      break;
 8003750:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003752:	6a3b      	ldr	r3, [r7, #32]
}
 8003754:	4618      	mov	r0, r3
 8003756:	3728      	adds	r7, #40	; 0x28
 8003758:	46bd      	mov	sp, r7
 800375a:	bc90      	pop	{r4, r7}
 800375c:	4770      	bx	lr
 800375e:	bf00      	nop
 8003760:	08007130 	.word	0x08007130
 8003764:	40021000 	.word	0x40021000
 8003768:	007a1200 	.word	0x007a1200
 800376c:	003d0900 	.word	0x003d0900

08003770 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003770:	b480      	push	{r7}
 8003772:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003774:	4b02      	ldr	r3, [pc, #8]	; (8003780 <HAL_RCC_GetHCLKFreq+0x10>)
 8003776:	681b      	ldr	r3, [r3, #0]
}
 8003778:	4618      	mov	r0, r3
 800377a:	46bd      	mov	sp, r7
 800377c:	bc80      	pop	{r7}
 800377e:	4770      	bx	lr
 8003780:	20000000 	.word	0x20000000

08003784 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003788:	f7ff fff2 	bl	8003770 <HAL_RCC_GetHCLKFreq>
 800378c:	4602      	mov	r2, r0
 800378e:	4b05      	ldr	r3, [pc, #20]	; (80037a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	0a1b      	lsrs	r3, r3, #8
 8003794:	f003 0307 	and.w	r3, r3, #7
 8003798:	4903      	ldr	r1, [pc, #12]	; (80037a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800379a:	5ccb      	ldrb	r3, [r1, r3]
 800379c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	bd80      	pop	{r7, pc}
 80037a4:	40021000 	.word	0x40021000
 80037a8:	08007474 	.word	0x08007474

080037ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80037b0:	f7ff ffde 	bl	8003770 <HAL_RCC_GetHCLKFreq>
 80037b4:	4602      	mov	r2, r0
 80037b6:	4b05      	ldr	r3, [pc, #20]	; (80037cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	0adb      	lsrs	r3, r3, #11
 80037bc:	f003 0307 	and.w	r3, r3, #7
 80037c0:	4903      	ldr	r1, [pc, #12]	; (80037d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80037c2:	5ccb      	ldrb	r3, [r1, r3]
 80037c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	bd80      	pop	{r7, pc}
 80037cc:	40021000 	.word	0x40021000
 80037d0:	08007474 	.word	0x08007474

080037d4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b085      	sub	sp, #20
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80037dc:	4b0a      	ldr	r3, [pc, #40]	; (8003808 <RCC_Delay+0x34>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a0a      	ldr	r2, [pc, #40]	; (800380c <RCC_Delay+0x38>)
 80037e2:	fba2 2303 	umull	r2, r3, r2, r3
 80037e6:	0a5b      	lsrs	r3, r3, #9
 80037e8:	687a      	ldr	r2, [r7, #4]
 80037ea:	fb02 f303 	mul.w	r3, r2, r3
 80037ee:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80037f0:	bf00      	nop
  }
  while (Delay --);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	1e5a      	subs	r2, r3, #1
 80037f6:	60fa      	str	r2, [r7, #12]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d1f9      	bne.n	80037f0 <RCC_Delay+0x1c>
}
 80037fc:	bf00      	nop
 80037fe:	bf00      	nop
 8003800:	3714      	adds	r7, #20
 8003802:	46bd      	mov	sp, r7
 8003804:	bc80      	pop	{r7}
 8003806:	4770      	bx	lr
 8003808:	20000000 	.word	0x20000000
 800380c:	10624dd3 	.word	0x10624dd3

08003810 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b086      	sub	sp, #24
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003818:	2300      	movs	r3, #0
 800381a:	613b      	str	r3, [r7, #16]
 800381c:	2300      	movs	r3, #0
 800381e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f003 0301 	and.w	r3, r3, #1
 8003828:	2b00      	cmp	r3, #0
 800382a:	d07d      	beq.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800382c:	2300      	movs	r3, #0
 800382e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003830:	4b4f      	ldr	r3, [pc, #316]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003832:	69db      	ldr	r3, [r3, #28]
 8003834:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003838:	2b00      	cmp	r3, #0
 800383a:	d10d      	bne.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800383c:	4b4c      	ldr	r3, [pc, #304]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800383e:	69db      	ldr	r3, [r3, #28]
 8003840:	4a4b      	ldr	r2, [pc, #300]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003842:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003846:	61d3      	str	r3, [r2, #28]
 8003848:	4b49      	ldr	r3, [pc, #292]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800384a:	69db      	ldr	r3, [r3, #28]
 800384c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003850:	60bb      	str	r3, [r7, #8]
 8003852:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003854:	2301      	movs	r3, #1
 8003856:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003858:	4b46      	ldr	r3, [pc, #280]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003860:	2b00      	cmp	r3, #0
 8003862:	d118      	bne.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003864:	4b43      	ldr	r3, [pc, #268]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a42      	ldr	r2, [pc, #264]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800386a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800386e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003870:	f7fd f96a 	bl	8000b48 <HAL_GetTick>
 8003874:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003876:	e008      	b.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003878:	f7fd f966 	bl	8000b48 <HAL_GetTick>
 800387c:	4602      	mov	r2, r0
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	1ad3      	subs	r3, r2, r3
 8003882:	2b64      	cmp	r3, #100	; 0x64
 8003884:	d901      	bls.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003886:	2303      	movs	r3, #3
 8003888:	e06d      	b.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800388a:	4b3a      	ldr	r3, [pc, #232]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003892:	2b00      	cmp	r3, #0
 8003894:	d0f0      	beq.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003896:	4b36      	ldr	r3, [pc, #216]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003898:	6a1b      	ldr	r3, [r3, #32]
 800389a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800389e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d02e      	beq.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038ae:	68fa      	ldr	r2, [r7, #12]
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d027      	beq.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80038b4:	4b2e      	ldr	r3, [pc, #184]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038b6:	6a1b      	ldr	r3, [r3, #32]
 80038b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038bc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80038be:	4b2e      	ldr	r3, [pc, #184]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80038c0:	2201      	movs	r2, #1
 80038c2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80038c4:	4b2c      	ldr	r3, [pc, #176]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80038c6:	2200      	movs	r2, #0
 80038c8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80038ca:	4a29      	ldr	r2, [pc, #164]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	f003 0301 	and.w	r3, r3, #1
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d014      	beq.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038da:	f7fd f935 	bl	8000b48 <HAL_GetTick>
 80038de:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038e0:	e00a      	b.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038e2:	f7fd f931 	bl	8000b48 <HAL_GetTick>
 80038e6:	4602      	mov	r2, r0
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	1ad3      	subs	r3, r2, r3
 80038ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d901      	bls.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80038f4:	2303      	movs	r3, #3
 80038f6:	e036      	b.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038f8:	4b1d      	ldr	r3, [pc, #116]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038fa:	6a1b      	ldr	r3, [r3, #32]
 80038fc:	f003 0302 	and.w	r3, r3, #2
 8003900:	2b00      	cmp	r3, #0
 8003902:	d0ee      	beq.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003904:	4b1a      	ldr	r3, [pc, #104]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003906:	6a1b      	ldr	r3, [r3, #32]
 8003908:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	4917      	ldr	r1, [pc, #92]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003912:	4313      	orrs	r3, r2
 8003914:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003916:	7dfb      	ldrb	r3, [r7, #23]
 8003918:	2b01      	cmp	r3, #1
 800391a:	d105      	bne.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800391c:	4b14      	ldr	r3, [pc, #80]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800391e:	69db      	ldr	r3, [r3, #28]
 8003920:	4a13      	ldr	r2, [pc, #76]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003922:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003926:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 0302 	and.w	r3, r3, #2
 8003930:	2b00      	cmp	r3, #0
 8003932:	d008      	beq.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003934:	4b0e      	ldr	r3, [pc, #56]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	490b      	ldr	r1, [pc, #44]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003942:	4313      	orrs	r3, r2
 8003944:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 0310 	and.w	r3, r3, #16
 800394e:	2b00      	cmp	r3, #0
 8003950:	d008      	beq.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003952:	4b07      	ldr	r3, [pc, #28]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	68db      	ldr	r3, [r3, #12]
 800395e:	4904      	ldr	r1, [pc, #16]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003960:	4313      	orrs	r3, r2
 8003962:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003964:	2300      	movs	r3, #0
}
 8003966:	4618      	mov	r0, r3
 8003968:	3718      	adds	r7, #24
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}
 800396e:	bf00      	nop
 8003970:	40021000 	.word	0x40021000
 8003974:	40007000 	.word	0x40007000
 8003978:	42420440 	.word	0x42420440

0800397c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800397c:	b590      	push	{r4, r7, lr}
 800397e:	b08d      	sub	sp, #52	; 0x34
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003984:	4b58      	ldr	r3, [pc, #352]	; (8003ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8003986:	f107 040c 	add.w	r4, r7, #12
 800398a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800398c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003990:	f240 2301 	movw	r3, #513	; 0x201
 8003994:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003996:	2300      	movs	r3, #0
 8003998:	627b      	str	r3, [r7, #36]	; 0x24
 800399a:	2300      	movs	r3, #0
 800399c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800399e:	2300      	movs	r3, #0
 80039a0:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80039a2:	2300      	movs	r3, #0
 80039a4:	61fb      	str	r3, [r7, #28]
 80039a6:	2300      	movs	r3, #0
 80039a8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2b10      	cmp	r3, #16
 80039ae:	d00a      	beq.n	80039c6 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2b10      	cmp	r3, #16
 80039b4:	f200 808e 	bhi.w	8003ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2b01      	cmp	r3, #1
 80039bc:	d049      	beq.n	8003a52 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2b02      	cmp	r3, #2
 80039c2:	d079      	beq.n	8003ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80039c4:	e086      	b.n	8003ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 80039c6:	4b49      	ldr	r3, [pc, #292]	; (8003aec <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80039cc:	4b47      	ldr	r3, [pc, #284]	; (8003aec <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d07f      	beq.n	8003ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80039d8:	69fb      	ldr	r3, [r7, #28]
 80039da:	0c9b      	lsrs	r3, r3, #18
 80039dc:	f003 030f 	and.w	r3, r3, #15
 80039e0:	3330      	adds	r3, #48	; 0x30
 80039e2:	443b      	add	r3, r7
 80039e4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80039e8:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80039ea:	69fb      	ldr	r3, [r7, #28]
 80039ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d017      	beq.n	8003a24 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80039f4:	4b3d      	ldr	r3, [pc, #244]	; (8003aec <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	0c5b      	lsrs	r3, r3, #17
 80039fa:	f003 0301 	and.w	r3, r3, #1
 80039fe:	3330      	adds	r3, #48	; 0x30
 8003a00:	443b      	add	r3, r7
 8003a02:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003a06:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003a08:	69fb      	ldr	r3, [r7, #28]
 8003a0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d00d      	beq.n	8003a2e <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003a12:	4a37      	ldr	r2, [pc, #220]	; (8003af0 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8003a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a16:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a1a:	6a3b      	ldr	r3, [r7, #32]
 8003a1c:	fb02 f303 	mul.w	r3, r2, r3
 8003a20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a22:	e004      	b.n	8003a2e <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003a24:	6a3b      	ldr	r3, [r7, #32]
 8003a26:	4a33      	ldr	r2, [pc, #204]	; (8003af4 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003a28:	fb02 f303 	mul.w	r3, r2, r3
 8003a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003a2e:	4b2f      	ldr	r3, [pc, #188]	; (8003aec <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a3a:	d102      	bne.n	8003a42 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 8003a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a3e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003a40:	e04a      	b.n	8003ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 8003a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a44:	005b      	lsls	r3, r3, #1
 8003a46:	4a2c      	ldr	r2, [pc, #176]	; (8003af8 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8003a48:	fba2 2303 	umull	r2, r3, r2, r3
 8003a4c:	085b      	lsrs	r3, r3, #1
 8003a4e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003a50:	e042      	b.n	8003ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 8003a52:	4b26      	ldr	r3, [pc, #152]	; (8003aec <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003a54:	6a1b      	ldr	r3, [r3, #32]
 8003a56:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003a58:	69fb      	ldr	r3, [r7, #28]
 8003a5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a62:	d108      	bne.n	8003a76 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 8003a64:	69fb      	ldr	r3, [r7, #28]
 8003a66:	f003 0302 	and.w	r3, r3, #2
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d003      	beq.n	8003a76 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 8003a6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a72:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a74:	e01f      	b.n	8003ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003a76:	69fb      	ldr	r3, [r7, #28]
 8003a78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a80:	d109      	bne.n	8003a96 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 8003a82:	4b1a      	ldr	r3, [pc, #104]	; (8003aec <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a86:	f003 0302 	and.w	r3, r3, #2
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d003      	beq.n	8003a96 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 8003a8e:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003a92:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a94:	e00f      	b.n	8003ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003a96:	69fb      	ldr	r3, [r7, #28]
 8003a98:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a9c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003aa0:	d11c      	bne.n	8003adc <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8003aa2:	4b12      	ldr	r3, [pc, #72]	; (8003aec <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d016      	beq.n	8003adc <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 8003aae:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003ab2:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003ab4:	e012      	b.n	8003adc <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8003ab6:	e011      	b.n	8003adc <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003ab8:	f7ff fe78 	bl	80037ac <HAL_RCC_GetPCLK2Freq>
 8003abc:	4602      	mov	r2, r0
 8003abe:	4b0b      	ldr	r3, [pc, #44]	; (8003aec <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	0b9b      	lsrs	r3, r3, #14
 8003ac4:	f003 0303 	and.w	r3, r3, #3
 8003ac8:	3301      	adds	r3, #1
 8003aca:	005b      	lsls	r3, r3, #1
 8003acc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ad0:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003ad2:	e004      	b.n	8003ade <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8003ad4:	bf00      	nop
 8003ad6:	e002      	b.n	8003ade <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8003ad8:	bf00      	nop
 8003ada:	e000      	b.n	8003ade <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8003adc:	bf00      	nop
    }
  }
  return (frequency);
 8003ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3734      	adds	r7, #52	; 0x34
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd90      	pop	{r4, r7, pc}
 8003ae8:	08007140 	.word	0x08007140
 8003aec:	40021000 	.word	0x40021000
 8003af0:	007a1200 	.word	0x007a1200
 8003af4:	003d0900 	.word	0x003d0900
 8003af8:	aaaaaaab 	.word	0xaaaaaaab

08003afc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b082      	sub	sp, #8
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d101      	bne.n	8003b0e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e076      	b.n	8003bfc <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d108      	bne.n	8003b28 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b1e:	d009      	beq.n	8003b34 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2200      	movs	r2, #0
 8003b24:	61da      	str	r2, [r3, #28]
 8003b26:	e005      	b.n	8003b34 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2200      	movs	r2, #0
 8003b32:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2200      	movs	r2, #0
 8003b38:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b40:	b2db      	uxtb	r3, r3
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d106      	bne.n	8003b54 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	f7fc fd7a 	bl	8000648 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2202      	movs	r2, #2
 8003b58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b6a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003b7c:	431a      	orrs	r2, r3
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	68db      	ldr	r3, [r3, #12]
 8003b82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b86:	431a      	orrs	r2, r3
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	691b      	ldr	r3, [r3, #16]
 8003b8c:	f003 0302 	and.w	r3, r3, #2
 8003b90:	431a      	orrs	r2, r3
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	695b      	ldr	r3, [r3, #20]
 8003b96:	f003 0301 	and.w	r3, r3, #1
 8003b9a:	431a      	orrs	r2, r3
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	699b      	ldr	r3, [r3, #24]
 8003ba0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ba4:	431a      	orrs	r2, r3
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	69db      	ldr	r3, [r3, #28]
 8003baa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003bae:	431a      	orrs	r2, r3
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6a1b      	ldr	r3, [r3, #32]
 8003bb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bb8:	ea42 0103 	orr.w	r1, r2, r3
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bc0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	430a      	orrs	r2, r1
 8003bca:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	699b      	ldr	r3, [r3, #24]
 8003bd0:	0c1a      	lsrs	r2, r3, #16
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f002 0204 	and.w	r2, r2, #4
 8003bda:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	69da      	ldr	r2, [r3, #28]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bea:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003bfa:	2300      	movs	r3, #0
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	3708      	adds	r7, #8
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}

08003c04 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b088      	sub	sp, #32
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	60f8      	str	r0, [r7, #12]
 8003c0c:	60b9      	str	r1, [r7, #8]
 8003c0e:	603b      	str	r3, [r7, #0]
 8003c10:	4613      	mov	r3, r2
 8003c12:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003c14:	2300      	movs	r3, #0
 8003c16:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003c1e:	2b01      	cmp	r3, #1
 8003c20:	d101      	bne.n	8003c26 <HAL_SPI_Transmit+0x22>
 8003c22:	2302      	movs	r3, #2
 8003c24:	e126      	b.n	8003e74 <HAL_SPI_Transmit+0x270>
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2201      	movs	r2, #1
 8003c2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c2e:	f7fc ff8b 	bl	8000b48 <HAL_GetTick>
 8003c32:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003c34:	88fb      	ldrh	r3, [r7, #6]
 8003c36:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c3e:	b2db      	uxtb	r3, r3
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d002      	beq.n	8003c4a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003c44:	2302      	movs	r3, #2
 8003c46:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003c48:	e10b      	b.n	8003e62 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d002      	beq.n	8003c56 <HAL_SPI_Transmit+0x52>
 8003c50:	88fb      	ldrh	r3, [r7, #6]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d102      	bne.n	8003c5c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003c5a:	e102      	b.n	8003e62 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2203      	movs	r2, #3
 8003c60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2200      	movs	r2, #0
 8003c68:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	68ba      	ldr	r2, [r7, #8]
 8003c6e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	88fa      	ldrh	r2, [r7, #6]
 8003c74:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	88fa      	ldrh	r2, [r7, #6]
 8003c7a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2200      	movs	r2, #0
 8003c86:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2200      	movs	r2, #0
 8003c92:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2200      	movs	r2, #0
 8003c98:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ca2:	d10f      	bne.n	8003cc4 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cb2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003cc2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cce:	2b40      	cmp	r3, #64	; 0x40
 8003cd0:	d007      	beq.n	8003ce2 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ce0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	68db      	ldr	r3, [r3, #12]
 8003ce6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cea:	d14b      	bne.n	8003d84 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d002      	beq.n	8003cfa <HAL_SPI_Transmit+0xf6>
 8003cf4:	8afb      	ldrh	r3, [r7, #22]
 8003cf6:	2b01      	cmp	r3, #1
 8003cf8:	d13e      	bne.n	8003d78 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cfe:	881a      	ldrh	r2, [r3, #0]
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d0a:	1c9a      	adds	r2, r3, #2
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d14:	b29b      	uxth	r3, r3
 8003d16:	3b01      	subs	r3, #1
 8003d18:	b29a      	uxth	r2, r3
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003d1e:	e02b      	b.n	8003d78 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	f003 0302 	and.w	r3, r3, #2
 8003d2a:	2b02      	cmp	r3, #2
 8003d2c:	d112      	bne.n	8003d54 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d32:	881a      	ldrh	r2, [r3, #0]
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d3e:	1c9a      	adds	r2, r3, #2
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d48:	b29b      	uxth	r3, r3
 8003d4a:	3b01      	subs	r3, #1
 8003d4c:	b29a      	uxth	r2, r3
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	86da      	strh	r2, [r3, #54]	; 0x36
 8003d52:	e011      	b.n	8003d78 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d54:	f7fc fef8 	bl	8000b48 <HAL_GetTick>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	69bb      	ldr	r3, [r7, #24]
 8003d5c:	1ad3      	subs	r3, r2, r3
 8003d5e:	683a      	ldr	r2, [r7, #0]
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d803      	bhi.n	8003d6c <HAL_SPI_Transmit+0x168>
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d6a:	d102      	bne.n	8003d72 <HAL_SPI_Transmit+0x16e>
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d102      	bne.n	8003d78 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003d72:	2303      	movs	r3, #3
 8003d74:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003d76:	e074      	b.n	8003e62 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d7c:	b29b      	uxth	r3, r3
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d1ce      	bne.n	8003d20 <HAL_SPI_Transmit+0x11c>
 8003d82:	e04c      	b.n	8003e1e <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d002      	beq.n	8003d92 <HAL_SPI_Transmit+0x18e>
 8003d8c:	8afb      	ldrh	r3, [r7, #22]
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d140      	bne.n	8003e14 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	330c      	adds	r3, #12
 8003d9c:	7812      	ldrb	r2, [r2, #0]
 8003d9e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003da4:	1c5a      	adds	r2, r3, #1
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003dae:	b29b      	uxth	r3, r3
 8003db0:	3b01      	subs	r3, #1
 8003db2:	b29a      	uxth	r2, r3
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003db8:	e02c      	b.n	8003e14 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	f003 0302 	and.w	r3, r3, #2
 8003dc4:	2b02      	cmp	r3, #2
 8003dc6:	d113      	bne.n	8003df0 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	330c      	adds	r3, #12
 8003dd2:	7812      	ldrb	r2, [r2, #0]
 8003dd4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dda:	1c5a      	adds	r2, r3, #1
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003de4:	b29b      	uxth	r3, r3
 8003de6:	3b01      	subs	r3, #1
 8003de8:	b29a      	uxth	r2, r3
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	86da      	strh	r2, [r3, #54]	; 0x36
 8003dee:	e011      	b.n	8003e14 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003df0:	f7fc feaa 	bl	8000b48 <HAL_GetTick>
 8003df4:	4602      	mov	r2, r0
 8003df6:	69bb      	ldr	r3, [r7, #24]
 8003df8:	1ad3      	subs	r3, r2, r3
 8003dfa:	683a      	ldr	r2, [r7, #0]
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d803      	bhi.n	8003e08 <HAL_SPI_Transmit+0x204>
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e06:	d102      	bne.n	8003e0e <HAL_SPI_Transmit+0x20a>
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d102      	bne.n	8003e14 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003e0e:	2303      	movs	r3, #3
 8003e10:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003e12:	e026      	b.n	8003e62 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e18:	b29b      	uxth	r3, r3
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d1cd      	bne.n	8003dba <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003e1e:	69ba      	ldr	r2, [r7, #24]
 8003e20:	6839      	ldr	r1, [r7, #0]
 8003e22:	68f8      	ldr	r0, [r7, #12]
 8003e24:	f000 f8b2 	bl	8003f8c <SPI_EndRxTxTransaction>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d002      	beq.n	8003e34 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2220      	movs	r2, #32
 8003e32:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d10a      	bne.n	8003e52 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	613b      	str	r3, [r7, #16]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	68db      	ldr	r3, [r3, #12]
 8003e46:	613b      	str	r3, [r7, #16]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	613b      	str	r3, [r7, #16]
 8003e50:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d002      	beq.n	8003e60 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	77fb      	strb	r3, [r7, #31]
 8003e5e:	e000      	b.n	8003e62 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003e60:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2201      	movs	r2, #1
 8003e66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003e72:	7ffb      	ldrb	r3, [r7, #31]
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	3720      	adds	r7, #32
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}

08003e7c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b088      	sub	sp, #32
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	60f8      	str	r0, [r7, #12]
 8003e84:	60b9      	str	r1, [r7, #8]
 8003e86:	603b      	str	r3, [r7, #0]
 8003e88:	4613      	mov	r3, r2
 8003e8a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003e8c:	f7fc fe5c 	bl	8000b48 <HAL_GetTick>
 8003e90:	4602      	mov	r2, r0
 8003e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e94:	1a9b      	subs	r3, r3, r2
 8003e96:	683a      	ldr	r2, [r7, #0]
 8003e98:	4413      	add	r3, r2
 8003e9a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003e9c:	f7fc fe54 	bl	8000b48 <HAL_GetTick>
 8003ea0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003ea2:	4b39      	ldr	r3, [pc, #228]	; (8003f88 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	015b      	lsls	r3, r3, #5
 8003ea8:	0d1b      	lsrs	r3, r3, #20
 8003eaa:	69fa      	ldr	r2, [r7, #28]
 8003eac:	fb02 f303 	mul.w	r3, r2, r3
 8003eb0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003eb2:	e054      	b.n	8003f5e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eba:	d050      	beq.n	8003f5e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003ebc:	f7fc fe44 	bl	8000b48 <HAL_GetTick>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	69bb      	ldr	r3, [r7, #24]
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	69fa      	ldr	r2, [r7, #28]
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d902      	bls.n	8003ed2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003ecc:	69fb      	ldr	r3, [r7, #28]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d13d      	bne.n	8003f4e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	685a      	ldr	r2, [r3, #4]
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003ee0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003eea:	d111      	bne.n	8003f10 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ef4:	d004      	beq.n	8003f00 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003efe:	d107      	bne.n	8003f10 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f0e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f18:	d10f      	bne.n	8003f3a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f28:	601a      	str	r2, [r3, #0]
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f38:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2200      	movs	r2, #0
 8003f46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003f4a:	2303      	movs	r3, #3
 8003f4c:	e017      	b.n	8003f7e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d101      	bne.n	8003f58 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003f54:	2300      	movs	r3, #0
 8003f56:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	3b01      	subs	r3, #1
 8003f5c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	689a      	ldr	r2, [r3, #8]
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	4013      	ands	r3, r2
 8003f68:	68ba      	ldr	r2, [r7, #8]
 8003f6a:	429a      	cmp	r2, r3
 8003f6c:	bf0c      	ite	eq
 8003f6e:	2301      	moveq	r3, #1
 8003f70:	2300      	movne	r3, #0
 8003f72:	b2db      	uxtb	r3, r3
 8003f74:	461a      	mov	r2, r3
 8003f76:	79fb      	ldrb	r3, [r7, #7]
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	d19b      	bne.n	8003eb4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003f7c:	2300      	movs	r3, #0
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3720      	adds	r7, #32
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}
 8003f86:	bf00      	nop
 8003f88:	20000000 	.word	0x20000000

08003f8c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b086      	sub	sp, #24
 8003f90:	af02      	add	r7, sp, #8
 8003f92:	60f8      	str	r0, [r7, #12]
 8003f94:	60b9      	str	r1, [r7, #8]
 8003f96:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	9300      	str	r3, [sp, #0]
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	2180      	movs	r1, #128	; 0x80
 8003fa2:	68f8      	ldr	r0, [r7, #12]
 8003fa4:	f7ff ff6a 	bl	8003e7c <SPI_WaitFlagStateUntilTimeout>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d007      	beq.n	8003fbe <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fb2:	f043 0220 	orr.w	r2, r3, #32
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003fba:	2303      	movs	r3, #3
 8003fbc:	e000      	b.n	8003fc0 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003fbe:	2300      	movs	r3, #0
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	3710      	adds	r7, #16
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}

08003fc8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b082      	sub	sp, #8
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d101      	bne.n	8003fda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e03f      	b.n	800405a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d106      	bne.n	8003ff4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f7fc fce0 	bl	80009b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2224      	movs	r2, #36	; 0x24
 8003ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	68da      	ldr	r2, [r3, #12]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800400a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800400c:	6878      	ldr	r0, [r7, #4]
 800400e:	f000 f905 	bl	800421c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	691a      	ldr	r2, [r3, #16]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004020:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	695a      	ldr	r2, [r3, #20]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004030:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	68da      	ldr	r2, [r3, #12]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004040:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2200      	movs	r2, #0
 8004046:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2220      	movs	r2, #32
 800404c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2220      	movs	r2, #32
 8004054:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004058:	2300      	movs	r3, #0
}
 800405a:	4618      	mov	r0, r3
 800405c:	3708      	adds	r7, #8
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}

08004062 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004062:	b580      	push	{r7, lr}
 8004064:	b08a      	sub	sp, #40	; 0x28
 8004066:	af02      	add	r7, sp, #8
 8004068:	60f8      	str	r0, [r7, #12]
 800406a:	60b9      	str	r1, [r7, #8]
 800406c:	603b      	str	r3, [r7, #0]
 800406e:	4613      	mov	r3, r2
 8004070:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004072:	2300      	movs	r3, #0
 8004074:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800407c:	b2db      	uxtb	r3, r3
 800407e:	2b20      	cmp	r3, #32
 8004080:	d17c      	bne.n	800417c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d002      	beq.n	800408e <HAL_UART_Transmit+0x2c>
 8004088:	88fb      	ldrh	r3, [r7, #6]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d101      	bne.n	8004092 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	e075      	b.n	800417e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004098:	2b01      	cmp	r3, #1
 800409a:	d101      	bne.n	80040a0 <HAL_UART_Transmit+0x3e>
 800409c:	2302      	movs	r3, #2
 800409e:	e06e      	b.n	800417e <HAL_UART_Transmit+0x11c>
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2201      	movs	r2, #1
 80040a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2200      	movs	r2, #0
 80040ac:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2221      	movs	r2, #33	; 0x21
 80040b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80040b6:	f7fc fd47 	bl	8000b48 <HAL_GetTick>
 80040ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	88fa      	ldrh	r2, [r7, #6]
 80040c0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	88fa      	ldrh	r2, [r7, #6]
 80040c6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040d0:	d108      	bne.n	80040e4 <HAL_UART_Transmit+0x82>
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	691b      	ldr	r3, [r3, #16]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d104      	bne.n	80040e4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80040da:	2300      	movs	r3, #0
 80040dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	61bb      	str	r3, [r7, #24]
 80040e2:	e003      	b.n	80040ec <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80040e8:	2300      	movs	r3, #0
 80040ea:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2200      	movs	r2, #0
 80040f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80040f4:	e02a      	b.n	800414c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	9300      	str	r3, [sp, #0]
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	2200      	movs	r2, #0
 80040fe:	2180      	movs	r1, #128	; 0x80
 8004100:	68f8      	ldr	r0, [r7, #12]
 8004102:	f000 f840 	bl	8004186 <UART_WaitOnFlagUntilTimeout>
 8004106:	4603      	mov	r3, r0
 8004108:	2b00      	cmp	r3, #0
 800410a:	d001      	beq.n	8004110 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800410c:	2303      	movs	r3, #3
 800410e:	e036      	b.n	800417e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004110:	69fb      	ldr	r3, [r7, #28]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d10b      	bne.n	800412e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004116:	69bb      	ldr	r3, [r7, #24]
 8004118:	881b      	ldrh	r3, [r3, #0]
 800411a:	461a      	mov	r2, r3
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004124:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004126:	69bb      	ldr	r3, [r7, #24]
 8004128:	3302      	adds	r3, #2
 800412a:	61bb      	str	r3, [r7, #24]
 800412c:	e007      	b.n	800413e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800412e:	69fb      	ldr	r3, [r7, #28]
 8004130:	781a      	ldrb	r2, [r3, #0]
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004138:	69fb      	ldr	r3, [r7, #28]
 800413a:	3301      	adds	r3, #1
 800413c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004142:	b29b      	uxth	r3, r3
 8004144:	3b01      	subs	r3, #1
 8004146:	b29a      	uxth	r2, r3
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004150:	b29b      	uxth	r3, r3
 8004152:	2b00      	cmp	r3, #0
 8004154:	d1cf      	bne.n	80040f6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	9300      	str	r3, [sp, #0]
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	2200      	movs	r2, #0
 800415e:	2140      	movs	r1, #64	; 0x40
 8004160:	68f8      	ldr	r0, [r7, #12]
 8004162:	f000 f810 	bl	8004186 <UART_WaitOnFlagUntilTimeout>
 8004166:	4603      	mov	r3, r0
 8004168:	2b00      	cmp	r3, #0
 800416a:	d001      	beq.n	8004170 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800416c:	2303      	movs	r3, #3
 800416e:	e006      	b.n	800417e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2220      	movs	r2, #32
 8004174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004178:	2300      	movs	r3, #0
 800417a:	e000      	b.n	800417e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800417c:	2302      	movs	r3, #2
  }
}
 800417e:	4618      	mov	r0, r3
 8004180:	3720      	adds	r7, #32
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}

08004186 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004186:	b580      	push	{r7, lr}
 8004188:	b084      	sub	sp, #16
 800418a:	af00      	add	r7, sp, #0
 800418c:	60f8      	str	r0, [r7, #12]
 800418e:	60b9      	str	r1, [r7, #8]
 8004190:	603b      	str	r3, [r7, #0]
 8004192:	4613      	mov	r3, r2
 8004194:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004196:	e02c      	b.n	80041f2 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004198:	69bb      	ldr	r3, [r7, #24]
 800419a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800419e:	d028      	beq.n	80041f2 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80041a0:	69bb      	ldr	r3, [r7, #24]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d007      	beq.n	80041b6 <UART_WaitOnFlagUntilTimeout+0x30>
 80041a6:	f7fc fccf 	bl	8000b48 <HAL_GetTick>
 80041aa:	4602      	mov	r2, r0
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	1ad3      	subs	r3, r2, r3
 80041b0:	69ba      	ldr	r2, [r7, #24]
 80041b2:	429a      	cmp	r2, r3
 80041b4:	d21d      	bcs.n	80041f2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	68da      	ldr	r2, [r3, #12]
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80041c4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	695a      	ldr	r2, [r3, #20]
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f022 0201 	bic.w	r2, r2, #1
 80041d4:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2220      	movs	r2, #32
 80041da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2220      	movs	r2, #32
 80041e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2200      	movs	r2, #0
 80041ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80041ee:	2303      	movs	r3, #3
 80041f0:	e00f      	b.n	8004212 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	4013      	ands	r3, r2
 80041fc:	68ba      	ldr	r2, [r7, #8]
 80041fe:	429a      	cmp	r2, r3
 8004200:	bf0c      	ite	eq
 8004202:	2301      	moveq	r3, #1
 8004204:	2300      	movne	r3, #0
 8004206:	b2db      	uxtb	r3, r3
 8004208:	461a      	mov	r2, r3
 800420a:	79fb      	ldrb	r3, [r7, #7]
 800420c:	429a      	cmp	r2, r3
 800420e:	d0c3      	beq.n	8004198 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004210:	2300      	movs	r3, #0
}
 8004212:	4618      	mov	r0, r3
 8004214:	3710      	adds	r7, #16
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}
	...

0800421c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b084      	sub	sp, #16
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	691b      	ldr	r3, [r3, #16]
 800422a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	68da      	ldr	r2, [r3, #12]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	430a      	orrs	r2, r1
 8004238:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	689a      	ldr	r2, [r3, #8]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	691b      	ldr	r3, [r3, #16]
 8004242:	431a      	orrs	r2, r3
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	695b      	ldr	r3, [r3, #20]
 8004248:	4313      	orrs	r3, r2
 800424a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	68db      	ldr	r3, [r3, #12]
 8004252:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004256:	f023 030c 	bic.w	r3, r3, #12
 800425a:	687a      	ldr	r2, [r7, #4]
 800425c:	6812      	ldr	r2, [r2, #0]
 800425e:	68b9      	ldr	r1, [r7, #8]
 8004260:	430b      	orrs	r3, r1
 8004262:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	695b      	ldr	r3, [r3, #20]
 800426a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	699a      	ldr	r2, [r3, #24]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	430a      	orrs	r2, r1
 8004278:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a2c      	ldr	r2, [pc, #176]	; (8004330 <UART_SetConfig+0x114>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d103      	bne.n	800428c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004284:	f7ff fa92 	bl	80037ac <HAL_RCC_GetPCLK2Freq>
 8004288:	60f8      	str	r0, [r7, #12]
 800428a:	e002      	b.n	8004292 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800428c:	f7ff fa7a 	bl	8003784 <HAL_RCC_GetPCLK1Freq>
 8004290:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004292:	68fa      	ldr	r2, [r7, #12]
 8004294:	4613      	mov	r3, r2
 8004296:	009b      	lsls	r3, r3, #2
 8004298:	4413      	add	r3, r2
 800429a:	009a      	lsls	r2, r3, #2
 800429c:	441a      	add	r2, r3
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	009b      	lsls	r3, r3, #2
 80042a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80042a8:	4a22      	ldr	r2, [pc, #136]	; (8004334 <UART_SetConfig+0x118>)
 80042aa:	fba2 2303 	umull	r2, r3, r2, r3
 80042ae:	095b      	lsrs	r3, r3, #5
 80042b0:	0119      	lsls	r1, r3, #4
 80042b2:	68fa      	ldr	r2, [r7, #12]
 80042b4:	4613      	mov	r3, r2
 80042b6:	009b      	lsls	r3, r3, #2
 80042b8:	4413      	add	r3, r2
 80042ba:	009a      	lsls	r2, r3, #2
 80042bc:	441a      	add	r2, r3
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	009b      	lsls	r3, r3, #2
 80042c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80042c8:	4b1a      	ldr	r3, [pc, #104]	; (8004334 <UART_SetConfig+0x118>)
 80042ca:	fba3 0302 	umull	r0, r3, r3, r2
 80042ce:	095b      	lsrs	r3, r3, #5
 80042d0:	2064      	movs	r0, #100	; 0x64
 80042d2:	fb00 f303 	mul.w	r3, r0, r3
 80042d6:	1ad3      	subs	r3, r2, r3
 80042d8:	011b      	lsls	r3, r3, #4
 80042da:	3332      	adds	r3, #50	; 0x32
 80042dc:	4a15      	ldr	r2, [pc, #84]	; (8004334 <UART_SetConfig+0x118>)
 80042de:	fba2 2303 	umull	r2, r3, r2, r3
 80042e2:	095b      	lsrs	r3, r3, #5
 80042e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042e8:	4419      	add	r1, r3
 80042ea:	68fa      	ldr	r2, [r7, #12]
 80042ec:	4613      	mov	r3, r2
 80042ee:	009b      	lsls	r3, r3, #2
 80042f0:	4413      	add	r3, r2
 80042f2:	009a      	lsls	r2, r3, #2
 80042f4:	441a      	add	r2, r3
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	009b      	lsls	r3, r3, #2
 80042fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8004300:	4b0c      	ldr	r3, [pc, #48]	; (8004334 <UART_SetConfig+0x118>)
 8004302:	fba3 0302 	umull	r0, r3, r3, r2
 8004306:	095b      	lsrs	r3, r3, #5
 8004308:	2064      	movs	r0, #100	; 0x64
 800430a:	fb00 f303 	mul.w	r3, r0, r3
 800430e:	1ad3      	subs	r3, r2, r3
 8004310:	011b      	lsls	r3, r3, #4
 8004312:	3332      	adds	r3, #50	; 0x32
 8004314:	4a07      	ldr	r2, [pc, #28]	; (8004334 <UART_SetConfig+0x118>)
 8004316:	fba2 2303 	umull	r2, r3, r2, r3
 800431a:	095b      	lsrs	r3, r3, #5
 800431c:	f003 020f 	and.w	r2, r3, #15
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	440a      	add	r2, r1
 8004326:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004328:	bf00      	nop
 800432a:	3710      	adds	r7, #16
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}
 8004330:	40013800 	.word	0x40013800
 8004334:	51eb851f 	.word	0x51eb851f

08004338 <ADC1_GetValue>:
**************************************************************************
*/


uint32_t ADC1_GetValue(	ADC_HandleTypeDef * _hadc	,
						uint32_t channel			) {
 8004338:	b580      	push	{r7, lr}
 800433a:	b086      	sub	sp, #24
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
 8004340:	6039      	str	r1, [r7, #0]

    ADC_ChannelConfTypeDef	sConfig						;
    sConfig.Channel 		= channel					;
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	60bb      	str	r3, [r7, #8]
    sConfig.Rank 			= 1							;
 8004346:	2301      	movs	r3, #1
 8004348:	60fb      	str	r3, [r7, #12]
    sConfig.SamplingTime 	= ADC_SAMPLETIME_13CYCLES_5	;
 800434a:	2302      	movs	r3, #2
 800434c:	613b      	str	r3, [r7, #16]
    HAL_ADC_ConfigChannel( _hadc, &sConfig);
 800434e:	f107 0308 	add.w	r3, r7, #8
 8004352:	4619      	mov	r1, r3
 8004354:	6878      	ldr	r0, [r7, #4]
 8004356:	f7fc fee9 	bl	800112c <HAL_ADC_ConfigChannel>

    HAL_ADC_Start( _hadc ) ;	//	 Start conversion
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f7fc fcfa 	bl	8000d54 <HAL_ADC_Start>
    HAL_ADC_PollForConversion( _hadc , 100 ) ;	//	Wait until finish
 8004360:	2164      	movs	r1, #100	; 0x64
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f7fc fdd0 	bl	8000f08 <HAL_ADC_PollForConversion>
    uint32_t value_u32 = HAL_ADC_GetValue( _hadc ) ;
 8004368:	6878      	ldr	r0, [r7, #4]
 800436a:	f7fc fed3 	bl	8001114 <HAL_ADC_GetValue>
 800436e:	6178      	str	r0, [r7, #20]
    HAL_ADC_Stop( _hadc ) ;
 8004370:	6878      	ldr	r0, [r7, #4]
 8004372:	f7fc fd9d 	bl	8000eb0 <HAL_ADC_Stop>
    return value_u32;
 8004376:	697b      	ldr	r3, [r7, #20]
}
 8004378:	4618      	mov	r0, r3
 800437a:	3718      	adds	r7, #24
 800437c:	46bd      	mov	sp, r7
 800437e:	bd80      	pop	{r7, pc}

08004380 <Digit_clock_Init>:
**************************************************************************
*                           GLOBAL FUNCTIONS
**************************************************************************
*/

void Digit_clock_Init (void) {
 8004380:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004382:	b0a5      	sub	sp, #148	; 0x94
 8004384:	af04      	add	r7, sp, #16
	_beeper( 100 ) ;
 8004386:	2064      	movs	r0, #100	; 0x64
 8004388:	f000 faec 	bl	8004964 <_beeper>
	int soft_version_arr_int[3];
	soft_version_arr_int[0] = ((SOFT_VERSION) / 100) %10 ;
 800438c:	2301      	movs	r3, #1
 800438e:	66fb      	str	r3, [r7, #108]	; 0x6c
	soft_version_arr_int[1] = ((SOFT_VERSION) /  10) %10 ;
 8004390:	2305      	movs	r3, #5
 8004392:	673b      	str	r3, [r7, #112]	; 0x70
	soft_version_arr_int[2] = ((SOFT_VERSION)      ) %10 ;
 8004394:	2300      	movs	r3, #0
 8004396:	677b      	str	r3, [r7, #116]	; 0x74

	int16_t version_year_i16	= VERSION_YEAR	;
 8004398:	f240 73e5 	movw	r3, #2021	; 0x7e5
 800439c:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
	int16_t version_month_i16 	= VERSION_MONTH	;
 80043a0:	2304      	movs	r3, #4
 80043a2:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
	int16_t version_day_i16		= VERSION_DAY	;
 80043a6:	2307      	movs	r3, #7
 80043a8:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a

	char DataChar[100];
	sprintf(DataChar,"\r\n\r\n\tDigital clock for bedroom v%d.%d.%d %02d/%02d/%d" ,
 80043ac:	6efd      	ldr	r5, [r7, #108]	; 0x6c
 80043ae:	6f3e      	ldr	r6, [r7, #112]	; 0x70
 80043b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80043b2:	f9b7 207a 	ldrsh.w	r2, [r7, #122]	; 0x7a
 80043b6:	f9b7 107c 	ldrsh.w	r1, [r7, #124]	; 0x7c
 80043ba:	f9b7 007e 	ldrsh.w	r0, [r7, #126]	; 0x7e
 80043be:	f107 0408 	add.w	r4, r7, #8
 80043c2:	9003      	str	r0, [sp, #12]
 80043c4:	9102      	str	r1, [sp, #8]
 80043c6:	9201      	str	r2, [sp, #4]
 80043c8:	9300      	str	r3, [sp, #0]
 80043ca:	4633      	mov	r3, r6
 80043cc:	462a      	mov	r2, r5
 80043ce:	494e      	ldr	r1, [pc, #312]	; (8004508 <Digit_clock_Init+0x188>)
 80043d0:	4620      	mov	r0, r4
 80043d2:	f001 fcc5 	bl	8005d60 <siprintf>
			soft_version_arr_int[0] , soft_version_arr_int[1] , soft_version_arr_int[2] ,
			version_day_i16 , version_month_i16 , version_year_i16 ) ;
	HAL_UART_Transmit( &huart1, (uint8_t *)DataChar , strlen(DataChar) , 100 ) ;
 80043d6:	f107 0308 	add.w	r3, r7, #8
 80043da:	4618      	mov	r0, r3
 80043dc:	f7fb feb6 	bl	800014c <strlen>
 80043e0:	4603      	mov	r3, r0
 80043e2:	b29a      	uxth	r2, r3
 80043e4:	f107 0108 	add.w	r1, r7, #8
 80043e8:	2364      	movs	r3, #100	; 0x64
 80043ea:	4848      	ldr	r0, [pc, #288]	; (800450c <Digit_clock_Init+0x18c>)
 80043ec:	f7ff fe39 	bl	8004062 <HAL_UART_Transmit>

	#define DATE_as_int_str 	(__DATE__)
	#define TIME_as_int_str 	(__TIME__)
	sprintf(DataChar,"\r\n\tBuild: %s. Time: %s." , DATE_as_int_str , TIME_as_int_str ) ;
 80043f0:	f107 0008 	add.w	r0, r7, #8
 80043f4:	4b46      	ldr	r3, [pc, #280]	; (8004510 <Digit_clock_Init+0x190>)
 80043f6:	4a47      	ldr	r2, [pc, #284]	; (8004514 <Digit_clock_Init+0x194>)
 80043f8:	4947      	ldr	r1, [pc, #284]	; (8004518 <Digit_clock_Init+0x198>)
 80043fa:	f001 fcb1 	bl	8005d60 <siprintf>
	HAL_UART_Transmit( &huart1, (uint8_t *)DataChar , strlen(DataChar) , 100 ) ;
 80043fe:	f107 0308 	add.w	r3, r7, #8
 8004402:	4618      	mov	r0, r3
 8004404:	f7fb fea2 	bl	800014c <strlen>
 8004408:	4603      	mov	r3, r0
 800440a:	b29a      	uxth	r2, r3
 800440c:	f107 0108 	add.w	r1, r7, #8
 8004410:	2364      	movs	r3, #100	; 0x64
 8004412:	483e      	ldr	r0, [pc, #248]	; (800450c <Digit_clock_Init+0x18c>)
 8004414:	f7ff fe25 	bl	8004062 <HAL_UART_Transmit>

	sprintf(DataChar,"\r\n\tFor debug: UART1-115200/8-N-1" ) ;
 8004418:	f107 0308 	add.w	r3, r7, #8
 800441c:	493f      	ldr	r1, [pc, #252]	; (800451c <Digit_clock_Init+0x19c>)
 800441e:	4618      	mov	r0, r3
 8004420:	f001 fc9e 	bl	8005d60 <siprintf>
	HAL_UART_Transmit( &huart1, (uint8_t *)DataChar , strlen(DataChar) , 100 ) ;
 8004424:	f107 0308 	add.w	r3, r7, #8
 8004428:	4618      	mov	r0, r3
 800442a:	f7fb fe8f 	bl	800014c <strlen>
 800442e:	4603      	mov	r3, r0
 8004430:	b29a      	uxth	r2, r3
 8004432:	f107 0108 	add.w	r1, r7, #8
 8004436:	2364      	movs	r3, #100	; 0x64
 8004438:	4834      	ldr	r0, [pc, #208]	; (800450c <Digit_clock_Init+0x18c>)
 800443a:	f7ff fe12 	bl	8004062 <HAL_UART_Transmit>


	I2Cdev_init( &hi2c1 ) ;
 800443e:	4838      	ldr	r0, [pc, #224]	; (8004520 <Digit_clock_Init+0x1a0>)
 8004440:	f000 fe52 	bl	80050e8 <I2Cdev_init>
	I2C_ScanBusFlow( &hi2c1 , &huart1 ) ;
 8004444:	4931      	ldr	r1, [pc, #196]	; (800450c <Digit_clock_Init+0x18c>)
 8004446:	4836      	ldr	r0, [pc, #216]	; (8004520 <Digit_clock_Init+0x1a0>)
 8004448:	f000 feec 	bl	8005224 <I2C_ScanBusFlow>

	DS3231_TimeTypeDef TimeSt ;
	DS3231_DateTypeDef DateSt ;
	//	Set_Date_and_Time_to_DS3231( 2021, 3, 8, 4, 3, 52, 40 ) ;
	ds3231_GetTime( ADR_I2C_DS3231 , &TimeSt ) ;
 800444c:	1d3b      	adds	r3, r7, #4
 800444e:	4619      	mov	r1, r3
 8004450:	2068      	movs	r0, #104	; 0x68
 8004452:	f000 fcc9 	bl	8004de8 <ds3231_GetTime>
	ds3231_GetDate( ADR_I2C_DS3231 , &DateSt ) ;
 8004456:	463b      	mov	r3, r7
 8004458:	4619      	mov	r1, r3
 800445a:	2068      	movs	r0, #104	; 0x68
 800445c:	f000 fd13 	bl	8004e86 <ds3231_GetDate>

	ds3231_PrintDate( 		&DateSt , &huart1 ) ;
 8004460:	463b      	mov	r3, r7
 8004462:	492a      	ldr	r1, [pc, #168]	; (800450c <Digit_clock_Init+0x18c>)
 8004464:	4618      	mov	r0, r3
 8004466:	f000 fabd 	bl	80049e4 <ds3231_PrintDate>
	ds3231_PrintWeek_3Char(	&DateSt , &huart1 ) ;
 800446a:	463b      	mov	r3, r7
 800446c:	4927      	ldr	r1, [pc, #156]	; (800450c <Digit_clock_Init+0x18c>)
 800446e:	4618      	mov	r0, r3
 8004470:	f000 fc3a 	bl	8004ce8 <ds3231_PrintWeek_3Char>
	ds3231_PrintTime( 		&TimeSt , &huart1 ) ;
 8004474:	1d3b      	adds	r3, r7, #4
 8004476:	4925      	ldr	r1, [pc, #148]	; (800450c <Digit_clock_Init+0x18c>)
 8004478:	4618      	mov	r0, r3
 800447a:	f000 fa8b 	bl	8004994 <ds3231_PrintTime>
	sprintf( DataChar , "\r\n" ) ;
 800447e:	f107 0308 	add.w	r3, r7, #8
 8004482:	4928      	ldr	r1, [pc, #160]	; (8004524 <Digit_clock_Init+0x1a4>)
 8004484:	4618      	mov	r0, r3
 8004486:	f001 fc6b 	bl	8005d60 <siprintf>
	HAL_UART_Transmit( &huart1 , (uint8_t *)DataChar , strlen(DataChar) , 100 ) ;
 800448a:	f107 0308 	add.w	r3, r7, #8
 800448e:	4618      	mov	r0, r3
 8004490:	f7fb fe5c 	bl	800014c <strlen>
 8004494:	4603      	mov	r3, r0
 8004496:	b29a      	uxth	r2, r3
 8004498:	f107 0108 	add.w	r1, r7, #8
 800449c:	2364      	movs	r3, #100	; 0x64
 800449e:	481b      	ldr	r0, [pc, #108]	; (800450c <Digit_clock_Init+0x18c>)
 80044a0:	f7ff fddf 	bl	8004062 <HAL_UART_Transmit>

	//ds3231_Alarm1_SetSeconds(ADR_I2C_DS3231, 0x00) ;
	ds3231_Alarm1_SetEverySeconds( ADR_I2C_DS3231 ) ;
 80044a4:	2068      	movs	r0, #104	; 0x68
 80044a6:	f000 fdbb 	bl	8005020 <ds3231_Alarm1_SetEverySeconds>
	ds3231_Alarm1_ClearStatusBit ( ADR_I2C_DS3231 ) ;
 80044aa:	2068      	movs	r0, #104	; 0x68
 80044ac:	f000 fdeb 	bl	8005086 <ds3231_Alarm1_ClearStatusBit>

	Max7219_struct_init (&h1_max7219, &hspi1,SPI1_CS_GPIO_Port,SPI1_CS_Pin);
 80044b0:	2340      	movs	r3, #64	; 0x40
 80044b2:	4a1d      	ldr	r2, [pc, #116]	; (8004528 <Digit_clock_Init+0x1a8>)
 80044b4:	491d      	ldr	r1, [pc, #116]	; (800452c <Digit_clock_Init+0x1ac>)
 80044b6:	481e      	ldr	r0, [pc, #120]	; (8004530 <Digit_clock_Init+0x1b0>)
 80044b8:	f001 f83a 	bl	8005530 <Max7219_struct_init>
	//	max7219_test_LED( &h1_max7219 , 300 ) ;
	max7219_init(&h1_max7219, DECODE_MODE, INTENSITY, DISPLAY_DIGIT, WORK_MODE);
 80044bc:	2301      	movs	r3, #1
 80044be:	9300      	str	r3, [sp, #0]
 80044c0:	2307      	movs	r3, #7
 80044c2:	2202      	movs	r2, #2
 80044c4:	2100      	movs	r1, #0
 80044c6:	481a      	ldr	r0, [pc, #104]	; (8004530 <Digit_clock_Init+0x1b0>)
 80044c8:	f001 f847 	bl	800555a <max7219_init>
	max7219_show_time( &h1_max7219 , 100 + soft_version_arr_int[0] , (soft_version_arr_int[1]*10 + soft_version_arr_int[2]) ) ;
 80044cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044ce:	b2db      	uxtb	r3, r3
 80044d0:	3364      	adds	r3, #100	; 0x64
 80044d2:	b2d9      	uxtb	r1, r3
 80044d4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	461a      	mov	r2, r3
 80044da:	0092      	lsls	r2, r2, #2
 80044dc:	4413      	add	r3, r2
 80044de:	005b      	lsls	r3, r3, #1
 80044e0:	b2da      	uxtb	r2, r3
 80044e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044e4:	b2db      	uxtb	r3, r3
 80044e6:	4413      	add	r3, r2
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	461a      	mov	r2, r3
 80044ec:	4810      	ldr	r0, [pc, #64]	; (8004530 <Digit_clock_Init+0x1b0>)
 80044ee:	f001 f907 	bl	8005700 <max7219_show_time>

	HAL_GPIO_TogglePin( LED_RED_GPIO_Port , LED_RED_Pin ) ;
 80044f2:	2101      	movs	r1, #1
 80044f4:	480f      	ldr	r0, [pc, #60]	; (8004534 <Digit_clock_Init+0x1b4>)
 80044f6:	f7fd fa57 	bl	80019a8 <HAL_GPIO_TogglePin>
	HAL_IWDG_Refresh( &hiwdg ) ;
 80044fa:	480f      	ldr	r0, [pc, #60]	; (8004538 <Digit_clock_Init+0x1b8>)
 80044fc:	f7fe fd5e 	bl	8002fbc <HAL_IWDG_Refresh>
}
 8004500:	bf00      	nop
 8004502:	3784      	adds	r7, #132	; 0x84
 8004504:	46bd      	mov	sp, r7
 8004506:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004508:	08007150 	.word	0x08007150
 800450c:	20000178 	.word	0x20000178
 8004510:	08007188 	.word	0x08007188
 8004514:	08007194 	.word	0x08007194
 8004518:	080071a0 	.word	0x080071a0
 800451c:	080071b8 	.word	0x080071b8
 8004520:	200000bc 	.word	0x200000bc
 8004524:	080071dc 	.word	0x080071dc
 8004528:	40010800 	.word	0x40010800
 800452c:	2000011c 	.word	0x2000011c
 8004530:	200001c0 	.word	0x200001c0
 8004534:	40010c00 	.word	0x40010c00
 8004538:	20000110 	.word	0x20000110

0800453c <Digit_clock_Main>:
//***************************************************************************

void Digit_clock_Main (void) {
 800453c:	b580      	push	{r7, lr}
 800453e:	b0a4      	sub	sp, #144	; 0x90
 8004540:	af02      	add	r7, sp, #8
	char DataChar[100];
	DS3231_TimeTypeDef		TimeSt ;
	DS3231_DateTypeDef	 	DateSt ;

	if ( button_u8 > 0 ) {
 8004542:	4b8d      	ldr	r3, [pc, #564]	; (8004778 <Digit_clock_Main+0x23c>)
 8004544:	781b      	ldrb	r3, [r3, #0]
 8004546:	2b00      	cmp	r3, #0
 8004548:	f000 8141 	beq.w	80047ce <Digit_clock_Main+0x292>

		_beeper( BEEPER_DELAY ) ;
 800454c:	2032      	movs	r0, #50	; 0x32
 800454e:	f000 fa09 	bl	8004964 <_beeper>
		ds3231_GetTime( ADR_I2C_DS3231, &TimeSt ) ;
 8004552:	f107 0318 	add.w	r3, r7, #24
 8004556:	4619      	mov	r1, r3
 8004558:	2068      	movs	r0, #104	; 0x68
 800455a:	f000 fc45 	bl	8004de8 <ds3231_GetTime>
		ds3231_GetDate( ADR_I2C_DS3231, &DateSt ) ;
 800455e:	f107 0314 	add.w	r3, r7, #20
 8004562:	4619      	mov	r1, r3
 8004564:	2068      	movs	r0, #104	; 0x68
 8004566:	f000 fc8e 	bl	8004e86 <ds3231_GetDate>

		if ( button_u8 == 1 ) {
 800456a:	4b83      	ldr	r3, [pc, #524]	; (8004778 <Digit_clock_Main+0x23c>)
 800456c:	781b      	ldrb	r3, [r3, #0]
 800456e:	2b01      	cmp	r3, #1
 8004570:	d115      	bne.n	800459e <Digit_clock_Main+0x62>
			if ( TimeSt.Hours >= 24 ) {
 8004572:	7e3b      	ldrb	r3, [r7, #24]
 8004574:	2b17      	cmp	r3, #23
 8004576:	d902      	bls.n	800457e <Digit_clock_Main+0x42>
				TimeSt.Hours = 0 ;
 8004578:	2300      	movs	r3, #0
 800457a:	763b      	strb	r3, [r7, #24]
 800457c:	e003      	b.n	8004586 <Digit_clock_Main+0x4a>
			} else {
				TimeSt.Hours++ ;
 800457e:	7e3b      	ldrb	r3, [r7, #24]
 8004580:	3301      	adds	r3, #1
 8004582:	b2db      	uxtb	r3, r3
 8004584:	763b      	strb	r3, [r7, #24]
			}
			ds3231_SetTime( ADR_I2C_DS3231, &TimeSt ) ;
 8004586:	f107 0318 	add.w	r3, r7, #24
 800458a:	4619      	mov	r1, r3
 800458c:	2068      	movs	r0, #104	; 0x68
 800458e:	f000 fce1 	bl	8004f54 <ds3231_SetTime>
			max7219_show_time( &h1_max7219 , TimeSt.Hours , TimeSt.Minutes ) ;
 8004592:	7e3b      	ldrb	r3, [r7, #24]
 8004594:	7e7a      	ldrb	r2, [r7, #25]
 8004596:	4619      	mov	r1, r3
 8004598:	4878      	ldr	r0, [pc, #480]	; (800477c <Digit_clock_Main+0x240>)
 800459a:	f001 f8b1 	bl	8005700 <max7219_show_time>
		}

		if ( button_u8 == 2 ) {
 800459e:	4b76      	ldr	r3, [pc, #472]	; (8004778 <Digit_clock_Main+0x23c>)
 80045a0:	781b      	ldrb	r3, [r3, #0]
 80045a2:	2b02      	cmp	r3, #2
 80045a4:	d115      	bne.n	80045d2 <Digit_clock_Main+0x96>
			if ( TimeSt.Hours == 0 ) {
 80045a6:	7e3b      	ldrb	r3, [r7, #24]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d102      	bne.n	80045b2 <Digit_clock_Main+0x76>
				TimeSt.Hours = 23 ;
 80045ac:	2317      	movs	r3, #23
 80045ae:	763b      	strb	r3, [r7, #24]
 80045b0:	e003      	b.n	80045ba <Digit_clock_Main+0x7e>
			} else {
				TimeSt.Hours-- ;
 80045b2:	7e3b      	ldrb	r3, [r7, #24]
 80045b4:	3b01      	subs	r3, #1
 80045b6:	b2db      	uxtb	r3, r3
 80045b8:	763b      	strb	r3, [r7, #24]
			}
			ds3231_SetTime( ADR_I2C_DS3231, &TimeSt ) ;
 80045ba:	f107 0318 	add.w	r3, r7, #24
 80045be:	4619      	mov	r1, r3
 80045c0:	2068      	movs	r0, #104	; 0x68
 80045c2:	f000 fcc7 	bl	8004f54 <ds3231_SetTime>
			max7219_show_time( &h1_max7219 , TimeSt.Hours , TimeSt.Minutes ) ;
 80045c6:	7e3b      	ldrb	r3, [r7, #24]
 80045c8:	7e7a      	ldrb	r2, [r7, #25]
 80045ca:	4619      	mov	r1, r3
 80045cc:	486b      	ldr	r0, [pc, #428]	; (800477c <Digit_clock_Main+0x240>)
 80045ce:	f001 f897 	bl	8005700 <max7219_show_time>
		}

		if ( button_u8 == 3 ) {
 80045d2:	4b69      	ldr	r3, [pc, #420]	; (8004778 <Digit_clock_Main+0x23c>)
 80045d4:	781b      	ldrb	r3, [r3, #0]
 80045d6:	2b03      	cmp	r3, #3
 80045d8:	f040 808b 	bne.w	80046f2 <Digit_clock_Main+0x1b6>
			if ( Alarm_flag == 1 ) {
 80045dc:	4b68      	ldr	r3, [pc, #416]	; (8004780 <Digit_clock_Main+0x244>)
 80045de:	781b      	ldrb	r3, [r3, #0]
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d12d      	bne.n	8004640 <Digit_clock_Main+0x104>
				AlarmHour = AlarmHour + ALARM_PERIOD_HOUR ;
 80045e4:	4b67      	ldr	r3, [pc, #412]	; (8004784 <Digit_clock_Main+0x248>)
 80045e6:	781a      	ldrb	r2, [r3, #0]
 80045e8:	4b66      	ldr	r3, [pc, #408]	; (8004784 <Digit_clock_Main+0x248>)
 80045ea:	701a      	strb	r2, [r3, #0]
				if ( AlarmHour >= 24 ) {
 80045ec:	4b65      	ldr	r3, [pc, #404]	; (8004784 <Digit_clock_Main+0x248>)
 80045ee:	781b      	ldrb	r3, [r3, #0]
 80045f0:	2b17      	cmp	r3, #23
 80045f2:	d905      	bls.n	8004600 <Digit_clock_Main+0xc4>
					AlarmHour = AlarmHour - 24 ;
 80045f4:	4b63      	ldr	r3, [pc, #396]	; (8004784 <Digit_clock_Main+0x248>)
 80045f6:	781b      	ldrb	r3, [r3, #0]
 80045f8:	3b18      	subs	r3, #24
 80045fa:	b2da      	uxtb	r2, r3
 80045fc:	4b61      	ldr	r3, [pc, #388]	; (8004784 <Digit_clock_Main+0x248>)
 80045fe:	701a      	strb	r2, [r3, #0]
				}
				AlarmMin  = AlarmMin + ALARM_PERIOD_MIN ;
 8004600:	4b61      	ldr	r3, [pc, #388]	; (8004788 <Digit_clock_Main+0x24c>)
 8004602:	781b      	ldrb	r3, [r3, #0]
 8004604:	3314      	adds	r3, #20
 8004606:	b2da      	uxtb	r2, r3
 8004608:	4b5f      	ldr	r3, [pc, #380]	; (8004788 <Digit_clock_Main+0x24c>)
 800460a:	701a      	strb	r2, [r3, #0]
				if ( AlarmMin >= 60 ) {
 800460c:	4b5e      	ldr	r3, [pc, #376]	; (8004788 <Digit_clock_Main+0x24c>)
 800460e:	781b      	ldrb	r3, [r3, #0]
 8004610:	2b3b      	cmp	r3, #59	; 0x3b
 8004612:	d915      	bls.n	8004640 <Digit_clock_Main+0x104>
					AlarmMin = AlarmMin - 60 ;
 8004614:	4b5c      	ldr	r3, [pc, #368]	; (8004788 <Digit_clock_Main+0x24c>)
 8004616:	781b      	ldrb	r3, [r3, #0]
 8004618:	3b3c      	subs	r3, #60	; 0x3c
 800461a:	b2da      	uxtb	r2, r3
 800461c:	4b5a      	ldr	r3, [pc, #360]	; (8004788 <Digit_clock_Main+0x24c>)
 800461e:	701a      	strb	r2, [r3, #0]
					AlarmHour++ ;
 8004620:	4b58      	ldr	r3, [pc, #352]	; (8004784 <Digit_clock_Main+0x248>)
 8004622:	781b      	ldrb	r3, [r3, #0]
 8004624:	3301      	adds	r3, #1
 8004626:	b2da      	uxtb	r2, r3
 8004628:	4b56      	ldr	r3, [pc, #344]	; (8004784 <Digit_clock_Main+0x248>)
 800462a:	701a      	strb	r2, [r3, #0]
					if ( AlarmHour >= 24 ) {
 800462c:	4b55      	ldr	r3, [pc, #340]	; (8004784 <Digit_clock_Main+0x248>)
 800462e:	781b      	ldrb	r3, [r3, #0]
 8004630:	2b17      	cmp	r3, #23
 8004632:	d905      	bls.n	8004640 <Digit_clock_Main+0x104>
						AlarmHour = AlarmHour - 24 ;
 8004634:	4b53      	ldr	r3, [pc, #332]	; (8004784 <Digit_clock_Main+0x248>)
 8004636:	781b      	ldrb	r3, [r3, #0]
 8004638:	3b18      	subs	r3, #24
 800463a:	b2da      	uxtb	r2, r3
 800463c:	4b51      	ldr	r3, [pc, #324]	; (8004784 <Digit_clock_Main+0x248>)
 800463e:	701a      	strb	r2, [r3, #0]
					}
				}
			}

			if ( Alarm_flag == 0 ) {
 8004640:	4b4f      	ldr	r3, [pc, #316]	; (8004780 <Digit_clock_Main+0x244>)
 8004642:	781b      	ldrb	r3, [r3, #0]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d12e      	bne.n	80046a6 <Digit_clock_Main+0x16a>
				Alarm_flag = 1 ;
 8004648:	4b4d      	ldr	r3, [pc, #308]	; (8004780 <Digit_clock_Main+0x244>)
 800464a:	2201      	movs	r2, #1
 800464c:	701a      	strb	r2, [r3, #0]

				AlarmHour = TimeSt.Hours + ALARM_PERIOD_HOUR ;
 800464e:	7e3a      	ldrb	r2, [r7, #24]
 8004650:	4b4c      	ldr	r3, [pc, #304]	; (8004784 <Digit_clock_Main+0x248>)
 8004652:	701a      	strb	r2, [r3, #0]
				if ( AlarmHour >= 24 ) {
 8004654:	4b4b      	ldr	r3, [pc, #300]	; (8004784 <Digit_clock_Main+0x248>)
 8004656:	781b      	ldrb	r3, [r3, #0]
 8004658:	2b17      	cmp	r3, #23
 800465a:	d905      	bls.n	8004668 <Digit_clock_Main+0x12c>
					AlarmHour = AlarmHour - 24 ;
 800465c:	4b49      	ldr	r3, [pc, #292]	; (8004784 <Digit_clock_Main+0x248>)
 800465e:	781b      	ldrb	r3, [r3, #0]
 8004660:	3b18      	subs	r3, #24
 8004662:	b2da      	uxtb	r2, r3
 8004664:	4b47      	ldr	r3, [pc, #284]	; (8004784 <Digit_clock_Main+0x248>)
 8004666:	701a      	strb	r2, [r3, #0]
				}

				AlarmMin  = TimeSt.Minutes + ALARM_PERIOD_MIN ;
 8004668:	7e7b      	ldrb	r3, [r7, #25]
 800466a:	3314      	adds	r3, #20
 800466c:	b2da      	uxtb	r2, r3
 800466e:	4b46      	ldr	r3, [pc, #280]	; (8004788 <Digit_clock_Main+0x24c>)
 8004670:	701a      	strb	r2, [r3, #0]
				if ( AlarmMin >= 60 ) {
 8004672:	4b45      	ldr	r3, [pc, #276]	; (8004788 <Digit_clock_Main+0x24c>)
 8004674:	781b      	ldrb	r3, [r3, #0]
 8004676:	2b3b      	cmp	r3, #59	; 0x3b
 8004678:	d915      	bls.n	80046a6 <Digit_clock_Main+0x16a>
					AlarmMin = AlarmMin - 60 ;
 800467a:	4b43      	ldr	r3, [pc, #268]	; (8004788 <Digit_clock_Main+0x24c>)
 800467c:	781b      	ldrb	r3, [r3, #0]
 800467e:	3b3c      	subs	r3, #60	; 0x3c
 8004680:	b2da      	uxtb	r2, r3
 8004682:	4b41      	ldr	r3, [pc, #260]	; (8004788 <Digit_clock_Main+0x24c>)
 8004684:	701a      	strb	r2, [r3, #0]
					AlarmHour++ ;
 8004686:	4b3f      	ldr	r3, [pc, #252]	; (8004784 <Digit_clock_Main+0x248>)
 8004688:	781b      	ldrb	r3, [r3, #0]
 800468a:	3301      	adds	r3, #1
 800468c:	b2da      	uxtb	r2, r3
 800468e:	4b3d      	ldr	r3, [pc, #244]	; (8004784 <Digit_clock_Main+0x248>)
 8004690:	701a      	strb	r2, [r3, #0]
					if ( AlarmHour >= 24 ) {
 8004692:	4b3c      	ldr	r3, [pc, #240]	; (8004784 <Digit_clock_Main+0x248>)
 8004694:	781b      	ldrb	r3, [r3, #0]
 8004696:	2b17      	cmp	r3, #23
 8004698:	d905      	bls.n	80046a6 <Digit_clock_Main+0x16a>
						AlarmHour = AlarmHour - 24 ;
 800469a:	4b3a      	ldr	r3, [pc, #232]	; (8004784 <Digit_clock_Main+0x248>)
 800469c:	781b      	ldrb	r3, [r3, #0]
 800469e:	3b18      	subs	r3, #24
 80046a0:	b2da      	uxtb	r2, r3
 80046a2:	4b38      	ldr	r3, [pc, #224]	; (8004784 <Digit_clock_Main+0x248>)
 80046a4:	701a      	strb	r2, [r3, #0]
					}
				}
			}

			max7219_show_time( &h1_max7219 , AlarmHour , AlarmMin ) ;
 80046a6:	4b37      	ldr	r3, [pc, #220]	; (8004784 <Digit_clock_Main+0x248>)
 80046a8:	781b      	ldrb	r3, [r3, #0]
 80046aa:	4a37      	ldr	r2, [pc, #220]	; (8004788 <Digit_clock_Main+0x24c>)
 80046ac:	7812      	ldrb	r2, [r2, #0]
 80046ae:	4619      	mov	r1, r3
 80046b0:	4832      	ldr	r0, [pc, #200]	; (800477c <Digit_clock_Main+0x240>)
 80046b2:	f001 f825 	bl	8005700 <max7219_show_time>
			sprintf( DataChar , "\r\nAlarm Set %02d:%02d:00\r\n",  AlarmHour , AlarmMin ) ;
 80046b6:	4b33      	ldr	r3, [pc, #204]	; (8004784 <Digit_clock_Main+0x248>)
 80046b8:	781b      	ldrb	r3, [r3, #0]
 80046ba:	461a      	mov	r2, r3
 80046bc:	4b32      	ldr	r3, [pc, #200]	; (8004788 <Digit_clock_Main+0x24c>)
 80046be:	781b      	ldrb	r3, [r3, #0]
 80046c0:	f107 001c 	add.w	r0, r7, #28
 80046c4:	4931      	ldr	r1, [pc, #196]	; (800478c <Digit_clock_Main+0x250>)
 80046c6:	f001 fb4b 	bl	8005d60 <siprintf>
			HAL_UART_Transmit( &huart1 , (uint8_t *)DataChar , strlen(DataChar) , 100 ) ;
 80046ca:	f107 031c 	add.w	r3, r7, #28
 80046ce:	4618      	mov	r0, r3
 80046d0:	f7fb fd3c 	bl	800014c <strlen>
 80046d4:	4603      	mov	r3, r0
 80046d6:	b29a      	uxth	r2, r3
 80046d8:	f107 011c 	add.w	r1, r7, #28
 80046dc:	2364      	movs	r3, #100	; 0x64
 80046de:	482c      	ldr	r0, [pc, #176]	; (8004790 <Digit_clock_Main+0x254>)
 80046e0:	f7ff fcbf 	bl	8004062 <HAL_UART_Transmit>
			HAL_Delay( 1000 ) ;
 80046e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80046e8:	f7fc fa38 	bl	8000b5c <HAL_Delay>
			HAL_IWDG_Refresh( &hiwdg ) ;
 80046ec:	4829      	ldr	r0, [pc, #164]	; (8004794 <Digit_clock_Main+0x258>)
 80046ee:	f7fe fc65 	bl	8002fbc <HAL_IWDG_Refresh>
		}

		if ( button_u8 == 4 ) {
 80046f2:	4b21      	ldr	r3, [pc, #132]	; (8004778 <Digit_clock_Main+0x23c>)
 80046f4:	781b      	ldrb	r3, [r3, #0]
 80046f6:	2b04      	cmp	r3, #4
 80046f8:	d11a      	bne.n	8004730 <Digit_clock_Main+0x1f4>
			Alarm_flag = 0 ;
 80046fa:	4b21      	ldr	r3, [pc, #132]	; (8004780 <Digit_clock_Main+0x244>)
 80046fc:	2200      	movs	r2, #0
 80046fe:	701a      	strb	r2, [r3, #0]
			max7219_show_time( &h1_max7219 , 00 , 00 ) ;
 8004700:	2200      	movs	r2, #0
 8004702:	2100      	movs	r1, #0
 8004704:	481d      	ldr	r0, [pc, #116]	; (800477c <Digit_clock_Main+0x240>)
 8004706:	f000 fffb 	bl	8005700 <max7219_show_time>
			sprintf( DataChar , "\r\nAlarm Off\r\n" ) ;
 800470a:	f107 031c 	add.w	r3, r7, #28
 800470e:	4922      	ldr	r1, [pc, #136]	; (8004798 <Digit_clock_Main+0x25c>)
 8004710:	4618      	mov	r0, r3
 8004712:	f001 fb25 	bl	8005d60 <siprintf>
			HAL_UART_Transmit( &huart1 , (uint8_t *)DataChar , strlen(DataChar) , 100 ) ;
 8004716:	f107 031c 	add.w	r3, r7, #28
 800471a:	4618      	mov	r0, r3
 800471c:	f7fb fd16 	bl	800014c <strlen>
 8004720:	4603      	mov	r3, r0
 8004722:	b29a      	uxth	r2, r3
 8004724:	f107 011c 	add.w	r1, r7, #28
 8004728:	2364      	movs	r3, #100	; 0x64
 800472a:	4819      	ldr	r0, [pc, #100]	; (8004790 <Digit_clock_Main+0x254>)
 800472c:	f7ff fc99 	bl	8004062 <HAL_UART_Transmit>
		}

		if ( button_u8 == 5 ) {
 8004730:	4b11      	ldr	r3, [pc, #68]	; (8004778 <Digit_clock_Main+0x23c>)
 8004732:	781b      	ldrb	r3, [r3, #0]
 8004734:	2b05      	cmp	r3, #5
 8004736:	d115      	bne.n	8004764 <Digit_clock_Main+0x228>
			if ( TimeSt.Minutes <=0 ) {
 8004738:	7e7b      	ldrb	r3, [r7, #25]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d102      	bne.n	8004744 <Digit_clock_Main+0x208>
				TimeSt.Minutes = 59 ;
 800473e:	233b      	movs	r3, #59	; 0x3b
 8004740:	767b      	strb	r3, [r7, #25]
 8004742:	e003      	b.n	800474c <Digit_clock_Main+0x210>
			} else {
				TimeSt.Minutes--;
 8004744:	7e7b      	ldrb	r3, [r7, #25]
 8004746:	3b01      	subs	r3, #1
 8004748:	b2db      	uxtb	r3, r3
 800474a:	767b      	strb	r3, [r7, #25]
			}
			ds3231_SetTime( ADR_I2C_DS3231, &TimeSt ) ;
 800474c:	f107 0318 	add.w	r3, r7, #24
 8004750:	4619      	mov	r1, r3
 8004752:	2068      	movs	r0, #104	; 0x68
 8004754:	f000 fbfe 	bl	8004f54 <ds3231_SetTime>
			max7219_show_time( &h1_max7219 , TimeSt.Hours , TimeSt.Minutes ) ;
 8004758:	7e3b      	ldrb	r3, [r7, #24]
 800475a:	7e7a      	ldrb	r2, [r7, #25]
 800475c:	4619      	mov	r1, r3
 800475e:	4807      	ldr	r0, [pc, #28]	; (800477c <Digit_clock_Main+0x240>)
 8004760:	f000 ffce 	bl	8005700 <max7219_show_time>
		}

		if ( button_u8 == 6 ) {
 8004764:	4b04      	ldr	r3, [pc, #16]	; (8004778 <Digit_clock_Main+0x23c>)
 8004766:	781b      	ldrb	r3, [r3, #0]
 8004768:	2b06      	cmp	r3, #6
 800476a:	d127      	bne.n	80047bc <Digit_clock_Main+0x280>
			if ( TimeSt.Minutes >= 60 ) {
 800476c:	7e7b      	ldrb	r3, [r7, #25]
 800476e:	2b3b      	cmp	r3, #59	; 0x3b
 8004770:	d914      	bls.n	800479c <Digit_clock_Main+0x260>
				TimeSt.Minutes = 0;
 8004772:	2300      	movs	r3, #0
 8004774:	767b      	strb	r3, [r7, #25]
 8004776:	e015      	b.n	80047a4 <Digit_clock_Main+0x268>
 8004778:	200001f4 	.word	0x200001f4
 800477c:	200001c0 	.word	0x200001c0
 8004780:	200001f5 	.word	0x200001f5
 8004784:	200001f6 	.word	0x200001f6
 8004788:	200001f7 	.word	0x200001f7
 800478c:	080071e0 	.word	0x080071e0
 8004790:	20000178 	.word	0x20000178
 8004794:	20000110 	.word	0x20000110
 8004798:	080071fc 	.word	0x080071fc
			} else {
				TimeSt.Minutes++ ;
 800479c:	7e7b      	ldrb	r3, [r7, #25]
 800479e:	3301      	adds	r3, #1
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	767b      	strb	r3, [r7, #25]
			}
			ds3231_SetTime( ADR_I2C_DS3231, &TimeSt ) ;
 80047a4:	f107 0318 	add.w	r3, r7, #24
 80047a8:	4619      	mov	r1, r3
 80047aa:	2068      	movs	r0, #104	; 0x68
 80047ac:	f000 fbd2 	bl	8004f54 <ds3231_SetTime>
			max7219_show_time( &h1_max7219 , TimeSt.Hours , TimeSt.Minutes ) ;
 80047b0:	7e3b      	ldrb	r3, [r7, #24]
 80047b2:	7e7a      	ldrb	r2, [r7, #25]
 80047b4:	4619      	mov	r1, r3
 80047b6:	4860      	ldr	r0, [pc, #384]	; (8004938 <Digit_clock_Main+0x3fc>)
 80047b8:	f000 ffa2 	bl	8005700 <max7219_show_time>
		}

		HAL_Delay( BUTTON_DELAY ) ;
 80047bc:	2064      	movs	r0, #100	; 0x64
 80047be:	f7fc f9cd 	bl	8000b5c <HAL_Delay>
		button_u8 = 0 ;
 80047c2:	4b5e      	ldr	r3, [pc, #376]	; (800493c <Digit_clock_Main+0x400>)
 80047c4:	2200      	movs	r2, #0
 80047c6:	701a      	strb	r2, [r3, #0]
		HAL_IWDG_Refresh( &hiwdg ) ;
 80047c8:	485d      	ldr	r0, [pc, #372]	; (8004940 <Digit_clock_Main+0x404>)
 80047ca:	f7fe fbf7 	bl	8002fbc <HAL_IWDG_Refresh>
	}

	if ( Ds3231_hard_alarm_flag_Status() == 1 ) {
 80047ce:	f000 fc7f 	bl	80050d0 <Ds3231_hard_alarm_flag_Status>
 80047d2:	4603      	mov	r3, r0
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	f040 80aa 	bne.w	800492e <Digit_clock_Main+0x3f2>

		if ((	TimeSt.Hours	== AlarmHour)
 80047da:	7e3a      	ldrb	r2, [r7, #24]
 80047dc:	4b59      	ldr	r3, [pc, #356]	; (8004944 <Digit_clock_Main+0x408>)
 80047de:	781b      	ldrb	r3, [r3, #0]
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d111      	bne.n	8004808 <Digit_clock_Main+0x2cc>
			&&( TimeSt.Minutes	== AlarmMin	)
 80047e4:	7e7a      	ldrb	r2, [r7, #25]
 80047e6:	4b58      	ldr	r3, [pc, #352]	; (8004948 <Digit_clock_Main+0x40c>)
 80047e8:	781b      	ldrb	r3, [r3, #0]
 80047ea:	429a      	cmp	r2, r3
 80047ec:	d10c      	bne.n	8004808 <Digit_clock_Main+0x2cc>
			&&( Alarm_flag		== 1		)) {
 80047ee:	4b57      	ldr	r3, [pc, #348]	; (800494c <Digit_clock_Main+0x410>)
 80047f0:	781b      	ldrb	r3, [r3, #0]
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	d108      	bne.n	8004808 <Digit_clock_Main+0x2cc>
			_beeper( BEEPER_DELAY ) ;
 80047f6:	2032      	movs	r0, #50	; 0x32
 80047f8:	f000 f8b4 	bl	8004964 <_beeper>
			HAL_Delay( BUTTON_DELAY ) ;
 80047fc:	2064      	movs	r0, #100	; 0x64
 80047fe:	f7fc f9ad 	bl	8000b5c <HAL_Delay>
			_beeper( BEEPER_DELAY ) ;
 8004802:	2032      	movs	r0, #50	; 0x32
 8004804:	f000 f8ae 	bl	8004964 <_beeper>
		}

		char DataChar[20] ;
		sprintf(DataChar,"\r") ;
 8004808:	463b      	mov	r3, r7
 800480a:	4951      	ldr	r1, [pc, #324]	; (8004950 <Digit_clock_Main+0x414>)
 800480c:	4618      	mov	r0, r3
 800480e:	f001 faa7 	bl	8005d60 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t *)DataChar, strlen(DataChar), 100);
 8004812:	463b      	mov	r3, r7
 8004814:	4618      	mov	r0, r3
 8004816:	f7fb fc99 	bl	800014c <strlen>
 800481a:	4603      	mov	r3, r0
 800481c:	b29a      	uxth	r2, r3
 800481e:	4639      	mov	r1, r7
 8004820:	2364      	movs	r3, #100	; 0x64
 8004822:	484c      	ldr	r0, [pc, #304]	; (8004954 <Digit_clock_Main+0x418>)
 8004824:	f7ff fc1d 	bl	8004062 <HAL_UART_Transmit>

		uint32_t light_u32 = ADC1_GetValue(&hadc1, 1) 	;
 8004828:	2101      	movs	r1, #1
 800482a:	484b      	ldr	r0, [pc, #300]	; (8004958 <Digit_clock_Main+0x41c>)
 800482c:	f7ff fd84 	bl	8004338 <ADC1_GetValue>
 8004830:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
		max7219_LED_Intensity	intensity_u8 = Intensity_1 ;
 8004834:	2300      	movs	r3, #0
 8004836:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		if (( light_u32 < LIGHT_LEVEL_0 ))										intensity_u8 = Intensity_1	;
 800483a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800483e:	f640 52ab 	movw	r2, #3499	; 0xdab
 8004842:	4293      	cmp	r3, r2
 8004844:	d802      	bhi.n	800484c <Digit_clock_Main+0x310>
 8004846:	2300      	movs	r3, #0
 8004848:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		if (( light_u32 >= LIGHT_LEVEL_0 ) && ( light_u32 < LIGHT_LEVEL_1 ))	intensity_u8 = Intensity_3	;
 800484c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004850:	f640 52ab 	movw	r2, #3499	; 0xdab
 8004854:	4293      	cmp	r3, r2
 8004856:	d907      	bls.n	8004868 <Digit_clock_Main+0x32c>
 8004858:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800485c:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 8004860:	d202      	bcs.n	8004868 <Digit_clock_Main+0x32c>
 8004862:	2301      	movs	r3, #1
 8004864:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		if (( light_u32 >= LIGHT_LEVEL_1 ) && ( light_u32 < LIGHT_LEVEL_2 ))	intensity_u8 = Intensity_5	;
 8004868:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800486c:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 8004870:	d308      	bcc.n	8004884 <Digit_clock_Main+0x348>
 8004872:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004876:	f640 6273 	movw	r2, #3699	; 0xe73
 800487a:	4293      	cmp	r3, r2
 800487c:	d802      	bhi.n	8004884 <Digit_clock_Main+0x348>
 800487e:	2302      	movs	r3, #2
 8004880:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		if (( light_u32 >= LIGHT_LEVEL_2 ))										intensity_u8 = Intensity_7	;
 8004884:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004888:	f640 6273 	movw	r2, #3699	; 0xe73
 800488c:	4293      	cmp	r3, r2
 800488e:	d902      	bls.n	8004896 <Digit_clock_Main+0x35a>
 8004890:	2303      	movs	r3, #3
 8004892:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

		sprintf(DataChar,"L=%04i; I=%02d;  ", (int)light_u32 , (int)intensity_u8 ) ;
 8004896:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800489a:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800489e:	4638      	mov	r0, r7
 80048a0:	492e      	ldr	r1, [pc, #184]	; (800495c <Digit_clock_Main+0x420>)
 80048a2:	f001 fa5d 	bl	8005d60 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t *)DataChar, strlen(DataChar), 100);
 80048a6:	463b      	mov	r3, r7
 80048a8:	4618      	mov	r0, r3
 80048aa:	f7fb fc4f 	bl	800014c <strlen>
 80048ae:	4603      	mov	r3, r0
 80048b0:	b29a      	uxth	r2, r3
 80048b2:	4639      	mov	r1, r7
 80048b4:	2364      	movs	r3, #100	; 0x64
 80048b6:	4827      	ldr	r0, [pc, #156]	; (8004954 <Digit_clock_Main+0x418>)
 80048b8:	f7ff fbd3 	bl	8004062 <HAL_UART_Transmit>

		ds3231_GetTime( ADR_I2C_DS3231, &TimeSt ) ;
 80048bc:	f107 0318 	add.w	r3, r7, #24
 80048c0:	4619      	mov	r1, r3
 80048c2:	2068      	movs	r0, #104	; 0x68
 80048c4:	f000 fa90 	bl	8004de8 <ds3231_GetTime>
		ds3231_GetDate( ADR_I2C_DS3231, &DateSt ) ;
 80048c8:	f107 0314 	add.w	r3, r7, #20
 80048cc:	4619      	mov	r1, r3
 80048ce:	2068      	movs	r0, #104	; 0x68
 80048d0:	f000 fad9 	bl	8004e86 <ds3231_GetDate>
		ds3231_PrintDate_AllChar(	&DateSt, &huart1 ) ;
 80048d4:	f107 0314 	add.w	r3, r7, #20
 80048d8:	491e      	ldr	r1, [pc, #120]	; (8004954 <Digit_clock_Main+0x418>)
 80048da:	4618      	mov	r0, r3
 80048dc:	f000 f8ac 	bl	8004a38 <ds3231_PrintDate_AllChar>
		ds3231_PrintWeek_AllChar(	&DateSt, &huart1 ) ;
 80048e0:	f107 0314 	add.w	r3, r7, #20
 80048e4:	491b      	ldr	r1, [pc, #108]	; (8004954 <Digit_clock_Main+0x418>)
 80048e6:	4618      	mov	r0, r3
 80048e8:	f000 f982 	bl	8004bf0 <ds3231_PrintWeek_AllChar>
		ds3231_PrintTime( 			&TimeSt, &huart1 ) ;
 80048ec:	f107 0318 	add.w	r3, r7, #24
 80048f0:	4918      	ldr	r1, [pc, #96]	; (8004954 <Digit_clock_Main+0x418>)
 80048f2:	4618      	mov	r0, r3
 80048f4:	f000 f84e 	bl	8004994 <ds3231_PrintTime>

		HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin ) ;
 80048f8:	2101      	movs	r1, #1
 80048fa:	4819      	ldr	r0, [pc, #100]	; (8004960 <Digit_clock_Main+0x424>)
 80048fc:	f7fd f854 	bl	80019a8 <HAL_GPIO_TogglePin>
		//max7219_init(&h1_max7219, DECODE_MODE, INTENSITY, DISPLAY_DIGIT, WORK_MODE ) ;
		max7219_init(&h1_max7219, DECODE_MODE, intensity_u8, DISPLAY_DIGIT, WORK_MODE ) ;
 8004900:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 8004904:	2301      	movs	r3, #1
 8004906:	9300      	str	r3, [sp, #0]
 8004908:	2307      	movs	r3, #7
 800490a:	2100      	movs	r1, #0
 800490c:	480a      	ldr	r0, [pc, #40]	; (8004938 <Digit_clock_Main+0x3fc>)
 800490e:	f000 fe24 	bl	800555a <max7219_init>
		max7219_show_time( &h1_max7219 , TimeSt.Hours , TimeSt.Minutes ) ;
 8004912:	7e3b      	ldrb	r3, [r7, #24]
 8004914:	7e7a      	ldrb	r2, [r7, #25]
 8004916:	4619      	mov	r1, r3
 8004918:	4807      	ldr	r0, [pc, #28]	; (8004938 <Digit_clock_Main+0x3fc>)
 800491a:	f000 fef1 	bl	8005700 <max7219_show_time>

		ds3231_Alarm1_ClearStatusBit( ADR_I2C_DS3231 ) ;
 800491e:	2068      	movs	r0, #104	; 0x68
 8004920:	f000 fbb1 	bl	8005086 <ds3231_Alarm1_ClearStatusBit>
		Ds3231_hard_alarm_flag_Reset() ;
 8004924:	f000 fbc8 	bl	80050b8 <Ds3231_hard_alarm_flag_Reset>
		HAL_IWDG_Refresh( &hiwdg ) ;
 8004928:	4805      	ldr	r0, [pc, #20]	; (8004940 <Digit_clock_Main+0x404>)
 800492a:	f7fe fb47 	bl	8002fbc <HAL_IWDG_Refresh>
	}
}
 800492e:	bf00      	nop
 8004930:	3788      	adds	r7, #136	; 0x88
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}
 8004936:	bf00      	nop
 8004938:	200001c0 	.word	0x200001c0
 800493c:	200001f4 	.word	0x200001f4
 8004940:	20000110 	.word	0x20000110
 8004944:	200001f6 	.word	0x200001f6
 8004948:	200001f7 	.word	0x200001f7
 800494c:	200001f5 	.word	0x200001f5
 8004950:	0800720c 	.word	0x0800720c
 8004954:	20000178 	.word	0x20000178
 8004958:	2000008c 	.word	0x2000008c
 800495c:	08007210 	.word	0x08007210
 8004960:	40010c00 	.word	0x40010c00

08004964 <_beeper>:
**************************************************************************
*                           LOCAL FUNCTIONS
**************************************************************************
*/

void _beeper( uint32_t _time_u32 ) {
 8004964:	b580      	push	{r7, lr}
 8004966:	b082      	sub	sp, #8
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin( BEEPER_1_GPIO_Port , BEEPER_1_Pin , RESET ) ;
 800496c:	2200      	movs	r2, #0
 800496e:	2110      	movs	r1, #16
 8004970:	4807      	ldr	r0, [pc, #28]	; (8004990 <_beeper+0x2c>)
 8004972:	f7fd f801 	bl	8001978 <HAL_GPIO_WritePin>
	HAL_Delay( _time_u32 ) ;
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f7fc f8f0 	bl	8000b5c <HAL_Delay>
	HAL_GPIO_WritePin( BEEPER_1_GPIO_Port , BEEPER_1_Pin , SET ) ;
 800497c:	2201      	movs	r2, #1
 800497e:	2110      	movs	r1, #16
 8004980:	4803      	ldr	r0, [pc, #12]	; (8004990 <_beeper+0x2c>)
 8004982:	f7fc fff9 	bl	8001978 <HAL_GPIO_WritePin>
}
 8004986:	bf00      	nop
 8004988:	3708      	adds	r7, #8
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}
 800498e:	bf00      	nop
 8004990:	40010800 	.word	0x40010800

08004994 <ds3231_PrintTime>:
*                           GLOBAL FUNCTIONS
**************************************************************************
*/

void ds3231_PrintTime(	DS3231_TimeTypeDef 	*_timeSt,
						UART_HandleTypeDef	*_huart) {
 8004994:	b580      	push	{r7, lr}
 8004996:	b09e      	sub	sp, #120	; 0x78
 8004998:	af02      	add	r7, sp, #8
 800499a:	6078      	str	r0, [r7, #4]
 800499c:	6039      	str	r1, [r7, #0]

	char DataChar[100];
	sprintf(DataChar,"%02d:%02d:%02d ",_timeSt->Hours, _timeSt->Minutes, _timeSt->Seconds);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	781b      	ldrb	r3, [r3, #0]
 80049a2:	461a      	mov	r2, r3
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	785b      	ldrb	r3, [r3, #1]
 80049a8:	4619      	mov	r1, r3
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	789b      	ldrb	r3, [r3, #2]
 80049ae:	f107 000c 	add.w	r0, r7, #12
 80049b2:	9300      	str	r3, [sp, #0]
 80049b4:	460b      	mov	r3, r1
 80049b6:	490a      	ldr	r1, [pc, #40]	; (80049e0 <ds3231_PrintTime+0x4c>)
 80049b8:	f001 f9d2 	bl	8005d60 <siprintf>
	HAL_UART_Transmit(_huart, (uint8_t *)DataChar, strlen(DataChar), 100);
 80049bc:	f107 030c 	add.w	r3, r7, #12
 80049c0:	4618      	mov	r0, r3
 80049c2:	f7fb fbc3 	bl	800014c <strlen>
 80049c6:	4603      	mov	r3, r0
 80049c8:	b29a      	uxth	r2, r3
 80049ca:	f107 010c 	add.w	r1, r7, #12
 80049ce:	2364      	movs	r3, #100	; 0x64
 80049d0:	6838      	ldr	r0, [r7, #0]
 80049d2:	f7ff fb46 	bl	8004062 <HAL_UART_Transmit>
}
 80049d6:	bf00      	nop
 80049d8:	3770      	adds	r7, #112	; 0x70
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}
 80049de:	bf00      	nop
 80049e0:	08007224 	.word	0x08007224

080049e4 <ds3231_PrintDate>:
//************************************************************************

void ds3231_PrintDate(	DS3231_DateTypeDef		*_dateSt	,
						UART_HandleTypeDef		*_huart		) {
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b09e      	sub	sp, #120	; 0x78
 80049e8:	af02      	add	r7, sp, #8
 80049ea:	6078      	str	r0, [r7, #4]
 80049ec:	6039      	str	r1, [r7, #0]

	char DataChar[100];
	sprintf(DataChar,"%02d/%02d/%04d ", _dateSt->Date, 1 + _dateSt->Month, 2000 + _dateSt->Year);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	789b      	ldrb	r3, [r3, #2]
 80049f2:	4619      	mov	r1, r3
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	785b      	ldrb	r3, [r3, #1]
 80049f8:	1c5a      	adds	r2, r3, #1
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	781b      	ldrb	r3, [r3, #0]
 80049fe:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8004a02:	f107 000c 	add.w	r0, r7, #12
 8004a06:	9300      	str	r3, [sp, #0]
 8004a08:	4613      	mov	r3, r2
 8004a0a:	460a      	mov	r2, r1
 8004a0c:	4909      	ldr	r1, [pc, #36]	; (8004a34 <ds3231_PrintDate+0x50>)
 8004a0e:	f001 f9a7 	bl	8005d60 <siprintf>
	HAL_UART_Transmit(_huart, (uint8_t *)DataChar, strlen(DataChar), 100);
 8004a12:	f107 030c 	add.w	r3, r7, #12
 8004a16:	4618      	mov	r0, r3
 8004a18:	f7fb fb98 	bl	800014c <strlen>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	b29a      	uxth	r2, r3
 8004a20:	f107 010c 	add.w	r1, r7, #12
 8004a24:	2364      	movs	r3, #100	; 0x64
 8004a26:	6838      	ldr	r0, [r7, #0]
 8004a28:	f7ff fb1b 	bl	8004062 <HAL_UART_Transmit>
}
 8004a2c:	bf00      	nop
 8004a2e:	3770      	adds	r7, #112	; 0x70
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}
 8004a34:	08007234 	.word	0x08007234

08004a38 <ds3231_PrintDate_AllChar>:
	HAL_UART_Transmit(_huart, (uint8_t *)DataChar, strlen(DataChar), 100);
}
//************************************************************************

void ds3231_PrintDate_AllChar(	DS3231_DateTypeDef		*_dateSt	,
								UART_HandleTypeDef		*_huart		) {
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b09c      	sub	sp, #112	; 0x70
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
 8004a40:	6039      	str	r1, [r7, #0]

	char DataChar[100];
	sprintf(DataChar,"%02d-", _dateSt->Date );
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	789b      	ldrb	r3, [r3, #2]
 8004a46:	461a      	mov	r2, r3
 8004a48:	f107 030c 	add.w	r3, r7, #12
 8004a4c:	4959      	ldr	r1, [pc, #356]	; (8004bb4 <ds3231_PrintDate_AllChar+0x17c>)
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f001 f986 	bl	8005d60 <siprintf>
	HAL_UART_Transmit(_huart, (uint8_t *)DataChar, strlen(DataChar), 100);
 8004a54:	f107 030c 	add.w	r3, r7, #12
 8004a58:	4618      	mov	r0, r3
 8004a5a:	f7fb fb77 	bl	800014c <strlen>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	b29a      	uxth	r2, r3
 8004a62:	f107 010c 	add.w	r1, r7, #12
 8004a66:	2364      	movs	r3, #100	; 0x64
 8004a68:	6838      	ldr	r0, [r7, #0]
 8004a6a:	f7ff fafa 	bl	8004062 <HAL_UART_Transmit>

	switch(_dateSt->Month) {
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	785b      	ldrb	r3, [r3, #1]
 8004a72:	2b0b      	cmp	r3, #11
 8004a74:	d86e      	bhi.n	8004b54 <ds3231_PrintDate_AllChar+0x11c>
 8004a76:	a201      	add	r2, pc, #4	; (adr r2, 8004a7c <ds3231_PrintDate_AllChar+0x44>)
 8004a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a7c:	08004aad 	.word	0x08004aad
 8004a80:	08004abb 	.word	0x08004abb
 8004a84:	08004ac9 	.word	0x08004ac9
 8004a88:	08004ad7 	.word	0x08004ad7
 8004a8c:	08004ae5 	.word	0x08004ae5
 8004a90:	08004af3 	.word	0x08004af3
 8004a94:	08004b01 	.word	0x08004b01
 8004a98:	08004b0f 	.word	0x08004b0f
 8004a9c:	08004b1d 	.word	0x08004b1d
 8004aa0:	08004b2b 	.word	0x08004b2b
 8004aa4:	08004b39 	.word	0x08004b39
 8004aa8:	08004b47 	.word	0x08004b47
		case   0: sprintf( DataChar , "January"		) ;		break ;
 8004aac:	f107 030c 	add.w	r3, r7, #12
 8004ab0:	4941      	ldr	r1, [pc, #260]	; (8004bb8 <ds3231_PrintDate_AllChar+0x180>)
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f001 f954 	bl	8005d60 <siprintf>
 8004ab8:	e053      	b.n	8004b62 <ds3231_PrintDate_AllChar+0x12a>
		case   1: sprintf( DataChar , "February"	) ;		break ;
 8004aba:	f107 030c 	add.w	r3, r7, #12
 8004abe:	493f      	ldr	r1, [pc, #252]	; (8004bbc <ds3231_PrintDate_AllChar+0x184>)
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	f001 f94d 	bl	8005d60 <siprintf>
 8004ac6:	e04c      	b.n	8004b62 <ds3231_PrintDate_AllChar+0x12a>
		case   2: sprintf( DataChar , "March"		) ;		break ;
 8004ac8:	f107 030c 	add.w	r3, r7, #12
 8004acc:	493c      	ldr	r1, [pc, #240]	; (8004bc0 <ds3231_PrintDate_AllChar+0x188>)
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f001 f946 	bl	8005d60 <siprintf>
 8004ad4:	e045      	b.n	8004b62 <ds3231_PrintDate_AllChar+0x12a>
		case   3: sprintf( DataChar , "April"		) ;		break ;
 8004ad6:	f107 030c 	add.w	r3, r7, #12
 8004ada:	493a      	ldr	r1, [pc, #232]	; (8004bc4 <ds3231_PrintDate_AllChar+0x18c>)
 8004adc:	4618      	mov	r0, r3
 8004ade:	f001 f93f 	bl	8005d60 <siprintf>
 8004ae2:	e03e      	b.n	8004b62 <ds3231_PrintDate_AllChar+0x12a>
		case   4: sprintf( DataChar , "May"			) ;		break ;
 8004ae4:	f107 030c 	add.w	r3, r7, #12
 8004ae8:	4937      	ldr	r1, [pc, #220]	; (8004bc8 <ds3231_PrintDate_AllChar+0x190>)
 8004aea:	4618      	mov	r0, r3
 8004aec:	f001 f938 	bl	8005d60 <siprintf>
 8004af0:	e037      	b.n	8004b62 <ds3231_PrintDate_AllChar+0x12a>
		case   5: sprintf( DataChar , "June"		) ;		break ;
 8004af2:	f107 030c 	add.w	r3, r7, #12
 8004af6:	4935      	ldr	r1, [pc, #212]	; (8004bcc <ds3231_PrintDate_AllChar+0x194>)
 8004af8:	4618      	mov	r0, r3
 8004afa:	f001 f931 	bl	8005d60 <siprintf>
 8004afe:	e030      	b.n	8004b62 <ds3231_PrintDate_AllChar+0x12a>
		case   6: sprintf( DataChar , "July"		) ;		break ;
 8004b00:	f107 030c 	add.w	r3, r7, #12
 8004b04:	4932      	ldr	r1, [pc, #200]	; (8004bd0 <ds3231_PrintDate_AllChar+0x198>)
 8004b06:	4618      	mov	r0, r3
 8004b08:	f001 f92a 	bl	8005d60 <siprintf>
 8004b0c:	e029      	b.n	8004b62 <ds3231_PrintDate_AllChar+0x12a>
		case   7: sprintf( DataChar , "August"		) ;		break ;
 8004b0e:	f107 030c 	add.w	r3, r7, #12
 8004b12:	4930      	ldr	r1, [pc, #192]	; (8004bd4 <ds3231_PrintDate_AllChar+0x19c>)
 8004b14:	4618      	mov	r0, r3
 8004b16:	f001 f923 	bl	8005d60 <siprintf>
 8004b1a:	e022      	b.n	8004b62 <ds3231_PrintDate_AllChar+0x12a>
		case   8: sprintf( DataChar , "September"	) ;		break ;
 8004b1c:	f107 030c 	add.w	r3, r7, #12
 8004b20:	492d      	ldr	r1, [pc, #180]	; (8004bd8 <ds3231_PrintDate_AllChar+0x1a0>)
 8004b22:	4618      	mov	r0, r3
 8004b24:	f001 f91c 	bl	8005d60 <siprintf>
 8004b28:	e01b      	b.n	8004b62 <ds3231_PrintDate_AllChar+0x12a>
		case   9: sprintf( DataChar , "October"		) ;		break ;
 8004b2a:	f107 030c 	add.w	r3, r7, #12
 8004b2e:	492b      	ldr	r1, [pc, #172]	; (8004bdc <ds3231_PrintDate_AllChar+0x1a4>)
 8004b30:	4618      	mov	r0, r3
 8004b32:	f001 f915 	bl	8005d60 <siprintf>
 8004b36:	e014      	b.n	8004b62 <ds3231_PrintDate_AllChar+0x12a>
		case  10: sprintf( DataChar , "November"	) ;		break ;
 8004b38:	f107 030c 	add.w	r3, r7, #12
 8004b3c:	4928      	ldr	r1, [pc, #160]	; (8004be0 <ds3231_PrintDate_AllChar+0x1a8>)
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f001 f90e 	bl	8005d60 <siprintf>
 8004b44:	e00d      	b.n	8004b62 <ds3231_PrintDate_AllChar+0x12a>
		case  11: sprintf( DataChar , "December"	) ;		break ;
 8004b46:	f107 030c 	add.w	r3, r7, #12
 8004b4a:	4926      	ldr	r1, [pc, #152]	; (8004be4 <ds3231_PrintDate_AllChar+0x1ac>)
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	f001 f907 	bl	8005d60 <siprintf>
 8004b52:	e006      	b.n	8004b62 <ds3231_PrintDate_AllChar+0x12a>
		default : sprintf( DataChar , "ovf"			) ;		break ;
 8004b54:	f107 030c 	add.w	r3, r7, #12
 8004b58:	4923      	ldr	r1, [pc, #140]	; (8004be8 <ds3231_PrintDate_AllChar+0x1b0>)
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f001 f900 	bl	8005d60 <siprintf>
 8004b60:	bf00      	nop
		} // end switch Date.ST
	HAL_UART_Transmit(_huart, (uint8_t *)DataChar, strlen(DataChar), 100);
 8004b62:	f107 030c 	add.w	r3, r7, #12
 8004b66:	4618      	mov	r0, r3
 8004b68:	f7fb faf0 	bl	800014c <strlen>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	b29a      	uxth	r2, r3
 8004b70:	f107 010c 	add.w	r1, r7, #12
 8004b74:	2364      	movs	r3, #100	; 0x64
 8004b76:	6838      	ldr	r0, [r7, #0]
 8004b78:	f7ff fa73 	bl	8004062 <HAL_UART_Transmit>

	sprintf(DataChar,"-%04d ", 2000+ _dateSt->Year);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	781b      	ldrb	r3, [r3, #0]
 8004b80:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
 8004b84:	f107 030c 	add.w	r3, r7, #12
 8004b88:	4918      	ldr	r1, [pc, #96]	; (8004bec <ds3231_PrintDate_AllChar+0x1b4>)
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f001 f8e8 	bl	8005d60 <siprintf>
	HAL_UART_Transmit(_huart, (uint8_t *)DataChar, strlen(DataChar), 100);
 8004b90:	f107 030c 	add.w	r3, r7, #12
 8004b94:	4618      	mov	r0, r3
 8004b96:	f7fb fad9 	bl	800014c <strlen>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	b29a      	uxth	r2, r3
 8004b9e:	f107 010c 	add.w	r1, r7, #12
 8004ba2:	2364      	movs	r3, #100	; 0x64
 8004ba4:	6838      	ldr	r0, [r7, #0]
 8004ba6:	f7ff fa5c 	bl	8004062 <HAL_UART_Transmit>
}
 8004baa:	bf00      	nop
 8004bac:	3770      	adds	r7, #112	; 0x70
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}
 8004bb2:	bf00      	nop
 8004bb4:	08007244 	.word	0x08007244
 8004bb8:	08007288 	.word	0x08007288
 8004bbc:	08007290 	.word	0x08007290
 8004bc0:	0800729c 	.word	0x0800729c
 8004bc4:	080072a4 	.word	0x080072a4
 8004bc8:	080072ac 	.word	0x080072ac
 8004bcc:	080072b0 	.word	0x080072b0
 8004bd0:	080072b8 	.word	0x080072b8
 8004bd4:	080072c0 	.word	0x080072c0
 8004bd8:	080072c8 	.word	0x080072c8
 8004bdc:	080072d4 	.word	0x080072d4
 8004be0:	080072dc 	.word	0x080072dc
 8004be4:	080072e8 	.word	0x080072e8
 8004be8:	0800727c 	.word	0x0800727c
 8004bec:	08007280 	.word	0x08007280

08004bf0 <ds3231_PrintWeek_AllChar>:
//************************************************************************
void ds3231_PrintWeek_AllChar(	DS3231_DateTypeDef 	*_dateSt	,
								UART_HandleTypeDef 	*_huart		) {
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b09c      	sub	sp, #112	; 0x70
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
 8004bf8:	6039      	str	r1, [r7, #0]

	char DataChar[100] ;
	switch(_dateSt->WeekDay) {
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	78db      	ldrb	r3, [r3, #3]
 8004bfe:	2b07      	cmp	r3, #7
 8004c00:	d84a      	bhi.n	8004c98 <ds3231_PrintWeek_AllChar+0xa8>
 8004c02:	a201      	add	r2, pc, #4	; (adr r2, 8004c08 <ds3231_PrintWeek_AllChar+0x18>)
 8004c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c08:	08004c29 	.word	0x08004c29
 8004c0c:	08004c37 	.word	0x08004c37
 8004c10:	08004c45 	.word	0x08004c45
 8004c14:	08004c53 	.word	0x08004c53
 8004c18:	08004c61 	.word	0x08004c61
 8004c1c:	08004c6f 	.word	0x08004c6f
 8004c20:	08004c7d 	.word	0x08004c7d
 8004c24:	08004c8b 	.word	0x08004c8b
		case  0: sprintf( DataChar , "Sunday    "	) ;		break ;
 8004c28:	f107 030c 	add.w	r3, r7, #12
 8004c2c:	4926      	ldr	r1, [pc, #152]	; (8004cc8 <ds3231_PrintWeek_AllChar+0xd8>)
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f001 f896 	bl	8005d60 <siprintf>
 8004c34:	e037      	b.n	8004ca6 <ds3231_PrintWeek_AllChar+0xb6>
		case  1: sprintf( DataChar , "Monday    "	) ;		break ;
 8004c36:	f107 030c 	add.w	r3, r7, #12
 8004c3a:	4924      	ldr	r1, [pc, #144]	; (8004ccc <ds3231_PrintWeek_AllChar+0xdc>)
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	f001 f88f 	bl	8005d60 <siprintf>
 8004c42:	e030      	b.n	8004ca6 <ds3231_PrintWeek_AllChar+0xb6>
		case  2: sprintf( DataChar , "Tuesday   "	) ;		break ;
 8004c44:	f107 030c 	add.w	r3, r7, #12
 8004c48:	4921      	ldr	r1, [pc, #132]	; (8004cd0 <ds3231_PrintWeek_AllChar+0xe0>)
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f001 f888 	bl	8005d60 <siprintf>
 8004c50:	e029      	b.n	8004ca6 <ds3231_PrintWeek_AllChar+0xb6>
		case  3: sprintf( DataChar , "Wednesday "	) ;		break ;
 8004c52:	f107 030c 	add.w	r3, r7, #12
 8004c56:	491f      	ldr	r1, [pc, #124]	; (8004cd4 <ds3231_PrintWeek_AllChar+0xe4>)
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f001 f881 	bl	8005d60 <siprintf>
 8004c5e:	e022      	b.n	8004ca6 <ds3231_PrintWeek_AllChar+0xb6>
		case  4: sprintf( DataChar , "Thursday  "	) ;		break ;
 8004c60:	f107 030c 	add.w	r3, r7, #12
 8004c64:	491c      	ldr	r1, [pc, #112]	; (8004cd8 <ds3231_PrintWeek_AllChar+0xe8>)
 8004c66:	4618      	mov	r0, r3
 8004c68:	f001 f87a 	bl	8005d60 <siprintf>
 8004c6c:	e01b      	b.n	8004ca6 <ds3231_PrintWeek_AllChar+0xb6>
		case  5: sprintf( DataChar , "Friday    "	) ;		break ;
 8004c6e:	f107 030c 	add.w	r3, r7, #12
 8004c72:	491a      	ldr	r1, [pc, #104]	; (8004cdc <ds3231_PrintWeek_AllChar+0xec>)
 8004c74:	4618      	mov	r0, r3
 8004c76:	f001 f873 	bl	8005d60 <siprintf>
 8004c7a:	e014      	b.n	8004ca6 <ds3231_PrintWeek_AllChar+0xb6>
		case  6: sprintf( DataChar , "Saturday  "	) ;		break ;
 8004c7c:	f107 030c 	add.w	r3, r7, #12
 8004c80:	4917      	ldr	r1, [pc, #92]	; (8004ce0 <ds3231_PrintWeek_AllChar+0xf0>)
 8004c82:	4618      	mov	r0, r3
 8004c84:	f001 f86c 	bl	8005d60 <siprintf>
 8004c88:	e00d      	b.n	8004ca6 <ds3231_PrintWeek_AllChar+0xb6>
		case  7: sprintf( DataChar , "Sunday    "	) ;		break ;
 8004c8a:	f107 030c 	add.w	r3, r7, #12
 8004c8e:	490e      	ldr	r1, [pc, #56]	; (8004cc8 <ds3231_PrintWeek_AllChar+0xd8>)
 8004c90:	4618      	mov	r0, r3
 8004c92:	f001 f865 	bl	8005d60 <siprintf>
 8004c96:	e006      	b.n	8004ca6 <ds3231_PrintWeek_AllChar+0xb6>
		default: sprintf( DataChar , "Out of day"	) ;		break ;
 8004c98:	f107 030c 	add.w	r3, r7, #12
 8004c9c:	4911      	ldr	r1, [pc, #68]	; (8004ce4 <ds3231_PrintWeek_AllChar+0xf4>)
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f001 f85e 	bl	8005d60 <siprintf>
 8004ca4:	bf00      	nop
		} // end switch Date.ST
	HAL_UART_Transmit(_huart, (uint8_t *)DataChar, strlen(DataChar), 100);
 8004ca6:	f107 030c 	add.w	r3, r7, #12
 8004caa:	4618      	mov	r0, r3
 8004cac:	f7fb fa4e 	bl	800014c <strlen>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	b29a      	uxth	r2, r3
 8004cb4:	f107 010c 	add.w	r1, r7, #12
 8004cb8:	2364      	movs	r3, #100	; 0x64
 8004cba:	6838      	ldr	r0, [r7, #0]
 8004cbc:	f7ff f9d1 	bl	8004062 <HAL_UART_Transmit>
}
 8004cc0:	bf00      	nop
 8004cc2:	3770      	adds	r7, #112	; 0x70
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}
 8004cc8:	080072f4 	.word	0x080072f4
 8004ccc:	08007300 	.word	0x08007300
 8004cd0:	0800730c 	.word	0x0800730c
 8004cd4:	08007318 	.word	0x08007318
 8004cd8:	08007324 	.word	0x08007324
 8004cdc:	08007330 	.word	0x08007330
 8004ce0:	0800733c 	.word	0x0800733c
 8004ce4:	08007348 	.word	0x08007348

08004ce8 <ds3231_PrintWeek_3Char>:
//************************************************************************

void ds3231_PrintWeek_3Char(	DS3231_DateTypeDef 	*_dateSt	,
							UART_HandleTypeDef	*_huart		) {
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b084      	sub	sp, #16
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
 8004cf0:	6039      	str	r1, [r7, #0]

	char DataChar[5] ;
	uint8_t day_u8 = _dateSt->WeekDay ;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	78db      	ldrb	r3, [r3, #3]
 8004cf6:	73fb      	strb	r3, [r7, #15]
	switch(day_u8) {
 8004cf8:	7bfb      	ldrb	r3, [r7, #15]
 8004cfa:	2b07      	cmp	r3, #7
 8004cfc:	d84a      	bhi.n	8004d94 <ds3231_PrintWeek_3Char+0xac>
 8004cfe:	a201      	add	r2, pc, #4	; (adr r2, 8004d04 <ds3231_PrintWeek_3Char+0x1c>)
 8004d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d04:	08004d25 	.word	0x08004d25
 8004d08:	08004d33 	.word	0x08004d33
 8004d0c:	08004d41 	.word	0x08004d41
 8004d10:	08004d4f 	.word	0x08004d4f
 8004d14:	08004d5d 	.word	0x08004d5d
 8004d18:	08004d6b 	.word	0x08004d6b
 8004d1c:	08004d79 	.word	0x08004d79
 8004d20:	08004d87 	.word	0x08004d87
		case  0: sprintf( DataChar , "SUN " ) ;	break ;
 8004d24:	f107 0308 	add.w	r3, r7, #8
 8004d28:	4926      	ldr	r1, [pc, #152]	; (8004dc4 <ds3231_PrintWeek_3Char+0xdc>)
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f001 f818 	bl	8005d60 <siprintf>
 8004d30:	e037      	b.n	8004da2 <ds3231_PrintWeek_3Char+0xba>
		case  1: sprintf( DataChar , "MON " ) ;	break ;
 8004d32:	f107 0308 	add.w	r3, r7, #8
 8004d36:	4924      	ldr	r1, [pc, #144]	; (8004dc8 <ds3231_PrintWeek_3Char+0xe0>)
 8004d38:	4618      	mov	r0, r3
 8004d3a:	f001 f811 	bl	8005d60 <siprintf>
 8004d3e:	e030      	b.n	8004da2 <ds3231_PrintWeek_3Char+0xba>
		case  2: sprintf( DataChar , "TUE " ) ;	break ;
 8004d40:	f107 0308 	add.w	r3, r7, #8
 8004d44:	4921      	ldr	r1, [pc, #132]	; (8004dcc <ds3231_PrintWeek_3Char+0xe4>)
 8004d46:	4618      	mov	r0, r3
 8004d48:	f001 f80a 	bl	8005d60 <siprintf>
 8004d4c:	e029      	b.n	8004da2 <ds3231_PrintWeek_3Char+0xba>
		case  3: sprintf( DataChar , "WED " ) ;	break ;
 8004d4e:	f107 0308 	add.w	r3, r7, #8
 8004d52:	491f      	ldr	r1, [pc, #124]	; (8004dd0 <ds3231_PrintWeek_3Char+0xe8>)
 8004d54:	4618      	mov	r0, r3
 8004d56:	f001 f803 	bl	8005d60 <siprintf>
 8004d5a:	e022      	b.n	8004da2 <ds3231_PrintWeek_3Char+0xba>
		case  4: sprintf( DataChar , "THU " ) ;	break ;
 8004d5c:	f107 0308 	add.w	r3, r7, #8
 8004d60:	491c      	ldr	r1, [pc, #112]	; (8004dd4 <ds3231_PrintWeek_3Char+0xec>)
 8004d62:	4618      	mov	r0, r3
 8004d64:	f000 fffc 	bl	8005d60 <siprintf>
 8004d68:	e01b      	b.n	8004da2 <ds3231_PrintWeek_3Char+0xba>
		case  5: sprintf( DataChar , "FRI " ) ;	break ;
 8004d6a:	f107 0308 	add.w	r3, r7, #8
 8004d6e:	491a      	ldr	r1, [pc, #104]	; (8004dd8 <ds3231_PrintWeek_3Char+0xf0>)
 8004d70:	4618      	mov	r0, r3
 8004d72:	f000 fff5 	bl	8005d60 <siprintf>
 8004d76:	e014      	b.n	8004da2 <ds3231_PrintWeek_3Char+0xba>
		case  6: sprintf( DataChar , "SAT " ) ;	break ;
 8004d78:	f107 0308 	add.w	r3, r7, #8
 8004d7c:	4917      	ldr	r1, [pc, #92]	; (8004ddc <ds3231_PrintWeek_3Char+0xf4>)
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f000 ffee 	bl	8005d60 <siprintf>
 8004d84:	e00d      	b.n	8004da2 <ds3231_PrintWeek_3Char+0xba>
		case  7: sprintf( DataChar , "SUN" ) ; 	break ;
 8004d86:	f107 0308 	add.w	r3, r7, #8
 8004d8a:	4915      	ldr	r1, [pc, #84]	; (8004de0 <ds3231_PrintWeek_3Char+0xf8>)
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f000 ffe7 	bl	8005d60 <siprintf>
 8004d92:	e006      	b.n	8004da2 <ds3231_PrintWeek_3Char+0xba>
		default: sprintf( DataChar , "err" ) ;	break ;
 8004d94:	f107 0308 	add.w	r3, r7, #8
 8004d98:	4912      	ldr	r1, [pc, #72]	; (8004de4 <ds3231_PrintWeek_3Char+0xfc>)
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f000 ffe0 	bl	8005d60 <siprintf>
 8004da0:	bf00      	nop
		} // end switch Date.ST
	HAL_UART_Transmit( _huart , (uint8_t *)DataChar , strlen(DataChar) , 100) ;
 8004da2:	f107 0308 	add.w	r3, r7, #8
 8004da6:	4618      	mov	r0, r3
 8004da8:	f7fb f9d0 	bl	800014c <strlen>
 8004dac:	4603      	mov	r3, r0
 8004dae:	b29a      	uxth	r2, r3
 8004db0:	f107 0108 	add.w	r1, r7, #8
 8004db4:	2364      	movs	r3, #100	; 0x64
 8004db6:	6838      	ldr	r0, [r7, #0]
 8004db8:	f7ff f953 	bl	8004062 <HAL_UART_Transmit>
}
 8004dbc:	bf00      	nop
 8004dbe:	3710      	adds	r7, #16
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}
 8004dc4:	08007354 	.word	0x08007354
 8004dc8:	0800735c 	.word	0x0800735c
 8004dcc:	08007364 	.word	0x08007364
 8004dd0:	0800736c 	.word	0x0800736c
 8004dd4:	08007374 	.word	0x08007374
 8004dd8:	0800737c 	.word	0x0800737c
 8004ddc:	08007384 	.word	0x08007384
 8004de0:	0800738c 	.word	0x0800738c
 8004de4:	08007390 	.word	0x08007390

08004de8 <ds3231_GetTime>:
//************************************************************************

void ds3231_GetTime(	uint8_t 				_ds3231_i2c_adr	,
						DS3231_TimeTypeDef		*_timeSt		) {
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b084      	sub	sp, #16
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	4603      	mov	r3, r0
 8004df0:	6039      	str	r1, [r7, #0]
 8004df2:	71fb      	strb	r3, [r7, #7]

	uint8_t ds3231_Seconds ;
	uint8_t ds3231_Minutes ;
	uint8_t ds3231_Hours   ;

	I2Cdev_readByte( _ds3231_i2c_adr, DS3231_SECONDS , &ds3231_Seconds, 100);
 8004df4:	f107 020f 	add.w	r2, r7, #15
 8004df8:	79f8      	ldrb	r0, [r7, #7]
 8004dfa:	2364      	movs	r3, #100	; 0x64
 8004dfc:	2100      	movs	r1, #0
 8004dfe:	f000 f981 	bl	8005104 <I2Cdev_readByte>
	I2Cdev_readByte( _ds3231_i2c_adr, DS3231_MINUTES , &ds3231_Minutes, 100);
 8004e02:	f107 020e 	add.w	r2, r7, #14
 8004e06:	79f8      	ldrb	r0, [r7, #7]
 8004e08:	2364      	movs	r3, #100	; 0x64
 8004e0a:	2101      	movs	r1, #1
 8004e0c:	f000 f97a 	bl	8005104 <I2Cdev_readByte>
	I2Cdev_readByte( _ds3231_i2c_adr, DS3231_HOUR	 , &ds3231_Hours,   100);
 8004e10:	f107 020d 	add.w	r2, r7, #13
 8004e14:	79f8      	ldrb	r0, [r7, #7]
 8004e16:	2364      	movs	r3, #100	; 0x64
 8004e18:	2102      	movs	r1, #2
 8004e1a:	f000 f973 	bl	8005104 <I2Cdev_readByte>

	_timeSt->Hours   = (ds3231_Hours   >> 4)*10 + (ds3231_Hours   &0x0F);
 8004e1e:	7b7b      	ldrb	r3, [r7, #13]
 8004e20:	091b      	lsrs	r3, r3, #4
 8004e22:	b2db      	uxtb	r3, r3
 8004e24:	461a      	mov	r2, r3
 8004e26:	0092      	lsls	r2, r2, #2
 8004e28:	4413      	add	r3, r2
 8004e2a:	005b      	lsls	r3, r3, #1
 8004e2c:	b2da      	uxtb	r2, r3
 8004e2e:	7b7b      	ldrb	r3, [r7, #13]
 8004e30:	f003 030f 	and.w	r3, r3, #15
 8004e34:	b2db      	uxtb	r3, r3
 8004e36:	4413      	add	r3, r2
 8004e38:	b2da      	uxtb	r2, r3
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	701a      	strb	r2, [r3, #0]
	_timeSt->Minutes = (ds3231_Minutes >> 4)*10 + (ds3231_Minutes &0x0F);
 8004e3e:	7bbb      	ldrb	r3, [r7, #14]
 8004e40:	091b      	lsrs	r3, r3, #4
 8004e42:	b2db      	uxtb	r3, r3
 8004e44:	461a      	mov	r2, r3
 8004e46:	0092      	lsls	r2, r2, #2
 8004e48:	4413      	add	r3, r2
 8004e4a:	005b      	lsls	r3, r3, #1
 8004e4c:	b2da      	uxtb	r2, r3
 8004e4e:	7bbb      	ldrb	r3, [r7, #14]
 8004e50:	f003 030f 	and.w	r3, r3, #15
 8004e54:	b2db      	uxtb	r3, r3
 8004e56:	4413      	add	r3, r2
 8004e58:	b2da      	uxtb	r2, r3
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	705a      	strb	r2, [r3, #1]
	_timeSt->Seconds = (ds3231_Seconds >> 4)*10 + (ds3231_Seconds &0x0F);
 8004e5e:	7bfb      	ldrb	r3, [r7, #15]
 8004e60:	091b      	lsrs	r3, r3, #4
 8004e62:	b2db      	uxtb	r3, r3
 8004e64:	461a      	mov	r2, r3
 8004e66:	0092      	lsls	r2, r2, #2
 8004e68:	4413      	add	r3, r2
 8004e6a:	005b      	lsls	r3, r3, #1
 8004e6c:	b2da      	uxtb	r2, r3
 8004e6e:	7bfb      	ldrb	r3, [r7, #15]
 8004e70:	f003 030f 	and.w	r3, r3, #15
 8004e74:	b2db      	uxtb	r3, r3
 8004e76:	4413      	add	r3, r2
 8004e78:	b2da      	uxtb	r2, r3
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	709a      	strb	r2, [r3, #2]
}
 8004e7e:	bf00      	nop
 8004e80:	3710      	adds	r7, #16
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}

08004e86 <ds3231_GetDate>:
//************************************************************************

void ds3231_GetDate(	uint8_t 				_ds3231_i2c_adr	,
						DS3231_DateTypeDef		*_dateSt		) {
 8004e86:	b580      	push	{r7, lr}
 8004e88:	b084      	sub	sp, #16
 8004e8a:	af00      	add	r7, sp, #0
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	6039      	str	r1, [r7, #0]
 8004e90:	71fb      	strb	r3, [r7, #7]
	uint8_t ds3231_WeekDay ;
	uint8_t ds3231_Date    ;
	uint8_t ds3231_Mouth   ;
	uint8_t ds3231_Year    ;

	I2Cdev_readByte( _ds3231_i2c_adr , DS3231_WEEKDAY, &ds3231_WeekDay, 100 ) ;
 8004e92:	f107 020f 	add.w	r2, r7, #15
 8004e96:	79f8      	ldrb	r0, [r7, #7]
 8004e98:	2364      	movs	r3, #100	; 0x64
 8004e9a:	2103      	movs	r1, #3
 8004e9c:	f000 f932 	bl	8005104 <I2Cdev_readByte>
	I2Cdev_readByte( _ds3231_i2c_adr , DS3231_DATE	 , &ds3231_Date,    100 ) ;
 8004ea0:	f107 020e 	add.w	r2, r7, #14
 8004ea4:	79f8      	ldrb	r0, [r7, #7]
 8004ea6:	2364      	movs	r3, #100	; 0x64
 8004ea8:	2104      	movs	r1, #4
 8004eaa:	f000 f92b 	bl	8005104 <I2Cdev_readByte>
	I2Cdev_readByte( _ds3231_i2c_adr , DS3231_MONTH	 , &ds3231_Mouth,   100 ) ;
 8004eae:	f107 020d 	add.w	r2, r7, #13
 8004eb2:	79f8      	ldrb	r0, [r7, #7]
 8004eb4:	2364      	movs	r3, #100	; 0x64
 8004eb6:	2105      	movs	r1, #5
 8004eb8:	f000 f924 	bl	8005104 <I2Cdev_readByte>
	I2Cdev_readByte( _ds3231_i2c_adr , DS3231_YEAR	 , &ds3231_Year,    100 ) ;
 8004ebc:	f107 020c 	add.w	r2, r7, #12
 8004ec0:	79f8      	ldrb	r0, [r7, #7]
 8004ec2:	2364      	movs	r3, #100	; 0x64
 8004ec4:	2106      	movs	r1, #6
 8004ec6:	f000 f91d 	bl	8005104 <I2Cdev_readByte>

	_dateSt->WeekDay = (ds3231_WeekDay >> 4) * 10 + (ds3231_WeekDay &0x0F ) ;
 8004eca:	7bfb      	ldrb	r3, [r7, #15]
 8004ecc:	091b      	lsrs	r3, r3, #4
 8004ece:	b2db      	uxtb	r3, r3
 8004ed0:	461a      	mov	r2, r3
 8004ed2:	0092      	lsls	r2, r2, #2
 8004ed4:	4413      	add	r3, r2
 8004ed6:	005b      	lsls	r3, r3, #1
 8004ed8:	b2da      	uxtb	r2, r3
 8004eda:	7bfb      	ldrb	r3, [r7, #15]
 8004edc:	f003 030f 	and.w	r3, r3, #15
 8004ee0:	b2db      	uxtb	r3, r3
 8004ee2:	4413      	add	r3, r2
 8004ee4:	b2da      	uxtb	r2, r3
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	70da      	strb	r2, [r3, #3]
	_dateSt->Date    = (ds3231_Date    >> 4) * 10 + (ds3231_Date    &0x0F ) ;
 8004eea:	7bbb      	ldrb	r3, [r7, #14]
 8004eec:	091b      	lsrs	r3, r3, #4
 8004eee:	b2db      	uxtb	r3, r3
 8004ef0:	461a      	mov	r2, r3
 8004ef2:	0092      	lsls	r2, r2, #2
 8004ef4:	4413      	add	r3, r2
 8004ef6:	005b      	lsls	r3, r3, #1
 8004ef8:	b2da      	uxtb	r2, r3
 8004efa:	7bbb      	ldrb	r3, [r7, #14]
 8004efc:	f003 030f 	and.w	r3, r3, #15
 8004f00:	b2db      	uxtb	r3, r3
 8004f02:	4413      	add	r3, r2
 8004f04:	b2da      	uxtb	r2, r3
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	709a      	strb	r2, [r3, #2]
	_dateSt->Month   = (ds3231_Mouth   >> 4) * 10 + (ds3231_Mouth   &0x0F ) ;
 8004f0a:	7b7b      	ldrb	r3, [r7, #13]
 8004f0c:	091b      	lsrs	r3, r3, #4
 8004f0e:	b2db      	uxtb	r3, r3
 8004f10:	461a      	mov	r2, r3
 8004f12:	0092      	lsls	r2, r2, #2
 8004f14:	4413      	add	r3, r2
 8004f16:	005b      	lsls	r3, r3, #1
 8004f18:	b2da      	uxtb	r2, r3
 8004f1a:	7b7b      	ldrb	r3, [r7, #13]
 8004f1c:	f003 030f 	and.w	r3, r3, #15
 8004f20:	b2db      	uxtb	r3, r3
 8004f22:	4413      	add	r3, r2
 8004f24:	b2da      	uxtb	r2, r3
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	705a      	strb	r2, [r3, #1]
	_dateSt->Year    = (ds3231_Year    >> 4) * 10 + (ds3231_Year    &0x0F ) ;
 8004f2a:	7b3b      	ldrb	r3, [r7, #12]
 8004f2c:	091b      	lsrs	r3, r3, #4
 8004f2e:	b2db      	uxtb	r3, r3
 8004f30:	461a      	mov	r2, r3
 8004f32:	0092      	lsls	r2, r2, #2
 8004f34:	4413      	add	r3, r2
 8004f36:	005b      	lsls	r3, r3, #1
 8004f38:	b2da      	uxtb	r2, r3
 8004f3a:	7b3b      	ldrb	r3, [r7, #12]
 8004f3c:	f003 030f 	and.w	r3, r3, #15
 8004f40:	b2db      	uxtb	r3, r3
 8004f42:	4413      	add	r3, r2
 8004f44:	b2da      	uxtb	r2, r3
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	701a      	strb	r2, [r3, #0]
}
 8004f4a:	bf00      	nop
 8004f4c:	3710      	adds	r7, #16
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}
	...

08004f54 <ds3231_SetTime>:
//************************************************************************

void ds3231_SetTime(	uint8_t 				_ds3231_i2c_adr	,
						DS3231_TimeTypeDef		*_timeSt		) {
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b084      	sub	sp, #16
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	6039      	str	r1, [r7, #0]
 8004f5e:	71fb      	strb	r3, [r7, #7]

	DS3231_TimeTypeDef    TimeStr    ;
	TimeStr.Hours	= 16 * ( _timeSt->Hours   / 10 ) + ( _timeSt->Hours   % 10 ) ;
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	781b      	ldrb	r3, [r3, #0]
 8004f64:	4a2d      	ldr	r2, [pc, #180]	; (800501c <ds3231_SetTime+0xc8>)
 8004f66:	fba2 2303 	umull	r2, r3, r2, r3
 8004f6a:	08db      	lsrs	r3, r3, #3
 8004f6c:	b2db      	uxtb	r3, r3
 8004f6e:	011b      	lsls	r3, r3, #4
 8004f70:	b2d8      	uxtb	r0, r3
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	781a      	ldrb	r2, [r3, #0]
 8004f76:	4b29      	ldr	r3, [pc, #164]	; (800501c <ds3231_SetTime+0xc8>)
 8004f78:	fba3 1302 	umull	r1, r3, r3, r2
 8004f7c:	08d9      	lsrs	r1, r3, #3
 8004f7e:	460b      	mov	r3, r1
 8004f80:	009b      	lsls	r3, r3, #2
 8004f82:	440b      	add	r3, r1
 8004f84:	005b      	lsls	r3, r3, #1
 8004f86:	1ad3      	subs	r3, r2, r3
 8004f88:	b2db      	uxtb	r3, r3
 8004f8a:	4403      	add	r3, r0
 8004f8c:	b2db      	uxtb	r3, r3
 8004f8e:	733b      	strb	r3, [r7, #12]
	TimeStr.Minutes	= 16 * ( _timeSt->Minutes / 10 ) + ( _timeSt->Minutes % 10 ) ;
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	785b      	ldrb	r3, [r3, #1]
 8004f94:	4a21      	ldr	r2, [pc, #132]	; (800501c <ds3231_SetTime+0xc8>)
 8004f96:	fba2 2303 	umull	r2, r3, r2, r3
 8004f9a:	08db      	lsrs	r3, r3, #3
 8004f9c:	b2db      	uxtb	r3, r3
 8004f9e:	011b      	lsls	r3, r3, #4
 8004fa0:	b2d8      	uxtb	r0, r3
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	785a      	ldrb	r2, [r3, #1]
 8004fa6:	4b1d      	ldr	r3, [pc, #116]	; (800501c <ds3231_SetTime+0xc8>)
 8004fa8:	fba3 1302 	umull	r1, r3, r3, r2
 8004fac:	08d9      	lsrs	r1, r3, #3
 8004fae:	460b      	mov	r3, r1
 8004fb0:	009b      	lsls	r3, r3, #2
 8004fb2:	440b      	add	r3, r1
 8004fb4:	005b      	lsls	r3, r3, #1
 8004fb6:	1ad3      	subs	r3, r2, r3
 8004fb8:	b2db      	uxtb	r3, r3
 8004fba:	4403      	add	r3, r0
 8004fbc:	b2db      	uxtb	r3, r3
 8004fbe:	737b      	strb	r3, [r7, #13]
	TimeStr.Seconds	= 16 * ( _timeSt->Seconds / 10 ) + ( _timeSt->Seconds % 10 ) ;
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	789b      	ldrb	r3, [r3, #2]
 8004fc4:	4a15      	ldr	r2, [pc, #84]	; (800501c <ds3231_SetTime+0xc8>)
 8004fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8004fca:	08db      	lsrs	r3, r3, #3
 8004fcc:	b2db      	uxtb	r3, r3
 8004fce:	011b      	lsls	r3, r3, #4
 8004fd0:	b2d8      	uxtb	r0, r3
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	789a      	ldrb	r2, [r3, #2]
 8004fd6:	4b11      	ldr	r3, [pc, #68]	; (800501c <ds3231_SetTime+0xc8>)
 8004fd8:	fba3 1302 	umull	r1, r3, r3, r2
 8004fdc:	08d9      	lsrs	r1, r3, #3
 8004fde:	460b      	mov	r3, r1
 8004fe0:	009b      	lsls	r3, r3, #2
 8004fe2:	440b      	add	r3, r1
 8004fe4:	005b      	lsls	r3, r3, #1
 8004fe6:	1ad3      	subs	r3, r2, r3
 8004fe8:	b2db      	uxtb	r3, r3
 8004fea:	4403      	add	r3, r0
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	73bb      	strb	r3, [r7, #14]

	I2Cdev_writeByte( _ds3231_i2c_adr, DS3231_SECONDS, TimeStr.Seconds ) ;
 8004ff0:	7bba      	ldrb	r2, [r7, #14]
 8004ff2:	79fb      	ldrb	r3, [r7, #7]
 8004ff4:	2100      	movs	r1, #0
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f000 f8d4 	bl	80051a4 <I2Cdev_writeByte>
	I2Cdev_writeByte( _ds3231_i2c_adr, DS3231_MINUTES, TimeStr.Minutes ) ;
 8004ffc:	7b7a      	ldrb	r2, [r7, #13]
 8004ffe:	79fb      	ldrb	r3, [r7, #7]
 8005000:	2101      	movs	r1, #1
 8005002:	4618      	mov	r0, r3
 8005004:	f000 f8ce 	bl	80051a4 <I2Cdev_writeByte>
	I2Cdev_writeByte( _ds3231_i2c_adr, DS3231_HOUR	 , TimeStr.Hours   ) ;
 8005008:	7b3a      	ldrb	r2, [r7, #12]
 800500a:	79fb      	ldrb	r3, [r7, #7]
 800500c:	2102      	movs	r1, #2
 800500e:	4618      	mov	r0, r3
 8005010:	f000 f8c8 	bl	80051a4 <I2Cdev_writeByte>
}
 8005014:	bf00      	nop
 8005016:	3710      	adds	r7, #16
 8005018:	46bd      	mov	sp, r7
 800501a:	bd80      	pop	{r7, pc}
 800501c:	cccccccd 	.word	0xcccccccd

08005020 <ds3231_Alarm1_SetEverySeconds>:
	I2Cdev_writeByte( _ds3231_i2c_adr, DS3231_MONTH  , DateStr.Month   ) ;
	I2Cdev_writeByte( _ds3231_i2c_adr, DS3231_YEAR   , DateStr.Year    );
}
//************************************************************************

void ds3231_Alarm1_SetEverySeconds(	uint8_t 	_ds3231_i2c_adr ) {
 8005020:	b580      	push	{r7, lr}
 8005022:	b084      	sub	sp, #16
 8005024:	af00      	add	r7, sp, #0
 8005026:	4603      	mov	r3, r0
 8005028:	71fb      	strb	r3, [r7, #7]

	I2Cdev_writeByte( _ds3231_i2c_adr, DS3231_ALARM_1_SECONDS		, 1UL<<7 ) ;
 800502a:	79fb      	ldrb	r3, [r7, #7]
 800502c:	2280      	movs	r2, #128	; 0x80
 800502e:	2107      	movs	r1, #7
 8005030:	4618      	mov	r0, r3
 8005032:	f000 f8b7 	bl	80051a4 <I2Cdev_writeByte>
	I2Cdev_writeByte( _ds3231_i2c_adr, DS3231_ALARM_1_MINUTES		, 1UL<<7 ) ;
 8005036:	79fb      	ldrb	r3, [r7, #7]
 8005038:	2280      	movs	r2, #128	; 0x80
 800503a:	2108      	movs	r1, #8
 800503c:	4618      	mov	r0, r3
 800503e:	f000 f8b1 	bl	80051a4 <I2Cdev_writeByte>
	I2Cdev_writeByte( _ds3231_i2c_adr, DS3231_ALARM_1_HOUR	 		, 1UL<<7 ) ;
 8005042:	79fb      	ldrb	r3, [r7, #7]
 8005044:	2280      	movs	r2, #128	; 0x80
 8005046:	2109      	movs	r1, #9
 8005048:	4618      	mov	r0, r3
 800504a:	f000 f8ab 	bl	80051a4 <I2Cdev_writeByte>
	I2Cdev_writeByte( _ds3231_i2c_adr, DS3231_ALARM_1_DAY_AND_DATE	, 1UL<<7 ) ;
 800504e:	79fb      	ldrb	r3, [r7, #7]
 8005050:	2280      	movs	r2, #128	; 0x80
 8005052:	210a      	movs	r1, #10
 8005054:	4618      	mov	r0, r3
 8005056:	f000 f8a5 	bl	80051a4 <I2Cdev_writeByte>

	uint8_t alarm_status ;
	I2Cdev_readByte ( _ds3231_i2c_adr, DS3231_CONTROL, &alarm_status, 100 ) ;
 800505a:	f107 020f 	add.w	r2, r7, #15
 800505e:	79f8      	ldrb	r0, [r7, #7]
 8005060:	2364      	movs	r3, #100	; 0x64
 8005062:	210e      	movs	r1, #14
 8005064:	f000 f84e 	bl	8005104 <I2Cdev_readByte>
	alarm_status = alarm_status | ( 1UL<<DS3231_CONTROL_INTCN ) | ( 1UL<DS3231_CONTROL_A1IE ) ;
 8005068:	7bfb      	ldrb	r3, [r7, #15]
 800506a:	f043 0304 	orr.w	r3, r3, #4
 800506e:	b2db      	uxtb	r3, r3
 8005070:	73fb      	strb	r3, [r7, #15]
	I2Cdev_writeByte( _ds3231_i2c_adr, DS3231_CONTROL, alarm_status ) ;
 8005072:	7bfa      	ldrb	r2, [r7, #15]
 8005074:	79fb      	ldrb	r3, [r7, #7]
 8005076:	210e      	movs	r1, #14
 8005078:	4618      	mov	r0, r3
 800507a:	f000 f893 	bl	80051a4 <I2Cdev_writeByte>
}
 800507e:	bf00      	nop
 8005080:	3710      	adds	r7, #16
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}

08005086 <ds3231_Alarm1_ClearStatusBit>:
	I2Cdev_writeByte( _ds3231_i2c_adr, DS3231_CONTROL,  alarm_status ) ;
}
//************************************************************************


void ds3231_Alarm1_ClearStatusBit(uint8_t 	_ds3231_i2c_adr) {
 8005086:	b580      	push	{r7, lr}
 8005088:	b084      	sub	sp, #16
 800508a:	af00      	add	r7, sp, #0
 800508c:	4603      	mov	r3, r0
 800508e:	71fb      	strb	r3, [r7, #7]

	uint8_t status_bit;
	I2Cdev_readByte ( _ds3231_i2c_adr, DS3231_CONTROL_STATUS, &status_bit, 100   );
 8005090:	f107 020f 	add.w	r2, r7, #15
 8005094:	79f8      	ldrb	r0, [r7, #7]
 8005096:	2364      	movs	r3, #100	; 0x64
 8005098:	210f      	movs	r1, #15
 800509a:	f000 f833 	bl	8005104 <I2Cdev_readByte>
	status_bit = status_bit & (0UL<<DS3231_CNTRL_STATUS_A1F);
 800509e:	2300      	movs	r3, #0
 80050a0:	73fb      	strb	r3, [r7, #15]
	I2Cdev_writeByte( _ds3231_i2c_adr, DS3231_CONTROL_STATUS, status_bit );
 80050a2:	7bfa      	ldrb	r2, [r7, #15]
 80050a4:	79fb      	ldrb	r3, [r7, #7]
 80050a6:	210f      	movs	r1, #15
 80050a8:	4618      	mov	r0, r3
 80050aa:	f000 f87b 	bl	80051a4 <I2Cdev_writeByte>
}
 80050ae:	bf00      	nop
 80050b0:	3710      	adds	r7, #16
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd80      	pop	{r7, pc}
	...

080050b8 <Ds3231_hard_alarm_flag_Reset>:
void Ds3231_hard_alarm_flag_Set (void) {
	ds3231_alarm_u8 = 1 ;
}
//************************************************************************

void Ds3231_hard_alarm_flag_Reset (void) {
 80050b8:	b480      	push	{r7}
 80050ba:	af00      	add	r7, sp, #0
	ds3231_alarm_u8 = 0 ;
 80050bc:	4b03      	ldr	r3, [pc, #12]	; (80050cc <Ds3231_hard_alarm_flag_Reset+0x14>)
 80050be:	2200      	movs	r2, #0
 80050c0:	701a      	strb	r2, [r3, #0]
}
 80050c2:	bf00      	nop
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bc80      	pop	{r7}
 80050c8:	4770      	bx	lr
 80050ca:	bf00      	nop
 80050cc:	200001f8 	.word	0x200001f8

080050d0 <Ds3231_hard_alarm_flag_Status>:
//************************************************************************

uint8_t Ds3231_hard_alarm_flag_Status (void) {
 80050d0:	b480      	push	{r7}
 80050d2:	af00      	add	r7, sp, #0
	return ds3231_alarm_u8 ;
 80050d4:	4b03      	ldr	r3, [pc, #12]	; (80050e4 <Ds3231_hard_alarm_flag_Status+0x14>)
 80050d6:	781b      	ldrb	r3, [r3, #0]
 80050d8:	b2db      	uxtb	r3, r3
}
 80050da:	4618      	mov	r0, r3
 80050dc:	46bd      	mov	sp, r7
 80050de:	bc80      	pop	{r7}
 80050e0:	4770      	bx	lr
 80050e2:	bf00      	nop
 80050e4:	200001f8 	.word	0x200001f8

080050e8 <I2Cdev_init>:
uint16_t I2Cdev_readTimeout = I2CDEV_DEFAULT_READ_TIMEOUT;

/** Sets device handle to use for communications
 * You can call this function and set any other device at any moment
 */
void I2Cdev_init(I2C_HandleTypeDef * hi2c){
 80050e8:	b480      	push	{r7}
 80050ea:	b083      	sub	sp, #12
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
	I2Cdev_hi2c = hi2c;
 80050f0:	4a03      	ldr	r2, [pc, #12]	; (8005100 <I2Cdev_init+0x18>)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6013      	str	r3, [r2, #0]
}
 80050f6:	bf00      	nop
 80050f8:	370c      	adds	r7, #12
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bc80      	pop	{r7}
 80050fe:	4770      	bx	lr
 8005100:	200001fc 	.word	0x200001fc

08005104 <I2Cdev_readByte>:
 * @param data Container for byte value read from device
 * @param timeout Optional read timeout in milliseconds (0 to disable, leave off to use default class value in I2Cdev_readTimeout)
 * @return Status of read operation (true = success)
 */
uint8_t I2Cdev_readByte(uint8_t devAddr, uint8_t regAddr, uint8_t *data, uint16_t timeout)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b084      	sub	sp, #16
 8005108:	af02      	add	r7, sp, #8
 800510a:	603a      	str	r2, [r7, #0]
 800510c:	461a      	mov	r2, r3
 800510e:	4603      	mov	r3, r0
 8005110:	71fb      	strb	r3, [r7, #7]
 8005112:	460b      	mov	r3, r1
 8005114:	71bb      	strb	r3, [r7, #6]
 8005116:	4613      	mov	r3, r2
 8005118:	80bb      	strh	r3, [r7, #4]
    return I2Cdev_readBytes(devAddr, regAddr, 1, data, timeout);
 800511a:	79b9      	ldrb	r1, [r7, #6]
 800511c:	79f8      	ldrb	r0, [r7, #7]
 800511e:	88bb      	ldrh	r3, [r7, #4]
 8005120:	9300      	str	r3, [sp, #0]
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	2201      	movs	r2, #1
 8005126:	f000 f805 	bl	8005134 <I2Cdev_readBytes>
 800512a:	4603      	mov	r3, r0
}
 800512c:	4618      	mov	r0, r3
 800512e:	3708      	adds	r7, #8
 8005130:	46bd      	mov	sp, r7
 8005132:	bd80      	pop	{r7, pc}

08005134 <I2Cdev_readBytes>:
 * @param data Buffer to store read data in
 * @param timeout Optional read timeout in milliseconds (0 to disable, leave off to use default class value in I2Cdev_readTimeout)
 * @return Number of bytes read (-1 indicates failure)
 */
uint8_t I2Cdev_readBytes(uint8_t devAddr, uint8_t regAddr, uint8_t length, uint8_t *data, uint16_t timeout)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b086      	sub	sp, #24
 8005138:	af02      	add	r7, sp, #8
 800513a:	603b      	str	r3, [r7, #0]
 800513c:	4603      	mov	r3, r0
 800513e:	71fb      	strb	r3, [r7, #7]
 8005140:	460b      	mov	r3, r1
 8005142:	71bb      	strb	r3, [r7, #6]
 8005144:	4613      	mov	r3, r2
 8005146:	717b      	strb	r3, [r7, #5]
    uint16_t tout = timeout > 0 ? timeout : I2CDEV_DEFAULT_READ_TIMEOUT;
 8005148:	8b3b      	ldrh	r3, [r7, #24]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d001      	beq.n	8005152 <I2Cdev_readBytes+0x1e>
 800514e:	8b3b      	ldrh	r3, [r7, #24]
 8005150:	e001      	b.n	8005156 <I2Cdev_readBytes+0x22>
 8005152:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005156:	81fb      	strh	r3, [r7, #14]

    HAL_I2C_Master_Transmit(I2Cdev_hi2c, devAddr << 1, &regAddr, 1, tout);
 8005158:	4b11      	ldr	r3, [pc, #68]	; (80051a0 <I2Cdev_readBytes+0x6c>)
 800515a:	6818      	ldr	r0, [r3, #0]
 800515c:	79fb      	ldrb	r3, [r7, #7]
 800515e:	b29b      	uxth	r3, r3
 8005160:	005b      	lsls	r3, r3, #1
 8005162:	b299      	uxth	r1, r3
 8005164:	89fb      	ldrh	r3, [r7, #14]
 8005166:	1dba      	adds	r2, r7, #6
 8005168:	9300      	str	r3, [sp, #0]
 800516a:	2301      	movs	r3, #1
 800516c:	f7fc fd9c 	bl	8001ca8 <HAL_I2C_Master_Transmit>
    if (HAL_I2C_Master_Receive(I2Cdev_hi2c, devAddr << 1, data, length, tout) == HAL_OK) return length;
 8005170:	4b0b      	ldr	r3, [pc, #44]	; (80051a0 <I2Cdev_readBytes+0x6c>)
 8005172:	6818      	ldr	r0, [r3, #0]
 8005174:	79fb      	ldrb	r3, [r7, #7]
 8005176:	b29b      	uxth	r3, r3
 8005178:	005b      	lsls	r3, r3, #1
 800517a:	b299      	uxth	r1, r3
 800517c:	797b      	ldrb	r3, [r7, #5]
 800517e:	b29a      	uxth	r2, r3
 8005180:	89fb      	ldrh	r3, [r7, #14]
 8005182:	9300      	str	r3, [sp, #0]
 8005184:	4613      	mov	r3, r2
 8005186:	683a      	ldr	r2, [r7, #0]
 8005188:	f7fc fe8c 	bl	8001ea4 <HAL_I2C_Master_Receive>
 800518c:	4603      	mov	r3, r0
 800518e:	2b00      	cmp	r3, #0
 8005190:	d101      	bne.n	8005196 <I2Cdev_readBytes+0x62>
 8005192:	797b      	ldrb	r3, [r7, #5]
 8005194:	e000      	b.n	8005198 <I2Cdev_readBytes+0x64>
    return -1;
 8005196:	23ff      	movs	r3, #255	; 0xff
}
 8005198:	4618      	mov	r0, r3
 800519a:	3710      	adds	r7, #16
 800519c:	46bd      	mov	sp, r7
 800519e:	bd80      	pop	{r7, pc}
 80051a0:	200001fc 	.word	0x200001fc

080051a4 <I2Cdev_writeByte>:
 * @param regAddr Register address to write to
 * @param data New byte value to write
 * @return Status of operation (true = success)
 */
uint16_t I2Cdev_writeByte(uint8_t devAddr, uint8_t regAddr, uint8_t data)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b082      	sub	sp, #8
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	4603      	mov	r3, r0
 80051ac:	71fb      	strb	r3, [r7, #7]
 80051ae:	460b      	mov	r3, r1
 80051b0:	71bb      	strb	r3, [r7, #6]
 80051b2:	4613      	mov	r3, r2
 80051b4:	717b      	strb	r3, [r7, #5]
    return I2Cdev_writeBytes(devAddr, regAddr, 1, &data);
 80051b6:	1d7b      	adds	r3, r7, #5
 80051b8:	79b9      	ldrb	r1, [r7, #6]
 80051ba:	79f8      	ldrb	r0, [r7, #7]
 80051bc:	2201      	movs	r2, #1
 80051be:	f000 f805 	bl	80051cc <I2Cdev_writeBytes>
 80051c2:	4603      	mov	r3, r0
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	3708      	adds	r7, #8
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bd80      	pop	{r7, pc}

080051cc <I2Cdev_writeBytes>:
 * @param length Number of bytes to write
 * @param data Buffer to copy new data from
 * @return Status of operation (true = success)
 */
uint16_t I2Cdev_writeBytes(uint8_t devAddr, uint8_t regAddr, uint8_t length, uint8_t* pData)
{
 80051cc:	b590      	push	{r4, r7, lr}
 80051ce:	b089      	sub	sp, #36	; 0x24
 80051d0:	af04      	add	r7, sp, #16
 80051d2:	603b      	str	r3, [r7, #0]
 80051d4:	4603      	mov	r3, r0
 80051d6:	71fb      	strb	r3, [r7, #7]
 80051d8:	460b      	mov	r3, r1
 80051da:	71bb      	strb	r3, [r7, #6]
 80051dc:	4613      	mov	r3, r2
 80051de:	717b      	strb	r3, [r7, #5]
    HAL_StatusTypeDef status = HAL_I2C_Mem_Write(I2Cdev_hi2c, devAddr << 1, regAddr, I2C_MEMADD_SIZE_8BIT, pData, length, 1000);
 80051e0:	4b0f      	ldr	r3, [pc, #60]	; (8005220 <I2Cdev_writeBytes+0x54>)
 80051e2:	6818      	ldr	r0, [r3, #0]
 80051e4:	79fb      	ldrb	r3, [r7, #7]
 80051e6:	b29b      	uxth	r3, r3
 80051e8:	005b      	lsls	r3, r3, #1
 80051ea:	b299      	uxth	r1, r3
 80051ec:	79bb      	ldrb	r3, [r7, #6]
 80051ee:	b29a      	uxth	r2, r3
 80051f0:	797b      	ldrb	r3, [r7, #5]
 80051f2:	b29b      	uxth	r3, r3
 80051f4:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 80051f8:	9402      	str	r4, [sp, #8]
 80051fa:	9301      	str	r3, [sp, #4]
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	9300      	str	r3, [sp, #0]
 8005200:	2301      	movs	r3, #1
 8005202:	f7fd f8af 	bl	8002364 <HAL_I2C_Mem_Write>
 8005206:	4603      	mov	r3, r0
 8005208:	73fb      	strb	r3, [r7, #15]
    return status == HAL_OK;
 800520a:	7bfb      	ldrb	r3, [r7, #15]
 800520c:	2b00      	cmp	r3, #0
 800520e:	bf0c      	ite	eq
 8005210:	2301      	moveq	r3, #1
 8005212:	2300      	movne	r3, #0
 8005214:	b2db      	uxtb	r3, r3
 8005216:	b29b      	uxth	r3, r3
}
 8005218:	4618      	mov	r0, r3
 800521a:	3714      	adds	r7, #20
 800521c:	46bd      	mov	sp, r7
 800521e:	bd90      	pop	{r4, r7, pc}
 8005220:	200001fc 	.word	0x200001fc

08005224 <I2C_ScanBusFlow>:
    return status == HAL_OK;
}

//======================================================================
void I2C_ScanBusFlow(I2C_HandleTypeDef * _hi2c, UART_HandleTypeDef * _huart)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b08c      	sub	sp, #48	; 0x30
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
 800522c:	6039      	str	r1, [r7, #0]
	char DataChar[32];
	int device_serial_numb = 0;
 800522e:	2300      	movs	r3, #0
 8005230:	62fb      	str	r3, [r7, #44]	; 0x2c

	sprintf(DataChar,"\r\n\tStart scan I2C\r\n");
 8005232:	f107 0308 	add.w	r3, r7, #8
 8005236:	49b1      	ldr	r1, [pc, #708]	; (80054fc <I2C_ScanBusFlow+0x2d8>)
 8005238:	4618      	mov	r0, r3
 800523a:	f000 fd91 	bl	8005d60 <siprintf>
	HAL_UART_Transmit(_huart, (uint8_t *)DataChar, strlen(DataChar), 100);
 800523e:	f107 0308 	add.w	r3, r7, #8
 8005242:	4618      	mov	r0, r3
 8005244:	f7fa ff82 	bl	800014c <strlen>
 8005248:	4603      	mov	r3, r0
 800524a:	b29a      	uxth	r2, r3
 800524c:	f107 0108 	add.w	r1, r7, #8
 8005250:	2364      	movs	r3, #100	; 0x64
 8005252:	6838      	ldr	r0, [r7, #0]
 8005254:	f7fe ff05 	bl	8004062 <HAL_UART_Transmit>

	for ( int sbf = 0x07; sbf < 0x78; sbf++)
 8005258:	2307      	movs	r3, #7
 800525a:	62bb      	str	r3, [r7, #40]	; 0x28
 800525c:	e11d      	b.n	800549a <I2C_ScanBusFlow+0x276>
	{
		if (HAL_I2C_IsDeviceReady(_hi2c, sbf << 1, 10, 100) == HAL_OK)
 800525e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005260:	b29b      	uxth	r3, r3
 8005262:	005b      	lsls	r3, r3, #1
 8005264:	b299      	uxth	r1, r3
 8005266:	2364      	movs	r3, #100	; 0x64
 8005268:	220a      	movs	r2, #10
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f7fd f974 	bl	8002558 <HAL_I2C_IsDeviceReady>
 8005270:	4603      	mov	r3, r0
 8005272:	2b00      	cmp	r3, #0
 8005274:	f040 810e 	bne.w	8005494 <I2C_ScanBusFlow+0x270>
		{
			device_serial_numb++;
 8005278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800527a:	3301      	adds	r3, #1
 800527c:	62fb      	str	r3, [r7, #44]	; 0x2c
			switch (sbf)
 800527e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005280:	2b38      	cmp	r3, #56	; 0x38
 8005282:	f300 8097 	bgt.w	80053b4 <I2C_ScanBusFlow+0x190>
 8005286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005288:	2b20      	cmp	r3, #32
 800528a:	da59      	bge.n	8005340 <I2C_ScanBusFlow+0x11c>
 800528c:	e0e2      	b.n	8005454 <I2C_ScanBusFlow+0x230>
 800528e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005290:	3b50      	subs	r3, #80	; 0x50
 8005292:	2b27      	cmp	r3, #39	; 0x27
 8005294:	f200 80de 	bhi.w	8005454 <I2C_ScanBusFlow+0x230>
 8005298:	a201      	add	r2, pc, #4	; (adr r2, 80052a0 <I2C_ScanBusFlow+0x7c>)
 800529a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800529e:	bf00      	nop
 80052a0:	08005415 	.word	0x08005415
 80052a4:	08005455 	.word	0x08005455
 80052a8:	08005455 	.word	0x08005455
 80052ac:	08005455 	.word	0x08005455
 80052b0:	08005455 	.word	0x08005455
 80052b4:	08005455 	.word	0x08005455
 80052b8:	08005455 	.word	0x08005455
 80052bc:	08005405 	.word	0x08005405
 80052c0:	08005455 	.word	0x08005455
 80052c4:	08005455 	.word	0x08005455
 80052c8:	08005455 	.word	0x08005455
 80052cc:	08005455 	.word	0x08005455
 80052d0:	08005455 	.word	0x08005455
 80052d4:	08005455 	.word	0x08005455
 80052d8:	08005455 	.word	0x08005455
 80052dc:	08005455 	.word	0x08005455
 80052e0:	08005455 	.word	0x08005455
 80052e4:	08005455 	.word	0x08005455
 80052e8:	08005455 	.word	0x08005455
 80052ec:	08005455 	.word	0x08005455
 80052f0:	08005455 	.word	0x08005455
 80052f4:	08005455 	.word	0x08005455
 80052f8:	08005455 	.word	0x08005455
 80052fc:	08005455 	.word	0x08005455
 8005300:	08005425 	.word	0x08005425
 8005304:	08005455 	.word	0x08005455
 8005308:	08005455 	.word	0x08005455
 800530c:	08005455 	.word	0x08005455
 8005310:	08005455 	.word	0x08005455
 8005314:	08005455 	.word	0x08005455
 8005318:	08005455 	.word	0x08005455
 800531c:	08005455 	.word	0x08005455
 8005320:	08005455 	.word	0x08005455
 8005324:	08005455 	.word	0x08005455
 8005328:	08005455 	.word	0x08005455
 800532c:	08005455 	.word	0x08005455
 8005330:	08005455 	.word	0x08005455
 8005334:	08005455 	.word	0x08005455
 8005338:	08005435 	.word	0x08005435
 800533c:	08005445 	.word	0x08005445
 8005340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005342:	3b20      	subs	r3, #32
 8005344:	2b18      	cmp	r3, #24
 8005346:	f200 8085 	bhi.w	8005454 <I2C_ScanBusFlow+0x230>
 800534a:	a201      	add	r2, pc, #4	; (adr r2, 8005350 <I2C_ScanBusFlow+0x12c>)
 800534c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005350:	080053c5 	.word	0x080053c5
 8005354:	08005455 	.word	0x08005455
 8005358:	08005455 	.word	0x08005455
 800535c:	080053d5 	.word	0x080053d5
 8005360:	08005455 	.word	0x08005455
 8005364:	08005455 	.word	0x08005455
 8005368:	08005455 	.word	0x08005455
 800536c:	080053e5 	.word	0x080053e5
 8005370:	08005455 	.word	0x08005455
 8005374:	08005455 	.word	0x08005455
 8005378:	08005455 	.word	0x08005455
 800537c:	08005455 	.word	0x08005455
 8005380:	08005455 	.word	0x08005455
 8005384:	08005455 	.word	0x08005455
 8005388:	08005455 	.word	0x08005455
 800538c:	08005455 	.word	0x08005455
 8005390:	08005455 	.word	0x08005455
 8005394:	08005455 	.word	0x08005455
 8005398:	08005455 	.word	0x08005455
 800539c:	08005455 	.word	0x08005455
 80053a0:	08005455 	.word	0x08005455
 80053a4:	08005455 	.word	0x08005455
 80053a8:	08005455 	.word	0x08005455
 80053ac:	08005455 	.word	0x08005455
 80053b0:	080053f5 	.word	0x080053f5
 80053b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053b6:	2b77      	cmp	r3, #119	; 0x77
 80053b8:	dc4c      	bgt.n	8005454 <I2C_ScanBusFlow+0x230>
 80053ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053bc:	2b50      	cmp	r3, #80	; 0x50
 80053be:	f6bf af66 	bge.w	800528e <I2C_ScanBusFlow+0x6a>
 80053c2:	e047      	b.n	8005454 <I2C_ScanBusFlow+0x230>
			{
				case 0x20: sprintf(DataChar,"%d) PCF-8574"			, device_serial_numb ) ; 	break ;
 80053c4:	f107 0308 	add.w	r3, r7, #8
 80053c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053ca:	494d      	ldr	r1, [pc, #308]	; (8005500 <I2C_ScanBusFlow+0x2dc>)
 80053cc:	4618      	mov	r0, r3
 80053ce:	f000 fcc7 	bl	8005d60 <siprintf>
 80053d2:	e047      	b.n	8005464 <I2C_ScanBusFlow+0x240>
				case 0x23: sprintf(DataChar,"%d) BH-1750"			, device_serial_numb ) ; 	break ;
 80053d4:	f107 0308 	add.w	r3, r7, #8
 80053d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053da:	494a      	ldr	r1, [pc, #296]	; (8005504 <I2C_ScanBusFlow+0x2e0>)
 80053dc:	4618      	mov	r0, r3
 80053de:	f000 fcbf 	bl	8005d60 <siprintf>
 80053e2:	e03f      	b.n	8005464 <I2C_ScanBusFlow+0x240>
				case 0x27: sprintf(DataChar,"%d) FC113 "			, device_serial_numb ) ; 	break ;
 80053e4:	f107 0308 	add.w	r3, r7, #8
 80053e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053ea:	4947      	ldr	r1, [pc, #284]	; (8005508 <I2C_ScanBusFlow+0x2e4>)
 80053ec:	4618      	mov	r0, r3
 80053ee:	f000 fcb7 	bl	8005d60 <siprintf>
 80053f2:	e037      	b.n	8005464 <I2C_ScanBusFlow+0x240>
				case 0x38: sprintf(DataChar,"%d) PCF-8574"			, device_serial_numb ) ; 	break ;
 80053f4:	f107 0308 	add.w	r3, r7, #8
 80053f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053fa:	4941      	ldr	r1, [pc, #260]	; (8005500 <I2C_ScanBusFlow+0x2dc>)
 80053fc:	4618      	mov	r0, r3
 80053fe:	f000 fcaf 	bl	8005d60 <siprintf>
 8005402:	e02f      	b.n	8005464 <I2C_ScanBusFlow+0x240>
				case 0x57: sprintf(DataChar,"%d) AT24c32"			, device_serial_numb ) ; 	break ;
 8005404:	f107 0308 	add.w	r3, r7, #8
 8005408:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800540a:	4940      	ldr	r1, [pc, #256]	; (800550c <I2C_ScanBusFlow+0x2e8>)
 800540c:	4618      	mov	r0, r3
 800540e:	f000 fca7 	bl	8005d60 <siprintf>
 8005412:	e027      	b.n	8005464 <I2C_ScanBusFlow+0x240>
				case 0x50: sprintf(DataChar,"%d) AT24c256"			, device_serial_numb ) ; 	break ;
 8005414:	f107 0308 	add.w	r3, r7, #8
 8005418:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800541a:	493d      	ldr	r1, [pc, #244]	; (8005510 <I2C_ScanBusFlow+0x2ec>)
 800541c:	4618      	mov	r0, r3
 800541e:	f000 fc9f 	bl	8005d60 <siprintf>
 8005422:	e01f      	b.n	8005464 <I2C_ScanBusFlow+0x240>
				case 0x68: sprintf(DataChar,"%d) DS3231 or MPU9250"	, device_serial_numb ) ; 	break ;
 8005424:	f107 0308 	add.w	r3, r7, #8
 8005428:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800542a:	493a      	ldr	r1, [pc, #232]	; (8005514 <I2C_ScanBusFlow+0x2f0>)
 800542c:	4618      	mov	r0, r3
 800542e:	f000 fc97 	bl	8005d60 <siprintf>
 8005432:	e017      	b.n	8005464 <I2C_ScanBusFlow+0x240>
				case 0x76: sprintf(DataChar,"%d) BMP280"			, device_serial_numb ) ; 	break ;
 8005434:	f107 0308 	add.w	r3, r7, #8
 8005438:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800543a:	4937      	ldr	r1, [pc, #220]	; (8005518 <I2C_ScanBusFlow+0x2f4>)
 800543c:	4618      	mov	r0, r3
 800543e:	f000 fc8f 	bl	8005d60 <siprintf>
 8005442:	e00f      	b.n	8005464 <I2C_ScanBusFlow+0x240>
				case 0x77: sprintf(DataChar,"%d) BMP180"			, device_serial_numb ) ; 	break ;
 8005444:	f107 0308 	add.w	r3, r7, #8
 8005448:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800544a:	4934      	ldr	r1, [pc, #208]	; (800551c <I2C_ScanBusFlow+0x2f8>)
 800544c:	4618      	mov	r0, r3
 800544e:	f000 fc87 	bl	8005d60 <siprintf>
 8005452:	e007      	b.n	8005464 <I2C_ScanBusFlow+0x240>
				default:   sprintf(DataChar,"%d) Unknown"			, device_serial_numb ) ;	break ;
 8005454:	f107 0308 	add.w	r3, r7, #8
 8005458:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800545a:	4931      	ldr	r1, [pc, #196]	; (8005520 <I2C_ScanBusFlow+0x2fc>)
 800545c:	4618      	mov	r0, r3
 800545e:	f000 fc7f 	bl	8005d60 <siprintf>
 8005462:	bf00      	nop
			}// end switch
			sprintf(DataChar,"%s\tAdr: 0x%x\r\n", DataChar, sbf);
 8005464:	f107 0208 	add.w	r2, r7, #8
 8005468:	f107 0008 	add.w	r0, r7, #8
 800546c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800546e:	492d      	ldr	r1, [pc, #180]	; (8005524 <I2C_ScanBusFlow+0x300>)
 8005470:	f000 fc76 	bl	8005d60 <siprintf>
			HAL_UART_Transmit(_huart, (uint8_t *)DataChar, strlen(DataChar), 100);
 8005474:	f107 0308 	add.w	r3, r7, #8
 8005478:	4618      	mov	r0, r3
 800547a:	f7fa fe67 	bl	800014c <strlen>
 800547e:	4603      	mov	r3, r0
 8005480:	b29a      	uxth	r2, r3
 8005482:	f107 0108 	add.w	r1, r7, #8
 8005486:	2364      	movs	r3, #100	; 0x64
 8005488:	6838      	ldr	r0, [r7, #0]
 800548a:	f7fe fdea 	bl	8004062 <HAL_UART_Transmit>
			HAL_Delay(10);
 800548e:	200a      	movs	r0, #10
 8005490:	f7fb fb64 	bl	8000b5c <HAL_Delay>
	for ( int sbf = 0x07; sbf < 0x78; sbf++)
 8005494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005496:	3301      	adds	r3, #1
 8005498:	62bb      	str	r3, [r7, #40]	; 0x28
 800549a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800549c:	2b77      	cmp	r3, #119	; 0x77
 800549e:	f77f aede 	ble.w	800525e <I2C_ScanBusFlow+0x3a>
		} //end if HAL I2C1
	} // end for sbf i2c1

	if (device_serial_numb == 0) {
 80054a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d112      	bne.n	80054ce <I2C_ScanBusFlow+0x2aa>
		sprintf(DataChar,"---no devices found---\r\n");
 80054a8:	f107 0308 	add.w	r3, r7, #8
 80054ac:	491e      	ldr	r1, [pc, #120]	; (8005528 <I2C_ScanBusFlow+0x304>)
 80054ae:	4618      	mov	r0, r3
 80054b0:	f000 fc56 	bl	8005d60 <siprintf>
		HAL_UART_Transmit(_huart, (uint8_t *)DataChar, strlen(DataChar), 100);
 80054b4:	f107 0308 	add.w	r3, r7, #8
 80054b8:	4618      	mov	r0, r3
 80054ba:	f7fa fe47 	bl	800014c <strlen>
 80054be:	4603      	mov	r3, r0
 80054c0:	b29a      	uxth	r2, r3
 80054c2:	f107 0108 	add.w	r1, r7, #8
 80054c6:	2364      	movs	r3, #100	; 0x64
 80054c8:	6838      	ldr	r0, [r7, #0]
 80054ca:	f7fe fdca 	bl	8004062 <HAL_UART_Transmit>
	}
	sprintf(DataChar,"\tEnd scan I2C\r\n");
 80054ce:	f107 0308 	add.w	r3, r7, #8
 80054d2:	4916      	ldr	r1, [pc, #88]	; (800552c <I2C_ScanBusFlow+0x308>)
 80054d4:	4618      	mov	r0, r3
 80054d6:	f000 fc43 	bl	8005d60 <siprintf>
	HAL_UART_Transmit(_huart, (uint8_t *)DataChar, strlen(DataChar), 100);
 80054da:	f107 0308 	add.w	r3, r7, #8
 80054de:	4618      	mov	r0, r3
 80054e0:	f7fa fe34 	bl	800014c <strlen>
 80054e4:	4603      	mov	r3, r0
 80054e6:	b29a      	uxth	r2, r3
 80054e8:	f107 0108 	add.w	r1, r7, #8
 80054ec:	2364      	movs	r3, #100	; 0x64
 80054ee:	6838      	ldr	r0, [r7, #0]
 80054f0:	f7fe fdb7 	bl	8004062 <HAL_UART_Transmit>
}// end void I2C_ScanBus
 80054f4:	bf00      	nop
 80054f6:	3730      	adds	r7, #48	; 0x30
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bd80      	pop	{r7, pc}
 80054fc:	08007394 	.word	0x08007394
 8005500:	080073a8 	.word	0x080073a8
 8005504:	080073b8 	.word	0x080073b8
 8005508:	080073c4 	.word	0x080073c4
 800550c:	080073d0 	.word	0x080073d0
 8005510:	080073dc 	.word	0x080073dc
 8005514:	080073ec 	.word	0x080073ec
 8005518:	08007404 	.word	0x08007404
 800551c:	08007410 	.word	0x08007410
 8005520:	0800741c 	.word	0x0800741c
 8005524:	08007428 	.word	0x08007428
 8005528:	08007438 	.word	0x08007438
 800552c:	08007454 	.word	0x08007454

08005530 <Max7219_struct_init>:
*/

void Max7219_struct_init (	max7219_struct 		*handler	,
							SPI_HandleTypeDef	*_spi		,
							GPIO_TypeDef 		*_cs_port	,
							uint16_t 			 _cs_pin	) {
 8005530:	b480      	push	{r7}
 8005532:	b085      	sub	sp, #20
 8005534:	af00      	add	r7, sp, #0
 8005536:	60f8      	str	r0, [r7, #12]
 8005538:	60b9      	str	r1, [r7, #8]
 800553a:	607a      	str	r2, [r7, #4]
 800553c:	807b      	strh	r3, [r7, #2]

	handler->spi		= _spi		;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	68ba      	ldr	r2, [r7, #8]
 8005542:	601a      	str	r2, [r3, #0]
	handler->cs_port	= _cs_port	;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	687a      	ldr	r2, [r7, #4]
 8005548:	605a      	str	r2, [r3, #4]
	handler->cs_pin		= _cs_pin	;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	887a      	ldrh	r2, [r7, #2]
 800554e:	811a      	strh	r2, [r3, #8]
}
 8005550:	bf00      	nop
 8005552:	3714      	adds	r7, #20
 8005554:	46bd      	mov	sp, r7
 8005556:	bc80      	pop	{r7}
 8005558:	4770      	bx	lr

0800555a <max7219_init>:

void max7219_init(	max7219_struct 			*_max7219_handler	,
					max7219_Decode_Mode 	_decodemode			,
					max7219_LED_Intensity	_intensity			,
					max7219_Scan_Limit 		_scanlimit			,
					max7219_Shutdown 		_shutdown 			) {
 800555a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800555c:	b08d      	sub	sp, #52	; 0x34
 800555e:	af0a      	add	r7, sp, #40	; 0x28
 8005560:	6078      	str	r0, [r7, #4]
 8005562:	4608      	mov	r0, r1
 8005564:	4611      	mov	r1, r2
 8005566:	461a      	mov	r2, r3
 8005568:	4603      	mov	r3, r0
 800556a:	70fb      	strb	r3, [r7, #3]
 800556c:	460b      	mov	r3, r1
 800556e:	70bb      	strb	r3, [r7, #2]
 8005570:	4613      	mov	r3, r2
 8005572:	707b      	strb	r3, [r7, #1]

	// test - Off
	_max7219_handler->data[0] = ADDR_DISPLAY_TEST ;  _max7219_handler->data[1] = WorkMode ;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	220f      	movs	r2, #15
 8005578:	729a      	strb	r2, [r3, #10]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2200      	movs	r2, #0
 800557e:	72da      	strb	r2, [r3, #11]
	_max7219_handler->data[2] = ADDR_DISPLAY_TEST ;  _max7219_handler->data[3] = WorkMode ;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	220f      	movs	r2, #15
 8005584:	731a      	strb	r2, [r3, #12]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2200      	movs	r2, #0
 800558a:	735a      	strb	r2, [r3, #13]
	_max7219_handler->data[4] = ADDR_DISPLAY_TEST ;  _max7219_handler->data[5] = WorkMode ;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	220f      	movs	r2, #15
 8005590:	739a      	strb	r2, [r3, #14]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2200      	movs	r2, #0
 8005596:	73da      	strb	r2, [r3, #15]
	_max7219_handler->data[6] = ADDR_DISPLAY_TEST ;  _max7219_handler->data[7] = WorkMode ;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	220f      	movs	r2, #15
 800559c:	741a      	strb	r2, [r3, #16]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2200      	movs	r2, #0
 80055a2:	745a      	strb	r2, [r3, #17]
	_max7219_push_data( *_max7219_handler ) ;
 80055a4:	687e      	ldr	r6, [r7, #4]
 80055a6:	466d      	mov	r5, sp
 80055a8:	f106 0410 	add.w	r4, r6, #16
 80055ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80055ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80055b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80055b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80055b4:	6823      	ldr	r3, [r4, #0]
 80055b6:	602b      	str	r3, [r5, #0]
 80055b8:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80055bc:	f000 fb0f 	bl	8005bde <_max7219_push_data>

	// Decode Mode - No. 1 in 1
	_max7219_handler->data[0] = ADDR_DECODE_MODE ;  _max7219_handler->data[1] = _decodemode ;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2209      	movs	r2, #9
 80055c4:	729a      	strb	r2, [r3, #10]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	78fa      	ldrb	r2, [r7, #3]
 80055ca:	72da      	strb	r2, [r3, #11]
	_max7219_handler->data[2] = ADDR_DECODE_MODE ;  _max7219_handler->data[3] = _decodemode ;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2209      	movs	r2, #9
 80055d0:	731a      	strb	r2, [r3, #12]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	78fa      	ldrb	r2, [r7, #3]
 80055d6:	735a      	strb	r2, [r3, #13]
	_max7219_handler->data[4] = ADDR_DECODE_MODE ;  _max7219_handler->data[5] = _decodemode ;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2209      	movs	r2, #9
 80055dc:	739a      	strb	r2, [r3, #14]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	78fa      	ldrb	r2, [r7, #3]
 80055e2:	73da      	strb	r2, [r3, #15]
	_max7219_handler->data[6] = ADDR_DECODE_MODE ;  _max7219_handler->data[7] = _decodemode ;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2209      	movs	r2, #9
 80055e8:	741a      	strb	r2, [r3, #16]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	78fa      	ldrb	r2, [r7, #3]
 80055ee:	745a      	strb	r2, [r3, #17]
	_max7219_push_data( *_max7219_handler ) ;
 80055f0:	687e      	ldr	r6, [r7, #4]
 80055f2:	466d      	mov	r5, sp
 80055f4:	f106 0410 	add.w	r4, r6, #16
 80055f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80055fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80055fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80055fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005600:	6823      	ldr	r3, [r4, #0]
 8005602:	602b      	str	r3, [r5, #0]
 8005604:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8005608:	f000 fae9 	bl	8005bde <_max7219_push_data>

	// Intensity x/32
	_max7219_handler->data[0] = ADDR_INTENSITY ;  _max7219_handler->data[1] = _intensity ;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	220a      	movs	r2, #10
 8005610:	729a      	strb	r2, [r3, #10]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	78ba      	ldrb	r2, [r7, #2]
 8005616:	72da      	strb	r2, [r3, #11]
	_max7219_handler->data[2] = ADDR_INTENSITY ;  _max7219_handler->data[3] = _intensity ;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	220a      	movs	r2, #10
 800561c:	731a      	strb	r2, [r3, #12]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	78ba      	ldrb	r2, [r7, #2]
 8005622:	735a      	strb	r2, [r3, #13]
	_max7219_handler->data[4] = ADDR_INTENSITY ;  _max7219_handler->data[5] = _intensity ;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	220a      	movs	r2, #10
 8005628:	739a      	strb	r2, [r3, #14]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	78ba      	ldrb	r2, [r7, #2]
 800562e:	73da      	strb	r2, [r3, #15]
	_max7219_handler->data[6] = ADDR_INTENSITY ;  _max7219_handler->data[7] = _intensity ;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	220a      	movs	r2, #10
 8005634:	741a      	strb	r2, [r3, #16]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	78ba      	ldrb	r2, [r7, #2]
 800563a:	745a      	strb	r2, [r3, #17]
	_max7219_push_data( *_max7219_handler ) ;
 800563c:	687e      	ldr	r6, [r7, #4]
 800563e:	466d      	mov	r5, sp
 8005640:	f106 0410 	add.w	r4, r6, #16
 8005644:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005646:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005648:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800564a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800564c:	6823      	ldr	r3, [r4, #0]
 800564e:	602b      	str	r3, [r5, #0]
 8005650:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8005654:	f000 fac3 	bl	8005bde <_max7219_push_data>

	//Scan Limit - All
	_max7219_handler->data[0] = ADDR_SCAN_LIMIT ;  _max7219_handler->data[1] = _scanlimit ;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	220b      	movs	r2, #11
 800565c:	729a      	strb	r2, [r3, #10]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	787a      	ldrb	r2, [r7, #1]
 8005662:	72da      	strb	r2, [r3, #11]
	_max7219_handler->data[2] = ADDR_SCAN_LIMIT ;  _max7219_handler->data[3] = _scanlimit ;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	220b      	movs	r2, #11
 8005668:	731a      	strb	r2, [r3, #12]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	787a      	ldrb	r2, [r7, #1]
 800566e:	735a      	strb	r2, [r3, #13]
	_max7219_handler->data[4] = ADDR_SCAN_LIMIT ;  _max7219_handler->data[5] = _scanlimit ;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	220b      	movs	r2, #11
 8005674:	739a      	strb	r2, [r3, #14]
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	787a      	ldrb	r2, [r7, #1]
 800567a:	73da      	strb	r2, [r3, #15]
	_max7219_handler->data[6] = ADDR_SCAN_LIMIT ;  _max7219_handler->data[7] = _scanlimit ;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	220b      	movs	r2, #11
 8005680:	741a      	strb	r2, [r3, #16]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	787a      	ldrb	r2, [r7, #1]
 8005686:	745a      	strb	r2, [r3, #17]
	_max7219_push_data( *_max7219_handler ) ;
 8005688:	687e      	ldr	r6, [r7, #4]
 800568a:	466d      	mov	r5, sp
 800568c:	f106 0410 	add.w	r4, r6, #16
 8005690:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005692:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005694:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005696:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005698:	6823      	ldr	r3, [r4, #0]
 800569a:	602b      	str	r3, [r5, #0]
 800569c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80056a0:	f000 fa9d 	bl	8005bde <_max7219_push_data>

	// Shutdown - none
	// myTrans[1] -> 00 sleep
	// myTrans[1] -> 01 work
	_max7219_handler->data[0] = ADDR_SHUTDOWN;  _max7219_handler->data[1] = _shutdown;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	220c      	movs	r2, #12
 80056a8:	729a      	strb	r2, [r3, #10]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	f897 2020 	ldrb.w	r2, [r7, #32]
 80056b0:	72da      	strb	r2, [r3, #11]
	_max7219_handler->data[2] = ADDR_SHUTDOWN;  _max7219_handler->data[3] = _shutdown;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	220c      	movs	r2, #12
 80056b6:	731a      	strb	r2, [r3, #12]
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	f897 2020 	ldrb.w	r2, [r7, #32]
 80056be:	735a      	strb	r2, [r3, #13]
	_max7219_handler->data[4] = ADDR_SHUTDOWN;  _max7219_handler->data[5] = _shutdown;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	220c      	movs	r2, #12
 80056c4:	739a      	strb	r2, [r3, #14]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	f897 2020 	ldrb.w	r2, [r7, #32]
 80056cc:	73da      	strb	r2, [r3, #15]
	_max7219_handler->data[6] = ADDR_SHUTDOWN;  _max7219_handler->data[7] = _shutdown;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	220c      	movs	r2, #12
 80056d2:	741a      	strb	r2, [r3, #16]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	f897 2020 	ldrb.w	r2, [r7, #32]
 80056da:	745a      	strb	r2, [r3, #17]
	_max7219_push_data( *_max7219_handler ) ;
 80056dc:	687e      	ldr	r6, [r7, #4]
 80056de:	466d      	mov	r5, sp
 80056e0:	f106 0410 	add.w	r4, r6, #16
 80056e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80056e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80056e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80056ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80056ec:	6823      	ldr	r3, [r4, #0]
 80056ee:	602b      	str	r3, [r5, #0]
 80056f0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80056f4:	f000 fa73 	bl	8005bde <_max7219_push_data>
}
 80056f8:	bf00      	nop
 80056fa:	370c      	adds	r7, #12
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005700 <max7219_show_time>:
/***************************************************************************************/

void max7219_show_time(	max7219_struct	*_max7219_handler	,
						uint8_t 		_hour				,
						uint8_t 		_minut				) {
 8005700:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005702:	b0a5      	sub	sp, #148	; 0x94
 8005704:	af0a      	add	r7, sp, #40	; 0x28
 8005706:	6078      	str	r0, [r7, #4]
 8005708:	460b      	mov	r3, r1
 800570a:	70fb      	strb	r3, [r7, #3]
 800570c:	4613      	mov	r3, r2
 800570e:	70bb      	strb	r3, [r7, #2]

	uint8_t 	digit [DIGIT_QNT_MAX] [LINE_IN_PANEL] ;

	digit[0][7] = 0b00011111 ;
 8005710:	231f      	movs	r3, #31
 8005712:	73fb      	strb	r3, [r7, #15]
	digit[0][6] = 0b00010001 ;
 8005714:	2311      	movs	r3, #17
 8005716:	73bb      	strb	r3, [r7, #14]
	digit[0][5] = 0b00010001 ;
 8005718:	2311      	movs	r3, #17
 800571a:	737b      	strb	r3, [r7, #13]
	digit[0][4] = 0b00010001 ;
 800571c:	2311      	movs	r3, #17
 800571e:	733b      	strb	r3, [r7, #12]
	digit[0][3] = 0b00010001 ;
 8005720:	2311      	movs	r3, #17
 8005722:	72fb      	strb	r3, [r7, #11]
	digit[0][2] = 0b00010001 ;
 8005724:	2311      	movs	r3, #17
 8005726:	72bb      	strb	r3, [r7, #10]
	digit[0][1] = 0b00010001 ;
 8005728:	2311      	movs	r3, #17
 800572a:	727b      	strb	r3, [r7, #9]
	digit[0][0] = 0b00011111 ;
 800572c:	231f      	movs	r3, #31
 800572e:	723b      	strb	r3, [r7, #8]

	digit[1][7] = 0b00000100 ;
 8005730:	2304      	movs	r3, #4
 8005732:	75fb      	strb	r3, [r7, #23]
	digit[1][6] = 0b00001100 ;
 8005734:	230c      	movs	r3, #12
 8005736:	75bb      	strb	r3, [r7, #22]
	digit[1][5] = 0b00010100 ;
 8005738:	2314      	movs	r3, #20
 800573a:	757b      	strb	r3, [r7, #21]
	digit[1][4] = 0b00000100 ;
 800573c:	2304      	movs	r3, #4
 800573e:	753b      	strb	r3, [r7, #20]
	digit[1][3] = 0b00000100 ;
 8005740:	2304      	movs	r3, #4
 8005742:	74fb      	strb	r3, [r7, #19]
	digit[1][2] = 0b00000100 ;
 8005744:	2304      	movs	r3, #4
 8005746:	74bb      	strb	r3, [r7, #18]
	digit[1][1] = 0b00000100 ;
 8005748:	2304      	movs	r3, #4
 800574a:	747b      	strb	r3, [r7, #17]
	digit[1][0] = 0b00011111 ;
 800574c:	231f      	movs	r3, #31
 800574e:	743b      	strb	r3, [r7, #16]

	digit[2][7] = 0b00011111 ;
 8005750:	231f      	movs	r3, #31
 8005752:	77fb      	strb	r3, [r7, #31]
	digit[2][6] = 0b00000001 ;
 8005754:	2301      	movs	r3, #1
 8005756:	77bb      	strb	r3, [r7, #30]
	digit[2][5] = 0b00000001 ;
 8005758:	2301      	movs	r3, #1
 800575a:	777b      	strb	r3, [r7, #29]
	digit[2][4] = 0b00011111 ;
 800575c:	231f      	movs	r3, #31
 800575e:	773b      	strb	r3, [r7, #28]
	digit[2][3] = 0b00010000 ;
 8005760:	2310      	movs	r3, #16
 8005762:	76fb      	strb	r3, [r7, #27]
	digit[2][2] = 0b00010000 ;
 8005764:	2310      	movs	r3, #16
 8005766:	76bb      	strb	r3, [r7, #26]
	digit[2][1] = 0b00010000 ;
 8005768:	2310      	movs	r3, #16
 800576a:	767b      	strb	r3, [r7, #25]
	digit[2][0] = 0b00011111 ;
 800576c:	231f      	movs	r3, #31
 800576e:	763b      	strb	r3, [r7, #24]

	digit[3][7] = 0b00011111 ;
 8005770:	231f      	movs	r3, #31
 8005772:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	digit[3][6] = 0b00000001 ;
 8005776:	2301      	movs	r3, #1
 8005778:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	digit[3][5] = 0b00000001 ;
 800577c:	2301      	movs	r3, #1
 800577e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	digit[3][4] = 0b00011111 ;
 8005782:	231f      	movs	r3, #31
 8005784:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	digit[3][3] = 0b00000001 ;
 8005788:	2301      	movs	r3, #1
 800578a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	digit[3][2] = 0b00000001 ;
 800578e:	2301      	movs	r3, #1
 8005790:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	digit[3][1] = 0b00000001 ;
 8005794:	2301      	movs	r3, #1
 8005796:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	digit[3][0] = 0b00011111 ;
 800579a:	231f      	movs	r3, #31
 800579c:	f887 3020 	strb.w	r3, [r7, #32]

	digit[4][7] = 0b00010001 ;
 80057a0:	2311      	movs	r3, #17
 80057a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	digit[4][6] = 0b00010001 ;
 80057a6:	2311      	movs	r3, #17
 80057a8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	digit[4][5] = 0b00010001 ;
 80057ac:	2311      	movs	r3, #17
 80057ae:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	digit[4][4] = 0b00011111 ;
 80057b2:	231f      	movs	r3, #31
 80057b4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	digit[4][3] = 0b00000001 ;
 80057b8:	2301      	movs	r3, #1
 80057ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	digit[4][2] = 0b00000001 ;
 80057be:	2301      	movs	r3, #1
 80057c0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	digit[4][1] = 0b00000001 ;
 80057c4:	2301      	movs	r3, #1
 80057c6:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	digit[4][0] = 0b00000001 ;
 80057ca:	2301      	movs	r3, #1
 80057cc:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

	digit[5][7] = 0b00011111 ;
 80057d0:	231f      	movs	r3, #31
 80057d2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	digit[5][6] = 0b00010000 ;
 80057d6:	2310      	movs	r3, #16
 80057d8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	digit[5][5] = 0b00010000 ;
 80057dc:	2310      	movs	r3, #16
 80057de:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	digit[5][4] = 0b00011111 ;
 80057e2:	231f      	movs	r3, #31
 80057e4:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	digit[5][3] = 0b00000001 ;
 80057e8:	2301      	movs	r3, #1
 80057ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	digit[5][2] = 0b00000001 ;
 80057ee:	2301      	movs	r3, #1
 80057f0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	digit[5][1] = 0b00000001 ;
 80057f4:	2301      	movs	r3, #1
 80057f6:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	digit[5][0] = 0b00011111 ;
 80057fa:	231f      	movs	r3, #31
 80057fc:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30

	digit[6][7] = 0b00011111 ;
 8005800:	231f      	movs	r3, #31
 8005802:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	digit[6][6] = 0b00010000 ;
 8005806:	2310      	movs	r3, #16
 8005808:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	digit[6][5] = 0b00010000 ;
 800580c:	2310      	movs	r3, #16
 800580e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	digit[6][4] = 0b00011111 ;
 8005812:	231f      	movs	r3, #31
 8005814:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	digit[6][3] = 0b00010001 ;
 8005818:	2311      	movs	r3, #17
 800581a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	digit[6][2] = 0b00010001 ;
 800581e:	2311      	movs	r3, #17
 8005820:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	digit[6][1] = 0b00010001 ;
 8005824:	2311      	movs	r3, #17
 8005826:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	digit[6][0] = 0b00011111 ;
 800582a:	231f      	movs	r3, #31
 800582c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38

	digit[7][7] = 0b00011111 ;
 8005830:	231f      	movs	r3, #31
 8005832:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	digit[7][6] = 0b00000001 ;
 8005836:	2301      	movs	r3, #1
 8005838:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	digit[7][5] = 0b00000001 ;
 800583c:	2301      	movs	r3, #1
 800583e:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	digit[7][4] = 0b00000001 ;
 8005842:	2301      	movs	r3, #1
 8005844:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	digit[7][3] = 0b00000001 ;
 8005848:	2301      	movs	r3, #1
 800584a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	digit[7][2] = 0b00000001 ;
 800584e:	2301      	movs	r3, #1
 8005850:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
	digit[7][1] = 0b00000001 ;
 8005854:	2301      	movs	r3, #1
 8005856:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
	digit[7][0] = 0b00000001 ;
 800585a:	2301      	movs	r3, #1
 800585c:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

	digit[8][7] = 0b00011111 ;
 8005860:	231f      	movs	r3, #31
 8005862:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	digit[8][6] = 0b00010001 ;
 8005866:	2311      	movs	r3, #17
 8005868:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	digit[8][5] = 0b00010001 ;
 800586c:	2311      	movs	r3, #17
 800586e:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	digit[8][4] = 0b00011111 ;
 8005872:	231f      	movs	r3, #31
 8005874:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
	digit[8][3] = 0b00010001 ;
 8005878:	2311      	movs	r3, #17
 800587a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	digit[8][2] = 0b00010001 ;
 800587e:	2311      	movs	r3, #17
 8005880:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
	digit[8][1] = 0b00010001 ;
 8005884:	2311      	movs	r3, #17
 8005886:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	digit[8][0] = 0b00011111 ;
 800588a:	231f      	movs	r3, #31
 800588c:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48

	digit[9][7] = 0b00011111 ;
 8005890:	231f      	movs	r3, #31
 8005892:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	digit[9][6] = 0b00010001 ;
 8005896:	2311      	movs	r3, #17
 8005898:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
	digit[9][5] = 0b00010001 ;
 800589c:	2311      	movs	r3, #17
 800589e:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
	digit[9][4] = 0b00011111 ;
 80058a2:	231f      	movs	r3, #31
 80058a4:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
	digit[9][3] = 0b00000001 ;
 80058a8:	2301      	movs	r3, #1
 80058aa:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
	digit[9][2] = 0b00000001 ;
 80058ae:	2301      	movs	r3, #1
 80058b0:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
	digit[9][1] = 0b00000001 ;
 80058b4:	2301      	movs	r3, #1
 80058b6:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
	digit[9][0] = 0b00011111 ;
 80058ba:	231f      	movs	r3, #31
 80058bc:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50

	digit[10][7] = 0b01000001 ;
 80058c0:	2341      	movs	r3, #65	; 0x41
 80058c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	digit[10][6] = 0b01000001 ;
 80058c6:	2341      	movs	r3, #65	; 0x41
 80058c8:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	digit[10][5] = 0b01000001 ;
 80058cc:	2341      	movs	r3, #65	; 0x41
 80058ce:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	digit[10][4] = 0b01000001 ;
 80058d2:	2341      	movs	r3, #65	; 0x41
 80058d4:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
	digit[10][3] = 0b01000001 ;
 80058d8:	2341      	movs	r3, #65	; 0x41
 80058da:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
	digit[10][2] = 0b00100010 ;
 80058de:	2322      	movs	r3, #34	; 0x22
 80058e0:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
	digit[10][1] = 0b00010100 ;
 80058e4:	2314      	movs	r3, #20
 80058e6:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
	digit[10][0] = 0b00001001 ;
 80058ea:	2309      	movs	r3, #9
 80058ec:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58

	for (uint8_t line=0; line<8; line++)	{
 80058f0:	2300      	movs	r3, #0
 80058f2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80058f6:	e06c      	b.n	80059d2 <max7219_show_time+0x2d2>
		_max7219_handler->panel[0][line] = digit[_hour/10] [line] << 1 ;	//	We shift the digits from the right edge
 80058f8:	78fb      	ldrb	r3, [r7, #3]
 80058fa:	4a65      	ldr	r2, [pc, #404]	; (8005a90 <max7219_show_time+0x390>)
 80058fc:	fba2 2303 	umull	r2, r3, r2, r3
 8005900:	08db      	lsrs	r3, r3, #3
 8005902:	b2db      	uxtb	r3, r3
 8005904:	461a      	mov	r2, r3
 8005906:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800590a:	00d2      	lsls	r2, r2, #3
 800590c:	3268      	adds	r2, #104	; 0x68
 800590e:	443a      	add	r2, r7
 8005910:	4413      	add	r3, r2
 8005912:	3b60      	subs	r3, #96	; 0x60
 8005914:	781a      	ldrb	r2, [r3, #0]
 8005916:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800591a:	0052      	lsls	r2, r2, #1
 800591c:	b2d1      	uxtb	r1, r2
 800591e:	687a      	ldr	r2, [r7, #4]
 8005920:	4413      	add	r3, r2
 8005922:	460a      	mov	r2, r1
 8005924:	749a      	strb	r2, [r3, #18]
		_max7219_handler->panel[1][line] = digit[_hour%10] [line] << 2 ;	//		and bringing digits together.
 8005926:	78fa      	ldrb	r2, [r7, #3]
 8005928:	4b59      	ldr	r3, [pc, #356]	; (8005a90 <max7219_show_time+0x390>)
 800592a:	fba3 1302 	umull	r1, r3, r3, r2
 800592e:	08d9      	lsrs	r1, r3, #3
 8005930:	460b      	mov	r3, r1
 8005932:	009b      	lsls	r3, r3, #2
 8005934:	440b      	add	r3, r1
 8005936:	005b      	lsls	r3, r3, #1
 8005938:	1ad3      	subs	r3, r2, r3
 800593a:	b2db      	uxtb	r3, r3
 800593c:	461a      	mov	r2, r3
 800593e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005942:	00d2      	lsls	r2, r2, #3
 8005944:	3268      	adds	r2, #104	; 0x68
 8005946:	443a      	add	r2, r7
 8005948:	4413      	add	r3, r2
 800594a:	3b60      	subs	r3, #96	; 0x60
 800594c:	781a      	ldrb	r2, [r3, #0]
 800594e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005952:	0092      	lsls	r2, r2, #2
 8005954:	b2d1      	uxtb	r1, r2
 8005956:	687a      	ldr	r2, [r7, #4]
 8005958:	4413      	add	r3, r2
 800595a:	460a      	mov	r2, r1
 800595c:	769a      	strb	r2, [r3, #26]
		_max7219_handler->panel[2][line] = digit[_minut/10][line] << 1 ;
 800595e:	78bb      	ldrb	r3, [r7, #2]
 8005960:	4a4b      	ldr	r2, [pc, #300]	; (8005a90 <max7219_show_time+0x390>)
 8005962:	fba2 2303 	umull	r2, r3, r2, r3
 8005966:	08db      	lsrs	r3, r3, #3
 8005968:	b2db      	uxtb	r3, r3
 800596a:	461a      	mov	r2, r3
 800596c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005970:	00d2      	lsls	r2, r2, #3
 8005972:	3268      	adds	r2, #104	; 0x68
 8005974:	443a      	add	r2, r7
 8005976:	4413      	add	r3, r2
 8005978:	3b60      	subs	r3, #96	; 0x60
 800597a:	781a      	ldrb	r2, [r3, #0]
 800597c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005980:	0052      	lsls	r2, r2, #1
 8005982:	b2d1      	uxtb	r1, r2
 8005984:	687a      	ldr	r2, [r7, #4]
 8005986:	4413      	add	r3, r2
 8005988:	460a      	mov	r2, r1
 800598a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		_max7219_handler->panel[3][line] = digit[_minut%10][line] << 2 ;
 800598e:	78ba      	ldrb	r2, [r7, #2]
 8005990:	4b3f      	ldr	r3, [pc, #252]	; (8005a90 <max7219_show_time+0x390>)
 8005992:	fba3 1302 	umull	r1, r3, r3, r2
 8005996:	08d9      	lsrs	r1, r3, #3
 8005998:	460b      	mov	r3, r1
 800599a:	009b      	lsls	r3, r3, #2
 800599c:	440b      	add	r3, r1
 800599e:	005b      	lsls	r3, r3, #1
 80059a0:	1ad3      	subs	r3, r2, r3
 80059a2:	b2db      	uxtb	r3, r3
 80059a4:	461a      	mov	r2, r3
 80059a6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80059aa:	00d2      	lsls	r2, r2, #3
 80059ac:	3268      	adds	r2, #104	; 0x68
 80059ae:	443a      	add	r2, r7
 80059b0:	4413      	add	r3, r2
 80059b2:	3b60      	subs	r3, #96	; 0x60
 80059b4:	781a      	ldrb	r2, [r3, #0]
 80059b6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80059ba:	0092      	lsls	r2, r2, #2
 80059bc:	b2d1      	uxtb	r1, r2
 80059be:	687a      	ldr	r2, [r7, #4]
 80059c0:	4413      	add	r3, r2
 80059c2:	460a      	mov	r2, r1
 80059c4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	for (uint8_t line=0; line<8; line++)	{
 80059c8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80059cc:	3301      	adds	r3, #1
 80059ce:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80059d2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80059d6:	2b07      	cmp	r3, #7
 80059d8:	d98e      	bls.n	80058f8 <max7219_show_time+0x1f8>
	}

	#ifdef RANDOM_DOT
	uint8_t random_qnt_u8 = 1 + (uint8_t) rand() % RANDOM_ERROR_QNT ;
 80059da:	f000 f983 	bl	8005ce4 <rand>
 80059de:	2301      	movs	r3, #1
 80059e0:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	for (uint8_t r=0; r<random_qnt_u8; r++) {
 80059e4:	2300      	movs	r3, #0
 80059e6:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 80059ea:	e039      	b.n	8005a60 <max7219_show_time+0x360>
		uint8_t random_panel_u8 = (uint8_t) rand() % PANEL_QNT ;
 80059ec:	f000 f97a 	bl	8005ce4 <rand>
 80059f0:	4603      	mov	r3, r0
 80059f2:	b2db      	uxtb	r3, r3
 80059f4:	f003 0303 	and.w	r3, r3, #3
 80059f8:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
		uint8_t random_lines_u8 = (uint8_t) rand() % LINE_IN_PANEL ;
 80059fc:	f000 f972 	bl	8005ce4 <rand>
 8005a00:	4603      	mov	r3, r0
 8005a02:	b2db      	uxtb	r3, r3
 8005a04:	f003 0307 	and.w	r3, r3, #7
 8005a08:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
		uint8_t random_point_u8 = (uint8_t) rand() % DOT_IN_LINE ;
 8005a0c:	f000 f96a 	bl	8005ce4 <rand>
 8005a10:	4603      	mov	r3, r0
 8005a12:	b2db      	uxtb	r3, r3
 8005a14:	f003 0307 	and.w	r3, r3, #7
 8005a18:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
		BIT_TOGGLE( _max7219_handler->panel[random_panel_u8][random_lines_u8] , random_point_u8) ;
 8005a1c:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 8005a20:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8005a24:	6879      	ldr	r1, [r7, #4]
 8005a26:	00d2      	lsls	r2, r2, #3
 8005a28:	440a      	add	r2, r1
 8005a2a:	4413      	add	r3, r2
 8005a2c:	3312      	adds	r3, #18
 8005a2e:	7818      	ldrb	r0, [r3, #0]
 8005a30:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 8005a34:	2201      	movs	r2, #1
 8005a36:	fa02 f303 	lsl.w	r3, r2, r3
 8005a3a:	b2d9      	uxtb	r1, r3
 8005a3c:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 8005a40:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8005a44:	4041      	eors	r1, r0
 8005a46:	b2c8      	uxtb	r0, r1
 8005a48:	6879      	ldr	r1, [r7, #4]
 8005a4a:	00d2      	lsls	r2, r2, #3
 8005a4c:	440a      	add	r2, r1
 8005a4e:	4413      	add	r3, r2
 8005a50:	3312      	adds	r3, #18
 8005a52:	4602      	mov	r2, r0
 8005a54:	701a      	strb	r2, [r3, #0]
	for (uint8_t r=0; r<random_qnt_u8; r++) {
 8005a56:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8005a5a:	3301      	adds	r3, #1
 8005a5c:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8005a60:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 8005a64:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8005a68:	429a      	cmp	r2, r3
 8005a6a:	d3bf      	bcc.n	80059ec <max7219_show_time+0x2ec>
	}
	#endif
	_max7219_show_all( *_max7219_handler ) ;
 8005a6c:	687e      	ldr	r6, [r7, #4]
 8005a6e:	466d      	mov	r5, sp
 8005a70:	f106 0410 	add.w	r4, r6, #16
 8005a74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005a76:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005a78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005a7a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005a7c:	6823      	ldr	r3, [r4, #0]
 8005a7e:	602b      	str	r3, [r5, #0]
 8005a80:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8005a84:	f000 f806 	bl	8005a94 <_max7219_show_all>
}
 8005a88:	bf00      	nop
 8005a8a:	376c      	adds	r7, #108	; 0x6c
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a90:	cccccccd 	.word	0xcccccccd

08005a94 <_max7219_show_all>:
/***************************************************************************************/

void _max7219_show_all( max7219_struct		_max7219_handler ) {
 8005a94:	b084      	sub	sp, #16
 8005a96:	b5b0      	push	{r4, r5, r7, lr}
 8005a98:	b08c      	sub	sp, #48	; 0x30
 8005a9a:	af0a      	add	r7, sp, #40	; 0x28
 8005a9c:	f107 0418 	add.w	r4, r7, #24
 8005aa0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

//	uint8_t myTrans[8]; // 1 - for  razryad or Adres; 2- znachenie
	for (uint8_t i=0; i<8; i++) {
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	71fb      	strb	r3, [r7, #7]
 8005aa8:	e049      	b.n	8005b3e <_max7219_show_all+0xaa>
		uint8_t addr_u8 = i + ADDR_DIGIT_0;
 8005aaa:	79fb      	ldrb	r3, [r7, #7]
 8005aac:	3301      	adds	r3, #1
 8005aae:	71bb      	strb	r3, [r7, #6]
		_max7219_handler.data[6] = addr_u8 ;  _max7219_handler.data[7] = inverse_order_in_byte(_max7219_handler.panel[0][i] ) ;
 8005ab0:	79bb      	ldrb	r3, [r7, #6]
 8005ab2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8005ab6:	79fb      	ldrb	r3, [r7, #7]
 8005ab8:	3318      	adds	r3, #24
 8005aba:	443b      	add	r3, r7
 8005abc:	7c9b      	ldrb	r3, [r3, #18]
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f000 f848 	bl	8005b54 <inverse_order_in_byte>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
		_max7219_handler.data[4] = addr_u8 ;  _max7219_handler.data[5] = inverse_order_in_byte(_max7219_handler.panel[1][i] ) ;
 8005aca:	79bb      	ldrb	r3, [r7, #6]
 8005acc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005ad0:	79fb      	ldrb	r3, [r7, #7]
 8005ad2:	3318      	adds	r3, #24
 8005ad4:	443b      	add	r3, r7
 8005ad6:	7e9b      	ldrb	r3, [r3, #26]
 8005ad8:	4618      	mov	r0, r3
 8005ada:	f000 f83b 	bl	8005b54 <inverse_order_in_byte>
 8005ade:	4603      	mov	r3, r0
 8005ae0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		_max7219_handler.data[2] = addr_u8 ;  _max7219_handler.data[3] = inverse_order_in_byte(_max7219_handler.panel[2][i] ) ;
 8005ae4:	79bb      	ldrb	r3, [r7, #6]
 8005ae6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8005aea:	79fb      	ldrb	r3, [r7, #7]
 8005aec:	3318      	adds	r3, #24
 8005aee:	443b      	add	r3, r7
 8005af0:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8005af4:	4618      	mov	r0, r3
 8005af6:	f000 f82d 	bl	8005b54 <inverse_order_in_byte>
 8005afa:	4603      	mov	r3, r0
 8005afc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		_max7219_handler.data[0] = addr_u8 ;  _max7219_handler.data[1] = inverse_order_in_byte(_max7219_handler.panel[3][i] ) ;
 8005b00:	79bb      	ldrb	r3, [r7, #6]
 8005b02:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005b06:	79fb      	ldrb	r3, [r7, #7]
 8005b08:	3318      	adds	r3, #24
 8005b0a:	443b      	add	r3, r7
 8005b0c:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8005b10:	4618      	mov	r0, r3
 8005b12:	f000 f81f 	bl	8005b54 <inverse_order_in_byte>
 8005b16:	4603      	mov	r3, r0
 8005b18:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		_max7219_push_data( _max7219_handler ) ;
 8005b1c:	466d      	mov	r5, sp
 8005b1e:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8005b22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005b24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005b26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005b28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005b2a:	6823      	ldr	r3, [r4, #0]
 8005b2c:	602b      	str	r3, [r5, #0]
 8005b2e:	f107 0318 	add.w	r3, r7, #24
 8005b32:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005b34:	f000 f853 	bl	8005bde <_max7219_push_data>
	for (uint8_t i=0; i<8; i++) {
 8005b38:	79fb      	ldrb	r3, [r7, #7]
 8005b3a:	3301      	adds	r3, #1
 8005b3c:	71fb      	strb	r3, [r7, #7]
 8005b3e:	79fb      	ldrb	r3, [r7, #7]
 8005b40:	2b07      	cmp	r3, #7
 8005b42:	d9b2      	bls.n	8005aaa <_max7219_show_all+0x16>
	}
}
 8005b44:	bf00      	nop
 8005b46:	bf00      	nop
 8005b48:	3708      	adds	r7, #8
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8005b50:	b004      	add	sp, #16
 8005b52:	4770      	bx	lr

08005b54 <inverse_order_in_byte>:
/***************************************************************************************/

uint8_t inverse_order_in_byte (uint8_t 		input) {
 8005b54:	b480      	push	{r7}
 8005b56:	b085      	sub	sp, #20
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	71fb      	strb	r3, [r7, #7]

    uint8_t var_u8 =((input & 0x01) << 7) |
 8005b5e:	79fb      	ldrb	r3, [r7, #7]
 8005b60:	01db      	lsls	r3, r3, #7
 8005b62:	b25a      	sxtb	r2, r3
					((input & 0x02) << 5) |
 8005b64:	79fb      	ldrb	r3, [r7, #7]
 8005b66:	015b      	lsls	r3, r3, #5
 8005b68:	b25b      	sxtb	r3, r3
 8005b6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b6e:	b25b      	sxtb	r3, r3
    uint8_t var_u8 =((input & 0x01) << 7) |
 8005b70:	4313      	orrs	r3, r2
 8005b72:	b25a      	sxtb	r2, r3
					((input & 0x04) << 3) |
 8005b74:	79fb      	ldrb	r3, [r7, #7]
 8005b76:	00db      	lsls	r3, r3, #3
 8005b78:	b25b      	sxtb	r3, r3
 8005b7a:	f003 0320 	and.w	r3, r3, #32
 8005b7e:	b25b      	sxtb	r3, r3
					((input & 0x02) << 5) |
 8005b80:	4313      	orrs	r3, r2
 8005b82:	b25a      	sxtb	r2, r3
					((input & 0x08) << 1) |
 8005b84:	79fb      	ldrb	r3, [r7, #7]
 8005b86:	005b      	lsls	r3, r3, #1
 8005b88:	b25b      	sxtb	r3, r3
 8005b8a:	f003 0310 	and.w	r3, r3, #16
 8005b8e:	b25b      	sxtb	r3, r3
					((input & 0x04) << 3) |
 8005b90:	4313      	orrs	r3, r2
 8005b92:	b25a      	sxtb	r2, r3
					((input & 0x10) >> 1) |
 8005b94:	79fb      	ldrb	r3, [r7, #7]
 8005b96:	105b      	asrs	r3, r3, #1
 8005b98:	b25b      	sxtb	r3, r3
 8005b9a:	f003 0308 	and.w	r3, r3, #8
 8005b9e:	b25b      	sxtb	r3, r3
					((input & 0x08) << 1) |
 8005ba0:	4313      	orrs	r3, r2
 8005ba2:	b25a      	sxtb	r2, r3
					((input & 0x20) >> 3) |
 8005ba4:	79fb      	ldrb	r3, [r7, #7]
 8005ba6:	10db      	asrs	r3, r3, #3
 8005ba8:	b25b      	sxtb	r3, r3
 8005baa:	f003 0304 	and.w	r3, r3, #4
 8005bae:	b25b      	sxtb	r3, r3
					((input & 0x10) >> 1) |
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	b25a      	sxtb	r2, r3
					((input & 0x40) >> 5) |
 8005bb4:	79fb      	ldrb	r3, [r7, #7]
 8005bb6:	115b      	asrs	r3, r3, #5
 8005bb8:	b25b      	sxtb	r3, r3
 8005bba:	f003 0302 	and.w	r3, r3, #2
 8005bbe:	b25b      	sxtb	r3, r3
					((input & 0x20) >> 3) |
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	b25a      	sxtb	r2, r3
					((input & 0x80) >> 7) ;
 8005bc4:	79fb      	ldrb	r3, [r7, #7]
 8005bc6:	09db      	lsrs	r3, r3, #7
 8005bc8:	b2db      	uxtb	r3, r3
 8005bca:	b25b      	sxtb	r3, r3
					((input & 0x40) >> 5) |
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	b25b      	sxtb	r3, r3
    uint8_t var_u8 =((input & 0x01) << 7) |
 8005bd0:	73fb      	strb	r3, [r7, #15]
    return var_u8 ;
 8005bd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	3714      	adds	r7, #20
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bc80      	pop	{r7}
 8005bdc:	4770      	bx	lr

08005bde <_max7219_push_data>:
	_max7219_handler->data[6] = ADDR_DISPLAY_TEST ;  _max7219_handler->data[7] = WorkMode ;
	_max7219_push_data( *_max7219_handler ) ;
}
/***************************************************************************************/

void _max7219_push_data( max7219_struct 	_max7219_handler ) {
 8005bde:	b084      	sub	sp, #16
 8005be0:	b5b0      	push	{r4, r5, r7, lr}
 8005be2:	b08a      	sub	sp, #40	; 0x28
 8005be4:	af0a      	add	r7, sp, #40	; 0x28
 8005be6:	f107 0410 	add.w	r4, r7, #16
 8005bea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    HAL_SPI_Transmit( _max7219_handler.spi , _max7219_handler.data , BYTE_IN_SPI_PACKAGE , SPI_PACKAGE_TIMEOUT ) ;
 8005bee:	6938      	ldr	r0, [r7, #16]
 8005bf0:	f107 011a 	add.w	r1, r7, #26
 8005bf4:	2303      	movs	r3, #3
 8005bf6:	2208      	movs	r2, #8
 8005bf8:	f7fe f804 	bl	8003c04 <HAL_SPI_Transmit>
    _max7219_write_strob( _max7219_handler ) ;
 8005bfc:	466d      	mov	r5, sp
 8005bfe:	f107 0420 	add.w	r4, r7, #32
 8005c02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005c04:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005c06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005c08:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005c0a:	6823      	ldr	r3, [r4, #0]
 8005c0c:	602b      	str	r3, [r5, #0]
 8005c0e:	f107 0310 	add.w	r3, r7, #16
 8005c12:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005c14:	f000 f806 	bl	8005c24 <_max7219_write_strob>
}
 8005c18:	bf00      	nop
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8005c20:	b004      	add	sp, #16
 8005c22:	4770      	bx	lr

08005c24 <_max7219_write_strob>:
/***************************************************************************************/

void _max7219_write_strob( max7219_struct 	_max7219_handler ) {
 8005c24:	b084      	sub	sp, #16
 8005c26:	b580      	push	{r7, lr}
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	f107 0c08 	add.w	ip, r7, #8
 8005c2e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	HAL_GPIO_WritePin( _max7219_handler.cs_port , _max7219_handler.cs_pin , SET ) ;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	8a39      	ldrh	r1, [r7, #16]
 8005c36:	2201      	movs	r2, #1
 8005c38:	4618      	mov	r0, r3
 8005c3a:	f7fb fe9d 	bl	8001978 <HAL_GPIO_WritePin>
	//HAL_Delay( 1 ) ;
	Local_delay( WRITE_STROB_DELAY ) ;
 8005c3e:	200a      	movs	r0, #10
 8005c40:	f000 f80c 	bl	8005c5c <Local_delay>
	HAL_GPIO_WritePin( _max7219_handler.cs_port , _max7219_handler.cs_pin , RESET ) ;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	8a39      	ldrh	r1, [r7, #16]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	f7fb fe94 	bl	8001978 <HAL_GPIO_WritePin>
}
 8005c50:	bf00      	nop
 8005c52:	46bd      	mov	sp, r7
 8005c54:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005c58:	b004      	add	sp, #16
 8005c5a:	4770      	bx	lr

08005c5c <Local_delay>:
/***************************************************************************************/

void Local_delay ( uint32_t _delay_u32 ) {
 8005c5c:	b480      	push	{r7}
 8005c5e:	b083      	sub	sp, #12
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]

	for ( ; _delay_u32 > 0; _delay_u32-- ) {
 8005c64:	e003      	b.n	8005c6e <Local_delay+0x12>
		__asm( "nop" ) ;
 8005c66:	bf00      	nop
	for ( ; _delay_u32 > 0; _delay_u32-- ) {
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	3b01      	subs	r3, #1
 8005c6c:	607b      	str	r3, [r7, #4]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d1f8      	bne.n	8005c66 <Local_delay+0xa>
	}
}
 8005c74:	bf00      	nop
 8005c76:	bf00      	nop
 8005c78:	370c      	adds	r7, #12
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bc80      	pop	{r7}
 8005c7e:	4770      	bx	lr

08005c80 <__errno>:
 8005c80:	4b01      	ldr	r3, [pc, #4]	; (8005c88 <__errno+0x8>)
 8005c82:	6818      	ldr	r0, [r3, #0]
 8005c84:	4770      	bx	lr
 8005c86:	bf00      	nop
 8005c88:	2000000c 	.word	0x2000000c

08005c8c <__libc_init_array>:
 8005c8c:	b570      	push	{r4, r5, r6, lr}
 8005c8e:	2600      	movs	r6, #0
 8005c90:	4d0c      	ldr	r5, [pc, #48]	; (8005cc4 <__libc_init_array+0x38>)
 8005c92:	4c0d      	ldr	r4, [pc, #52]	; (8005cc8 <__libc_init_array+0x3c>)
 8005c94:	1b64      	subs	r4, r4, r5
 8005c96:	10a4      	asrs	r4, r4, #2
 8005c98:	42a6      	cmp	r6, r4
 8005c9a:	d109      	bne.n	8005cb0 <__libc_init_array+0x24>
 8005c9c:	f001 fa3c 	bl	8007118 <_init>
 8005ca0:	2600      	movs	r6, #0
 8005ca2:	4d0a      	ldr	r5, [pc, #40]	; (8005ccc <__libc_init_array+0x40>)
 8005ca4:	4c0a      	ldr	r4, [pc, #40]	; (8005cd0 <__libc_init_array+0x44>)
 8005ca6:	1b64      	subs	r4, r4, r5
 8005ca8:	10a4      	asrs	r4, r4, #2
 8005caa:	42a6      	cmp	r6, r4
 8005cac:	d105      	bne.n	8005cba <__libc_init_array+0x2e>
 8005cae:	bd70      	pop	{r4, r5, r6, pc}
 8005cb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cb4:	4798      	blx	r3
 8005cb6:	3601      	adds	r6, #1
 8005cb8:	e7ee      	b.n	8005c98 <__libc_init_array+0xc>
 8005cba:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cbe:	4798      	blx	r3
 8005cc0:	3601      	adds	r6, #1
 8005cc2:	e7f2      	b.n	8005caa <__libc_init_array+0x1e>
 8005cc4:	080075c4 	.word	0x080075c4
 8005cc8:	080075c4 	.word	0x080075c4
 8005ccc:	080075c4 	.word	0x080075c4
 8005cd0:	080075c8 	.word	0x080075c8

08005cd4 <memset>:
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	4402      	add	r2, r0
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d100      	bne.n	8005cde <memset+0xa>
 8005cdc:	4770      	bx	lr
 8005cde:	f803 1b01 	strb.w	r1, [r3], #1
 8005ce2:	e7f9      	b.n	8005cd8 <memset+0x4>

08005ce4 <rand>:
 8005ce4:	4b16      	ldr	r3, [pc, #88]	; (8005d40 <rand+0x5c>)
 8005ce6:	b510      	push	{r4, lr}
 8005ce8:	681c      	ldr	r4, [r3, #0]
 8005cea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005cec:	b9b3      	cbnz	r3, 8005d1c <rand+0x38>
 8005cee:	2018      	movs	r0, #24
 8005cf0:	f000 f886 	bl	8005e00 <malloc>
 8005cf4:	4602      	mov	r2, r0
 8005cf6:	63a0      	str	r0, [r4, #56]	; 0x38
 8005cf8:	b920      	cbnz	r0, 8005d04 <rand+0x20>
 8005cfa:	214e      	movs	r1, #78	; 0x4e
 8005cfc:	4b11      	ldr	r3, [pc, #68]	; (8005d44 <rand+0x60>)
 8005cfe:	4812      	ldr	r0, [pc, #72]	; (8005d48 <rand+0x64>)
 8005d00:	f000 f84e 	bl	8005da0 <__assert_func>
 8005d04:	4911      	ldr	r1, [pc, #68]	; (8005d4c <rand+0x68>)
 8005d06:	4b12      	ldr	r3, [pc, #72]	; (8005d50 <rand+0x6c>)
 8005d08:	e9c0 1300 	strd	r1, r3, [r0]
 8005d0c:	4b11      	ldr	r3, [pc, #68]	; (8005d54 <rand+0x70>)
 8005d0e:	2100      	movs	r1, #0
 8005d10:	6083      	str	r3, [r0, #8]
 8005d12:	230b      	movs	r3, #11
 8005d14:	8183      	strh	r3, [r0, #12]
 8005d16:	2001      	movs	r0, #1
 8005d18:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8005d1c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8005d1e:	4a0e      	ldr	r2, [pc, #56]	; (8005d58 <rand+0x74>)
 8005d20:	6920      	ldr	r0, [r4, #16]
 8005d22:	6963      	ldr	r3, [r4, #20]
 8005d24:	4342      	muls	r2, r0
 8005d26:	490d      	ldr	r1, [pc, #52]	; (8005d5c <rand+0x78>)
 8005d28:	fb01 2203 	mla	r2, r1, r3, r2
 8005d2c:	fba0 0101 	umull	r0, r1, r0, r1
 8005d30:	1c43      	adds	r3, r0, #1
 8005d32:	eb42 0001 	adc.w	r0, r2, r1
 8005d36:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8005d3a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8005d3e:	bd10      	pop	{r4, pc}
 8005d40:	2000000c 	.word	0x2000000c
 8005d44:	08007480 	.word	0x08007480
 8005d48:	08007497 	.word	0x08007497
 8005d4c:	abcd330e 	.word	0xabcd330e
 8005d50:	e66d1234 	.word	0xe66d1234
 8005d54:	0005deec 	.word	0x0005deec
 8005d58:	5851f42d 	.word	0x5851f42d
 8005d5c:	4c957f2d 	.word	0x4c957f2d

08005d60 <siprintf>:
 8005d60:	b40e      	push	{r1, r2, r3}
 8005d62:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005d66:	b500      	push	{lr}
 8005d68:	b09c      	sub	sp, #112	; 0x70
 8005d6a:	ab1d      	add	r3, sp, #116	; 0x74
 8005d6c:	9002      	str	r0, [sp, #8]
 8005d6e:	9006      	str	r0, [sp, #24]
 8005d70:	9107      	str	r1, [sp, #28]
 8005d72:	9104      	str	r1, [sp, #16]
 8005d74:	4808      	ldr	r0, [pc, #32]	; (8005d98 <siprintf+0x38>)
 8005d76:	4909      	ldr	r1, [pc, #36]	; (8005d9c <siprintf+0x3c>)
 8005d78:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d7c:	9105      	str	r1, [sp, #20]
 8005d7e:	6800      	ldr	r0, [r0, #0]
 8005d80:	a902      	add	r1, sp, #8
 8005d82:	9301      	str	r3, [sp, #4]
 8005d84:	f000 f97c 	bl	8006080 <_svfiprintf_r>
 8005d88:	2200      	movs	r2, #0
 8005d8a:	9b02      	ldr	r3, [sp, #8]
 8005d8c:	701a      	strb	r2, [r3, #0]
 8005d8e:	b01c      	add	sp, #112	; 0x70
 8005d90:	f85d eb04 	ldr.w	lr, [sp], #4
 8005d94:	b003      	add	sp, #12
 8005d96:	4770      	bx	lr
 8005d98:	2000000c 	.word	0x2000000c
 8005d9c:	ffff0208 	.word	0xffff0208

08005da0 <__assert_func>:
 8005da0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005da2:	4614      	mov	r4, r2
 8005da4:	461a      	mov	r2, r3
 8005da6:	4b09      	ldr	r3, [pc, #36]	; (8005dcc <__assert_func+0x2c>)
 8005da8:	4605      	mov	r5, r0
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	68d8      	ldr	r0, [r3, #12]
 8005dae:	b14c      	cbz	r4, 8005dc4 <__assert_func+0x24>
 8005db0:	4b07      	ldr	r3, [pc, #28]	; (8005dd0 <__assert_func+0x30>)
 8005db2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005db6:	9100      	str	r1, [sp, #0]
 8005db8:	462b      	mov	r3, r5
 8005dba:	4906      	ldr	r1, [pc, #24]	; (8005dd4 <__assert_func+0x34>)
 8005dbc:	f000 f80e 	bl	8005ddc <fiprintf>
 8005dc0:	f000 fe1c 	bl	80069fc <abort>
 8005dc4:	4b04      	ldr	r3, [pc, #16]	; (8005dd8 <__assert_func+0x38>)
 8005dc6:	461c      	mov	r4, r3
 8005dc8:	e7f3      	b.n	8005db2 <__assert_func+0x12>
 8005dca:	bf00      	nop
 8005dcc:	2000000c 	.word	0x2000000c
 8005dd0:	080074f2 	.word	0x080074f2
 8005dd4:	080074ff 	.word	0x080074ff
 8005dd8:	0800752d 	.word	0x0800752d

08005ddc <fiprintf>:
 8005ddc:	b40e      	push	{r1, r2, r3}
 8005dde:	b503      	push	{r0, r1, lr}
 8005de0:	4601      	mov	r1, r0
 8005de2:	ab03      	add	r3, sp, #12
 8005de4:	4805      	ldr	r0, [pc, #20]	; (8005dfc <fiprintf+0x20>)
 8005de6:	f853 2b04 	ldr.w	r2, [r3], #4
 8005dea:	6800      	ldr	r0, [r0, #0]
 8005dec:	9301      	str	r3, [sp, #4]
 8005dee:	f000 fa6f 	bl	80062d0 <_vfiprintf_r>
 8005df2:	b002      	add	sp, #8
 8005df4:	f85d eb04 	ldr.w	lr, [sp], #4
 8005df8:	b003      	add	sp, #12
 8005dfa:	4770      	bx	lr
 8005dfc:	2000000c 	.word	0x2000000c

08005e00 <malloc>:
 8005e00:	4b02      	ldr	r3, [pc, #8]	; (8005e0c <malloc+0xc>)
 8005e02:	4601      	mov	r1, r0
 8005e04:	6818      	ldr	r0, [r3, #0]
 8005e06:	f000 b86b 	b.w	8005ee0 <_malloc_r>
 8005e0a:	bf00      	nop
 8005e0c:	2000000c 	.word	0x2000000c

08005e10 <_free_r>:
 8005e10:	b538      	push	{r3, r4, r5, lr}
 8005e12:	4605      	mov	r5, r0
 8005e14:	2900      	cmp	r1, #0
 8005e16:	d040      	beq.n	8005e9a <_free_r+0x8a>
 8005e18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e1c:	1f0c      	subs	r4, r1, #4
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	bfb8      	it	lt
 8005e22:	18e4      	addlt	r4, r4, r3
 8005e24:	f001 f844 	bl	8006eb0 <__malloc_lock>
 8005e28:	4a1c      	ldr	r2, [pc, #112]	; (8005e9c <_free_r+0x8c>)
 8005e2a:	6813      	ldr	r3, [r2, #0]
 8005e2c:	b933      	cbnz	r3, 8005e3c <_free_r+0x2c>
 8005e2e:	6063      	str	r3, [r4, #4]
 8005e30:	6014      	str	r4, [r2, #0]
 8005e32:	4628      	mov	r0, r5
 8005e34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005e38:	f001 b840 	b.w	8006ebc <__malloc_unlock>
 8005e3c:	42a3      	cmp	r3, r4
 8005e3e:	d908      	bls.n	8005e52 <_free_r+0x42>
 8005e40:	6820      	ldr	r0, [r4, #0]
 8005e42:	1821      	adds	r1, r4, r0
 8005e44:	428b      	cmp	r3, r1
 8005e46:	bf01      	itttt	eq
 8005e48:	6819      	ldreq	r1, [r3, #0]
 8005e4a:	685b      	ldreq	r3, [r3, #4]
 8005e4c:	1809      	addeq	r1, r1, r0
 8005e4e:	6021      	streq	r1, [r4, #0]
 8005e50:	e7ed      	b.n	8005e2e <_free_r+0x1e>
 8005e52:	461a      	mov	r2, r3
 8005e54:	685b      	ldr	r3, [r3, #4]
 8005e56:	b10b      	cbz	r3, 8005e5c <_free_r+0x4c>
 8005e58:	42a3      	cmp	r3, r4
 8005e5a:	d9fa      	bls.n	8005e52 <_free_r+0x42>
 8005e5c:	6811      	ldr	r1, [r2, #0]
 8005e5e:	1850      	adds	r0, r2, r1
 8005e60:	42a0      	cmp	r0, r4
 8005e62:	d10b      	bne.n	8005e7c <_free_r+0x6c>
 8005e64:	6820      	ldr	r0, [r4, #0]
 8005e66:	4401      	add	r1, r0
 8005e68:	1850      	adds	r0, r2, r1
 8005e6a:	4283      	cmp	r3, r0
 8005e6c:	6011      	str	r1, [r2, #0]
 8005e6e:	d1e0      	bne.n	8005e32 <_free_r+0x22>
 8005e70:	6818      	ldr	r0, [r3, #0]
 8005e72:	685b      	ldr	r3, [r3, #4]
 8005e74:	4401      	add	r1, r0
 8005e76:	6011      	str	r1, [r2, #0]
 8005e78:	6053      	str	r3, [r2, #4]
 8005e7a:	e7da      	b.n	8005e32 <_free_r+0x22>
 8005e7c:	d902      	bls.n	8005e84 <_free_r+0x74>
 8005e7e:	230c      	movs	r3, #12
 8005e80:	602b      	str	r3, [r5, #0]
 8005e82:	e7d6      	b.n	8005e32 <_free_r+0x22>
 8005e84:	6820      	ldr	r0, [r4, #0]
 8005e86:	1821      	adds	r1, r4, r0
 8005e88:	428b      	cmp	r3, r1
 8005e8a:	bf01      	itttt	eq
 8005e8c:	6819      	ldreq	r1, [r3, #0]
 8005e8e:	685b      	ldreq	r3, [r3, #4]
 8005e90:	1809      	addeq	r1, r1, r0
 8005e92:	6021      	streq	r1, [r4, #0]
 8005e94:	6063      	str	r3, [r4, #4]
 8005e96:	6054      	str	r4, [r2, #4]
 8005e98:	e7cb      	b.n	8005e32 <_free_r+0x22>
 8005e9a:	bd38      	pop	{r3, r4, r5, pc}
 8005e9c:	20000200 	.word	0x20000200

08005ea0 <sbrk_aligned>:
 8005ea0:	b570      	push	{r4, r5, r6, lr}
 8005ea2:	4e0e      	ldr	r6, [pc, #56]	; (8005edc <sbrk_aligned+0x3c>)
 8005ea4:	460c      	mov	r4, r1
 8005ea6:	6831      	ldr	r1, [r6, #0]
 8005ea8:	4605      	mov	r5, r0
 8005eaa:	b911      	cbnz	r1, 8005eb2 <sbrk_aligned+0x12>
 8005eac:	f000 fcd6 	bl	800685c <_sbrk_r>
 8005eb0:	6030      	str	r0, [r6, #0]
 8005eb2:	4621      	mov	r1, r4
 8005eb4:	4628      	mov	r0, r5
 8005eb6:	f000 fcd1 	bl	800685c <_sbrk_r>
 8005eba:	1c43      	adds	r3, r0, #1
 8005ebc:	d00a      	beq.n	8005ed4 <sbrk_aligned+0x34>
 8005ebe:	1cc4      	adds	r4, r0, #3
 8005ec0:	f024 0403 	bic.w	r4, r4, #3
 8005ec4:	42a0      	cmp	r0, r4
 8005ec6:	d007      	beq.n	8005ed8 <sbrk_aligned+0x38>
 8005ec8:	1a21      	subs	r1, r4, r0
 8005eca:	4628      	mov	r0, r5
 8005ecc:	f000 fcc6 	bl	800685c <_sbrk_r>
 8005ed0:	3001      	adds	r0, #1
 8005ed2:	d101      	bne.n	8005ed8 <sbrk_aligned+0x38>
 8005ed4:	f04f 34ff 	mov.w	r4, #4294967295
 8005ed8:	4620      	mov	r0, r4
 8005eda:	bd70      	pop	{r4, r5, r6, pc}
 8005edc:	20000204 	.word	0x20000204

08005ee0 <_malloc_r>:
 8005ee0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ee4:	1ccd      	adds	r5, r1, #3
 8005ee6:	f025 0503 	bic.w	r5, r5, #3
 8005eea:	3508      	adds	r5, #8
 8005eec:	2d0c      	cmp	r5, #12
 8005eee:	bf38      	it	cc
 8005ef0:	250c      	movcc	r5, #12
 8005ef2:	2d00      	cmp	r5, #0
 8005ef4:	4607      	mov	r7, r0
 8005ef6:	db01      	blt.n	8005efc <_malloc_r+0x1c>
 8005ef8:	42a9      	cmp	r1, r5
 8005efa:	d905      	bls.n	8005f08 <_malloc_r+0x28>
 8005efc:	230c      	movs	r3, #12
 8005efe:	2600      	movs	r6, #0
 8005f00:	603b      	str	r3, [r7, #0]
 8005f02:	4630      	mov	r0, r6
 8005f04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f08:	4e2e      	ldr	r6, [pc, #184]	; (8005fc4 <_malloc_r+0xe4>)
 8005f0a:	f000 ffd1 	bl	8006eb0 <__malloc_lock>
 8005f0e:	6833      	ldr	r3, [r6, #0]
 8005f10:	461c      	mov	r4, r3
 8005f12:	bb34      	cbnz	r4, 8005f62 <_malloc_r+0x82>
 8005f14:	4629      	mov	r1, r5
 8005f16:	4638      	mov	r0, r7
 8005f18:	f7ff ffc2 	bl	8005ea0 <sbrk_aligned>
 8005f1c:	1c43      	adds	r3, r0, #1
 8005f1e:	4604      	mov	r4, r0
 8005f20:	d14d      	bne.n	8005fbe <_malloc_r+0xde>
 8005f22:	6834      	ldr	r4, [r6, #0]
 8005f24:	4626      	mov	r6, r4
 8005f26:	2e00      	cmp	r6, #0
 8005f28:	d140      	bne.n	8005fac <_malloc_r+0xcc>
 8005f2a:	6823      	ldr	r3, [r4, #0]
 8005f2c:	4631      	mov	r1, r6
 8005f2e:	4638      	mov	r0, r7
 8005f30:	eb04 0803 	add.w	r8, r4, r3
 8005f34:	f000 fc92 	bl	800685c <_sbrk_r>
 8005f38:	4580      	cmp	r8, r0
 8005f3a:	d13a      	bne.n	8005fb2 <_malloc_r+0xd2>
 8005f3c:	6821      	ldr	r1, [r4, #0]
 8005f3e:	3503      	adds	r5, #3
 8005f40:	1a6d      	subs	r5, r5, r1
 8005f42:	f025 0503 	bic.w	r5, r5, #3
 8005f46:	3508      	adds	r5, #8
 8005f48:	2d0c      	cmp	r5, #12
 8005f4a:	bf38      	it	cc
 8005f4c:	250c      	movcc	r5, #12
 8005f4e:	4638      	mov	r0, r7
 8005f50:	4629      	mov	r1, r5
 8005f52:	f7ff ffa5 	bl	8005ea0 <sbrk_aligned>
 8005f56:	3001      	adds	r0, #1
 8005f58:	d02b      	beq.n	8005fb2 <_malloc_r+0xd2>
 8005f5a:	6823      	ldr	r3, [r4, #0]
 8005f5c:	442b      	add	r3, r5
 8005f5e:	6023      	str	r3, [r4, #0]
 8005f60:	e00e      	b.n	8005f80 <_malloc_r+0xa0>
 8005f62:	6822      	ldr	r2, [r4, #0]
 8005f64:	1b52      	subs	r2, r2, r5
 8005f66:	d41e      	bmi.n	8005fa6 <_malloc_r+0xc6>
 8005f68:	2a0b      	cmp	r2, #11
 8005f6a:	d916      	bls.n	8005f9a <_malloc_r+0xba>
 8005f6c:	1961      	adds	r1, r4, r5
 8005f6e:	42a3      	cmp	r3, r4
 8005f70:	6025      	str	r5, [r4, #0]
 8005f72:	bf18      	it	ne
 8005f74:	6059      	strne	r1, [r3, #4]
 8005f76:	6863      	ldr	r3, [r4, #4]
 8005f78:	bf08      	it	eq
 8005f7a:	6031      	streq	r1, [r6, #0]
 8005f7c:	5162      	str	r2, [r4, r5]
 8005f7e:	604b      	str	r3, [r1, #4]
 8005f80:	4638      	mov	r0, r7
 8005f82:	f104 060b 	add.w	r6, r4, #11
 8005f86:	f000 ff99 	bl	8006ebc <__malloc_unlock>
 8005f8a:	f026 0607 	bic.w	r6, r6, #7
 8005f8e:	1d23      	adds	r3, r4, #4
 8005f90:	1af2      	subs	r2, r6, r3
 8005f92:	d0b6      	beq.n	8005f02 <_malloc_r+0x22>
 8005f94:	1b9b      	subs	r3, r3, r6
 8005f96:	50a3      	str	r3, [r4, r2]
 8005f98:	e7b3      	b.n	8005f02 <_malloc_r+0x22>
 8005f9a:	6862      	ldr	r2, [r4, #4]
 8005f9c:	42a3      	cmp	r3, r4
 8005f9e:	bf0c      	ite	eq
 8005fa0:	6032      	streq	r2, [r6, #0]
 8005fa2:	605a      	strne	r2, [r3, #4]
 8005fa4:	e7ec      	b.n	8005f80 <_malloc_r+0xa0>
 8005fa6:	4623      	mov	r3, r4
 8005fa8:	6864      	ldr	r4, [r4, #4]
 8005faa:	e7b2      	b.n	8005f12 <_malloc_r+0x32>
 8005fac:	4634      	mov	r4, r6
 8005fae:	6876      	ldr	r6, [r6, #4]
 8005fb0:	e7b9      	b.n	8005f26 <_malloc_r+0x46>
 8005fb2:	230c      	movs	r3, #12
 8005fb4:	4638      	mov	r0, r7
 8005fb6:	603b      	str	r3, [r7, #0]
 8005fb8:	f000 ff80 	bl	8006ebc <__malloc_unlock>
 8005fbc:	e7a1      	b.n	8005f02 <_malloc_r+0x22>
 8005fbe:	6025      	str	r5, [r4, #0]
 8005fc0:	e7de      	b.n	8005f80 <_malloc_r+0xa0>
 8005fc2:	bf00      	nop
 8005fc4:	20000200 	.word	0x20000200

08005fc8 <__ssputs_r>:
 8005fc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fcc:	688e      	ldr	r6, [r1, #8]
 8005fce:	4682      	mov	sl, r0
 8005fd0:	429e      	cmp	r6, r3
 8005fd2:	460c      	mov	r4, r1
 8005fd4:	4690      	mov	r8, r2
 8005fd6:	461f      	mov	r7, r3
 8005fd8:	d838      	bhi.n	800604c <__ssputs_r+0x84>
 8005fda:	898a      	ldrh	r2, [r1, #12]
 8005fdc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005fe0:	d032      	beq.n	8006048 <__ssputs_r+0x80>
 8005fe2:	6825      	ldr	r5, [r4, #0]
 8005fe4:	6909      	ldr	r1, [r1, #16]
 8005fe6:	3301      	adds	r3, #1
 8005fe8:	eba5 0901 	sub.w	r9, r5, r1
 8005fec:	6965      	ldr	r5, [r4, #20]
 8005fee:	444b      	add	r3, r9
 8005ff0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005ff4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005ff8:	106d      	asrs	r5, r5, #1
 8005ffa:	429d      	cmp	r5, r3
 8005ffc:	bf38      	it	cc
 8005ffe:	461d      	movcc	r5, r3
 8006000:	0553      	lsls	r3, r2, #21
 8006002:	d531      	bpl.n	8006068 <__ssputs_r+0xa0>
 8006004:	4629      	mov	r1, r5
 8006006:	f7ff ff6b 	bl	8005ee0 <_malloc_r>
 800600a:	4606      	mov	r6, r0
 800600c:	b950      	cbnz	r0, 8006024 <__ssputs_r+0x5c>
 800600e:	230c      	movs	r3, #12
 8006010:	f04f 30ff 	mov.w	r0, #4294967295
 8006014:	f8ca 3000 	str.w	r3, [sl]
 8006018:	89a3      	ldrh	r3, [r4, #12]
 800601a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800601e:	81a3      	strh	r3, [r4, #12]
 8006020:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006024:	464a      	mov	r2, r9
 8006026:	6921      	ldr	r1, [r4, #16]
 8006028:	f000 ff1a 	bl	8006e60 <memcpy>
 800602c:	89a3      	ldrh	r3, [r4, #12]
 800602e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006032:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006036:	81a3      	strh	r3, [r4, #12]
 8006038:	6126      	str	r6, [r4, #16]
 800603a:	444e      	add	r6, r9
 800603c:	6026      	str	r6, [r4, #0]
 800603e:	463e      	mov	r6, r7
 8006040:	6165      	str	r5, [r4, #20]
 8006042:	eba5 0509 	sub.w	r5, r5, r9
 8006046:	60a5      	str	r5, [r4, #8]
 8006048:	42be      	cmp	r6, r7
 800604a:	d900      	bls.n	800604e <__ssputs_r+0x86>
 800604c:	463e      	mov	r6, r7
 800604e:	4632      	mov	r2, r6
 8006050:	4641      	mov	r1, r8
 8006052:	6820      	ldr	r0, [r4, #0]
 8006054:	f000 ff12 	bl	8006e7c <memmove>
 8006058:	68a3      	ldr	r3, [r4, #8]
 800605a:	2000      	movs	r0, #0
 800605c:	1b9b      	subs	r3, r3, r6
 800605e:	60a3      	str	r3, [r4, #8]
 8006060:	6823      	ldr	r3, [r4, #0]
 8006062:	4433      	add	r3, r6
 8006064:	6023      	str	r3, [r4, #0]
 8006066:	e7db      	b.n	8006020 <__ssputs_r+0x58>
 8006068:	462a      	mov	r2, r5
 800606a:	f000 ff2d 	bl	8006ec8 <_realloc_r>
 800606e:	4606      	mov	r6, r0
 8006070:	2800      	cmp	r0, #0
 8006072:	d1e1      	bne.n	8006038 <__ssputs_r+0x70>
 8006074:	4650      	mov	r0, sl
 8006076:	6921      	ldr	r1, [r4, #16]
 8006078:	f7ff feca 	bl	8005e10 <_free_r>
 800607c:	e7c7      	b.n	800600e <__ssputs_r+0x46>
	...

08006080 <_svfiprintf_r>:
 8006080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006084:	4698      	mov	r8, r3
 8006086:	898b      	ldrh	r3, [r1, #12]
 8006088:	4607      	mov	r7, r0
 800608a:	061b      	lsls	r3, r3, #24
 800608c:	460d      	mov	r5, r1
 800608e:	4614      	mov	r4, r2
 8006090:	b09d      	sub	sp, #116	; 0x74
 8006092:	d50e      	bpl.n	80060b2 <_svfiprintf_r+0x32>
 8006094:	690b      	ldr	r3, [r1, #16]
 8006096:	b963      	cbnz	r3, 80060b2 <_svfiprintf_r+0x32>
 8006098:	2140      	movs	r1, #64	; 0x40
 800609a:	f7ff ff21 	bl	8005ee0 <_malloc_r>
 800609e:	6028      	str	r0, [r5, #0]
 80060a0:	6128      	str	r0, [r5, #16]
 80060a2:	b920      	cbnz	r0, 80060ae <_svfiprintf_r+0x2e>
 80060a4:	230c      	movs	r3, #12
 80060a6:	603b      	str	r3, [r7, #0]
 80060a8:	f04f 30ff 	mov.w	r0, #4294967295
 80060ac:	e0d1      	b.n	8006252 <_svfiprintf_r+0x1d2>
 80060ae:	2340      	movs	r3, #64	; 0x40
 80060b0:	616b      	str	r3, [r5, #20]
 80060b2:	2300      	movs	r3, #0
 80060b4:	9309      	str	r3, [sp, #36]	; 0x24
 80060b6:	2320      	movs	r3, #32
 80060b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80060bc:	2330      	movs	r3, #48	; 0x30
 80060be:	f04f 0901 	mov.w	r9, #1
 80060c2:	f8cd 800c 	str.w	r8, [sp, #12]
 80060c6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800626c <_svfiprintf_r+0x1ec>
 80060ca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80060ce:	4623      	mov	r3, r4
 80060d0:	469a      	mov	sl, r3
 80060d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80060d6:	b10a      	cbz	r2, 80060dc <_svfiprintf_r+0x5c>
 80060d8:	2a25      	cmp	r2, #37	; 0x25
 80060da:	d1f9      	bne.n	80060d0 <_svfiprintf_r+0x50>
 80060dc:	ebba 0b04 	subs.w	fp, sl, r4
 80060e0:	d00b      	beq.n	80060fa <_svfiprintf_r+0x7a>
 80060e2:	465b      	mov	r3, fp
 80060e4:	4622      	mov	r2, r4
 80060e6:	4629      	mov	r1, r5
 80060e8:	4638      	mov	r0, r7
 80060ea:	f7ff ff6d 	bl	8005fc8 <__ssputs_r>
 80060ee:	3001      	adds	r0, #1
 80060f0:	f000 80aa 	beq.w	8006248 <_svfiprintf_r+0x1c8>
 80060f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80060f6:	445a      	add	r2, fp
 80060f8:	9209      	str	r2, [sp, #36]	; 0x24
 80060fa:	f89a 3000 	ldrb.w	r3, [sl]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	f000 80a2 	beq.w	8006248 <_svfiprintf_r+0x1c8>
 8006104:	2300      	movs	r3, #0
 8006106:	f04f 32ff 	mov.w	r2, #4294967295
 800610a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800610e:	f10a 0a01 	add.w	sl, sl, #1
 8006112:	9304      	str	r3, [sp, #16]
 8006114:	9307      	str	r3, [sp, #28]
 8006116:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800611a:	931a      	str	r3, [sp, #104]	; 0x68
 800611c:	4654      	mov	r4, sl
 800611e:	2205      	movs	r2, #5
 8006120:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006124:	4851      	ldr	r0, [pc, #324]	; (800626c <_svfiprintf_r+0x1ec>)
 8006126:	f000 fe8d 	bl	8006e44 <memchr>
 800612a:	9a04      	ldr	r2, [sp, #16]
 800612c:	b9d8      	cbnz	r0, 8006166 <_svfiprintf_r+0xe6>
 800612e:	06d0      	lsls	r0, r2, #27
 8006130:	bf44      	itt	mi
 8006132:	2320      	movmi	r3, #32
 8006134:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006138:	0711      	lsls	r1, r2, #28
 800613a:	bf44      	itt	mi
 800613c:	232b      	movmi	r3, #43	; 0x2b
 800613e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006142:	f89a 3000 	ldrb.w	r3, [sl]
 8006146:	2b2a      	cmp	r3, #42	; 0x2a
 8006148:	d015      	beq.n	8006176 <_svfiprintf_r+0xf6>
 800614a:	4654      	mov	r4, sl
 800614c:	2000      	movs	r0, #0
 800614e:	f04f 0c0a 	mov.w	ip, #10
 8006152:	9a07      	ldr	r2, [sp, #28]
 8006154:	4621      	mov	r1, r4
 8006156:	f811 3b01 	ldrb.w	r3, [r1], #1
 800615a:	3b30      	subs	r3, #48	; 0x30
 800615c:	2b09      	cmp	r3, #9
 800615e:	d94e      	bls.n	80061fe <_svfiprintf_r+0x17e>
 8006160:	b1b0      	cbz	r0, 8006190 <_svfiprintf_r+0x110>
 8006162:	9207      	str	r2, [sp, #28]
 8006164:	e014      	b.n	8006190 <_svfiprintf_r+0x110>
 8006166:	eba0 0308 	sub.w	r3, r0, r8
 800616a:	fa09 f303 	lsl.w	r3, r9, r3
 800616e:	4313      	orrs	r3, r2
 8006170:	46a2      	mov	sl, r4
 8006172:	9304      	str	r3, [sp, #16]
 8006174:	e7d2      	b.n	800611c <_svfiprintf_r+0x9c>
 8006176:	9b03      	ldr	r3, [sp, #12]
 8006178:	1d19      	adds	r1, r3, #4
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	9103      	str	r1, [sp, #12]
 800617e:	2b00      	cmp	r3, #0
 8006180:	bfbb      	ittet	lt
 8006182:	425b      	neglt	r3, r3
 8006184:	f042 0202 	orrlt.w	r2, r2, #2
 8006188:	9307      	strge	r3, [sp, #28]
 800618a:	9307      	strlt	r3, [sp, #28]
 800618c:	bfb8      	it	lt
 800618e:	9204      	strlt	r2, [sp, #16]
 8006190:	7823      	ldrb	r3, [r4, #0]
 8006192:	2b2e      	cmp	r3, #46	; 0x2e
 8006194:	d10c      	bne.n	80061b0 <_svfiprintf_r+0x130>
 8006196:	7863      	ldrb	r3, [r4, #1]
 8006198:	2b2a      	cmp	r3, #42	; 0x2a
 800619a:	d135      	bne.n	8006208 <_svfiprintf_r+0x188>
 800619c:	9b03      	ldr	r3, [sp, #12]
 800619e:	3402      	adds	r4, #2
 80061a0:	1d1a      	adds	r2, r3, #4
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	9203      	str	r2, [sp, #12]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	bfb8      	it	lt
 80061aa:	f04f 33ff 	movlt.w	r3, #4294967295
 80061ae:	9305      	str	r3, [sp, #20]
 80061b0:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8006270 <_svfiprintf_r+0x1f0>
 80061b4:	2203      	movs	r2, #3
 80061b6:	4650      	mov	r0, sl
 80061b8:	7821      	ldrb	r1, [r4, #0]
 80061ba:	f000 fe43 	bl	8006e44 <memchr>
 80061be:	b140      	cbz	r0, 80061d2 <_svfiprintf_r+0x152>
 80061c0:	2340      	movs	r3, #64	; 0x40
 80061c2:	eba0 000a 	sub.w	r0, r0, sl
 80061c6:	fa03 f000 	lsl.w	r0, r3, r0
 80061ca:	9b04      	ldr	r3, [sp, #16]
 80061cc:	3401      	adds	r4, #1
 80061ce:	4303      	orrs	r3, r0
 80061d0:	9304      	str	r3, [sp, #16]
 80061d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061d6:	2206      	movs	r2, #6
 80061d8:	4826      	ldr	r0, [pc, #152]	; (8006274 <_svfiprintf_r+0x1f4>)
 80061da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80061de:	f000 fe31 	bl	8006e44 <memchr>
 80061e2:	2800      	cmp	r0, #0
 80061e4:	d038      	beq.n	8006258 <_svfiprintf_r+0x1d8>
 80061e6:	4b24      	ldr	r3, [pc, #144]	; (8006278 <_svfiprintf_r+0x1f8>)
 80061e8:	bb1b      	cbnz	r3, 8006232 <_svfiprintf_r+0x1b2>
 80061ea:	9b03      	ldr	r3, [sp, #12]
 80061ec:	3307      	adds	r3, #7
 80061ee:	f023 0307 	bic.w	r3, r3, #7
 80061f2:	3308      	adds	r3, #8
 80061f4:	9303      	str	r3, [sp, #12]
 80061f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061f8:	4433      	add	r3, r6
 80061fa:	9309      	str	r3, [sp, #36]	; 0x24
 80061fc:	e767      	b.n	80060ce <_svfiprintf_r+0x4e>
 80061fe:	460c      	mov	r4, r1
 8006200:	2001      	movs	r0, #1
 8006202:	fb0c 3202 	mla	r2, ip, r2, r3
 8006206:	e7a5      	b.n	8006154 <_svfiprintf_r+0xd4>
 8006208:	2300      	movs	r3, #0
 800620a:	f04f 0c0a 	mov.w	ip, #10
 800620e:	4619      	mov	r1, r3
 8006210:	3401      	adds	r4, #1
 8006212:	9305      	str	r3, [sp, #20]
 8006214:	4620      	mov	r0, r4
 8006216:	f810 2b01 	ldrb.w	r2, [r0], #1
 800621a:	3a30      	subs	r2, #48	; 0x30
 800621c:	2a09      	cmp	r2, #9
 800621e:	d903      	bls.n	8006228 <_svfiprintf_r+0x1a8>
 8006220:	2b00      	cmp	r3, #0
 8006222:	d0c5      	beq.n	80061b0 <_svfiprintf_r+0x130>
 8006224:	9105      	str	r1, [sp, #20]
 8006226:	e7c3      	b.n	80061b0 <_svfiprintf_r+0x130>
 8006228:	4604      	mov	r4, r0
 800622a:	2301      	movs	r3, #1
 800622c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006230:	e7f0      	b.n	8006214 <_svfiprintf_r+0x194>
 8006232:	ab03      	add	r3, sp, #12
 8006234:	9300      	str	r3, [sp, #0]
 8006236:	462a      	mov	r2, r5
 8006238:	4638      	mov	r0, r7
 800623a:	4b10      	ldr	r3, [pc, #64]	; (800627c <_svfiprintf_r+0x1fc>)
 800623c:	a904      	add	r1, sp, #16
 800623e:	f3af 8000 	nop.w
 8006242:	1c42      	adds	r2, r0, #1
 8006244:	4606      	mov	r6, r0
 8006246:	d1d6      	bne.n	80061f6 <_svfiprintf_r+0x176>
 8006248:	89ab      	ldrh	r3, [r5, #12]
 800624a:	065b      	lsls	r3, r3, #25
 800624c:	f53f af2c 	bmi.w	80060a8 <_svfiprintf_r+0x28>
 8006250:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006252:	b01d      	add	sp, #116	; 0x74
 8006254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006258:	ab03      	add	r3, sp, #12
 800625a:	9300      	str	r3, [sp, #0]
 800625c:	462a      	mov	r2, r5
 800625e:	4638      	mov	r0, r7
 8006260:	4b06      	ldr	r3, [pc, #24]	; (800627c <_svfiprintf_r+0x1fc>)
 8006262:	a904      	add	r1, sp, #16
 8006264:	f000 f9d4 	bl	8006610 <_printf_i>
 8006268:	e7eb      	b.n	8006242 <_svfiprintf_r+0x1c2>
 800626a:	bf00      	nop
 800626c:	0800752e 	.word	0x0800752e
 8006270:	08007534 	.word	0x08007534
 8006274:	08007538 	.word	0x08007538
 8006278:	00000000 	.word	0x00000000
 800627c:	08005fc9 	.word	0x08005fc9

08006280 <__sfputc_r>:
 8006280:	6893      	ldr	r3, [r2, #8]
 8006282:	b410      	push	{r4}
 8006284:	3b01      	subs	r3, #1
 8006286:	2b00      	cmp	r3, #0
 8006288:	6093      	str	r3, [r2, #8]
 800628a:	da07      	bge.n	800629c <__sfputc_r+0x1c>
 800628c:	6994      	ldr	r4, [r2, #24]
 800628e:	42a3      	cmp	r3, r4
 8006290:	db01      	blt.n	8006296 <__sfputc_r+0x16>
 8006292:	290a      	cmp	r1, #10
 8006294:	d102      	bne.n	800629c <__sfputc_r+0x1c>
 8006296:	bc10      	pop	{r4}
 8006298:	f000 baf0 	b.w	800687c <__swbuf_r>
 800629c:	6813      	ldr	r3, [r2, #0]
 800629e:	1c58      	adds	r0, r3, #1
 80062a0:	6010      	str	r0, [r2, #0]
 80062a2:	7019      	strb	r1, [r3, #0]
 80062a4:	4608      	mov	r0, r1
 80062a6:	bc10      	pop	{r4}
 80062a8:	4770      	bx	lr

080062aa <__sfputs_r>:
 80062aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062ac:	4606      	mov	r6, r0
 80062ae:	460f      	mov	r7, r1
 80062b0:	4614      	mov	r4, r2
 80062b2:	18d5      	adds	r5, r2, r3
 80062b4:	42ac      	cmp	r4, r5
 80062b6:	d101      	bne.n	80062bc <__sfputs_r+0x12>
 80062b8:	2000      	movs	r0, #0
 80062ba:	e007      	b.n	80062cc <__sfputs_r+0x22>
 80062bc:	463a      	mov	r2, r7
 80062be:	4630      	mov	r0, r6
 80062c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062c4:	f7ff ffdc 	bl	8006280 <__sfputc_r>
 80062c8:	1c43      	adds	r3, r0, #1
 80062ca:	d1f3      	bne.n	80062b4 <__sfputs_r+0xa>
 80062cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080062d0 <_vfiprintf_r>:
 80062d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062d4:	460d      	mov	r5, r1
 80062d6:	4614      	mov	r4, r2
 80062d8:	4698      	mov	r8, r3
 80062da:	4606      	mov	r6, r0
 80062dc:	b09d      	sub	sp, #116	; 0x74
 80062de:	b118      	cbz	r0, 80062e8 <_vfiprintf_r+0x18>
 80062e0:	6983      	ldr	r3, [r0, #24]
 80062e2:	b90b      	cbnz	r3, 80062e8 <_vfiprintf_r+0x18>
 80062e4:	f000 fca8 	bl	8006c38 <__sinit>
 80062e8:	4b89      	ldr	r3, [pc, #548]	; (8006510 <_vfiprintf_r+0x240>)
 80062ea:	429d      	cmp	r5, r3
 80062ec:	d11b      	bne.n	8006326 <_vfiprintf_r+0x56>
 80062ee:	6875      	ldr	r5, [r6, #4]
 80062f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80062f2:	07d9      	lsls	r1, r3, #31
 80062f4:	d405      	bmi.n	8006302 <_vfiprintf_r+0x32>
 80062f6:	89ab      	ldrh	r3, [r5, #12]
 80062f8:	059a      	lsls	r2, r3, #22
 80062fa:	d402      	bmi.n	8006302 <_vfiprintf_r+0x32>
 80062fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80062fe:	f000 fd39 	bl	8006d74 <__retarget_lock_acquire_recursive>
 8006302:	89ab      	ldrh	r3, [r5, #12]
 8006304:	071b      	lsls	r3, r3, #28
 8006306:	d501      	bpl.n	800630c <_vfiprintf_r+0x3c>
 8006308:	692b      	ldr	r3, [r5, #16]
 800630a:	b9eb      	cbnz	r3, 8006348 <_vfiprintf_r+0x78>
 800630c:	4629      	mov	r1, r5
 800630e:	4630      	mov	r0, r6
 8006310:	f000 fb06 	bl	8006920 <__swsetup_r>
 8006314:	b1c0      	cbz	r0, 8006348 <_vfiprintf_r+0x78>
 8006316:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006318:	07dc      	lsls	r4, r3, #31
 800631a:	d50e      	bpl.n	800633a <_vfiprintf_r+0x6a>
 800631c:	f04f 30ff 	mov.w	r0, #4294967295
 8006320:	b01d      	add	sp, #116	; 0x74
 8006322:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006326:	4b7b      	ldr	r3, [pc, #492]	; (8006514 <_vfiprintf_r+0x244>)
 8006328:	429d      	cmp	r5, r3
 800632a:	d101      	bne.n	8006330 <_vfiprintf_r+0x60>
 800632c:	68b5      	ldr	r5, [r6, #8]
 800632e:	e7df      	b.n	80062f0 <_vfiprintf_r+0x20>
 8006330:	4b79      	ldr	r3, [pc, #484]	; (8006518 <_vfiprintf_r+0x248>)
 8006332:	429d      	cmp	r5, r3
 8006334:	bf08      	it	eq
 8006336:	68f5      	ldreq	r5, [r6, #12]
 8006338:	e7da      	b.n	80062f0 <_vfiprintf_r+0x20>
 800633a:	89ab      	ldrh	r3, [r5, #12]
 800633c:	0598      	lsls	r0, r3, #22
 800633e:	d4ed      	bmi.n	800631c <_vfiprintf_r+0x4c>
 8006340:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006342:	f000 fd18 	bl	8006d76 <__retarget_lock_release_recursive>
 8006346:	e7e9      	b.n	800631c <_vfiprintf_r+0x4c>
 8006348:	2300      	movs	r3, #0
 800634a:	9309      	str	r3, [sp, #36]	; 0x24
 800634c:	2320      	movs	r3, #32
 800634e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006352:	2330      	movs	r3, #48	; 0x30
 8006354:	f04f 0901 	mov.w	r9, #1
 8006358:	f8cd 800c 	str.w	r8, [sp, #12]
 800635c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800651c <_vfiprintf_r+0x24c>
 8006360:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006364:	4623      	mov	r3, r4
 8006366:	469a      	mov	sl, r3
 8006368:	f813 2b01 	ldrb.w	r2, [r3], #1
 800636c:	b10a      	cbz	r2, 8006372 <_vfiprintf_r+0xa2>
 800636e:	2a25      	cmp	r2, #37	; 0x25
 8006370:	d1f9      	bne.n	8006366 <_vfiprintf_r+0x96>
 8006372:	ebba 0b04 	subs.w	fp, sl, r4
 8006376:	d00b      	beq.n	8006390 <_vfiprintf_r+0xc0>
 8006378:	465b      	mov	r3, fp
 800637a:	4622      	mov	r2, r4
 800637c:	4629      	mov	r1, r5
 800637e:	4630      	mov	r0, r6
 8006380:	f7ff ff93 	bl	80062aa <__sfputs_r>
 8006384:	3001      	adds	r0, #1
 8006386:	f000 80aa 	beq.w	80064de <_vfiprintf_r+0x20e>
 800638a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800638c:	445a      	add	r2, fp
 800638e:	9209      	str	r2, [sp, #36]	; 0x24
 8006390:	f89a 3000 	ldrb.w	r3, [sl]
 8006394:	2b00      	cmp	r3, #0
 8006396:	f000 80a2 	beq.w	80064de <_vfiprintf_r+0x20e>
 800639a:	2300      	movs	r3, #0
 800639c:	f04f 32ff 	mov.w	r2, #4294967295
 80063a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80063a4:	f10a 0a01 	add.w	sl, sl, #1
 80063a8:	9304      	str	r3, [sp, #16]
 80063aa:	9307      	str	r3, [sp, #28]
 80063ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80063b0:	931a      	str	r3, [sp, #104]	; 0x68
 80063b2:	4654      	mov	r4, sl
 80063b4:	2205      	movs	r2, #5
 80063b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063ba:	4858      	ldr	r0, [pc, #352]	; (800651c <_vfiprintf_r+0x24c>)
 80063bc:	f000 fd42 	bl	8006e44 <memchr>
 80063c0:	9a04      	ldr	r2, [sp, #16]
 80063c2:	b9d8      	cbnz	r0, 80063fc <_vfiprintf_r+0x12c>
 80063c4:	06d1      	lsls	r1, r2, #27
 80063c6:	bf44      	itt	mi
 80063c8:	2320      	movmi	r3, #32
 80063ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80063ce:	0713      	lsls	r3, r2, #28
 80063d0:	bf44      	itt	mi
 80063d2:	232b      	movmi	r3, #43	; 0x2b
 80063d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80063d8:	f89a 3000 	ldrb.w	r3, [sl]
 80063dc:	2b2a      	cmp	r3, #42	; 0x2a
 80063de:	d015      	beq.n	800640c <_vfiprintf_r+0x13c>
 80063e0:	4654      	mov	r4, sl
 80063e2:	2000      	movs	r0, #0
 80063e4:	f04f 0c0a 	mov.w	ip, #10
 80063e8:	9a07      	ldr	r2, [sp, #28]
 80063ea:	4621      	mov	r1, r4
 80063ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80063f0:	3b30      	subs	r3, #48	; 0x30
 80063f2:	2b09      	cmp	r3, #9
 80063f4:	d94e      	bls.n	8006494 <_vfiprintf_r+0x1c4>
 80063f6:	b1b0      	cbz	r0, 8006426 <_vfiprintf_r+0x156>
 80063f8:	9207      	str	r2, [sp, #28]
 80063fa:	e014      	b.n	8006426 <_vfiprintf_r+0x156>
 80063fc:	eba0 0308 	sub.w	r3, r0, r8
 8006400:	fa09 f303 	lsl.w	r3, r9, r3
 8006404:	4313      	orrs	r3, r2
 8006406:	46a2      	mov	sl, r4
 8006408:	9304      	str	r3, [sp, #16]
 800640a:	e7d2      	b.n	80063b2 <_vfiprintf_r+0xe2>
 800640c:	9b03      	ldr	r3, [sp, #12]
 800640e:	1d19      	adds	r1, r3, #4
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	9103      	str	r1, [sp, #12]
 8006414:	2b00      	cmp	r3, #0
 8006416:	bfbb      	ittet	lt
 8006418:	425b      	neglt	r3, r3
 800641a:	f042 0202 	orrlt.w	r2, r2, #2
 800641e:	9307      	strge	r3, [sp, #28]
 8006420:	9307      	strlt	r3, [sp, #28]
 8006422:	bfb8      	it	lt
 8006424:	9204      	strlt	r2, [sp, #16]
 8006426:	7823      	ldrb	r3, [r4, #0]
 8006428:	2b2e      	cmp	r3, #46	; 0x2e
 800642a:	d10c      	bne.n	8006446 <_vfiprintf_r+0x176>
 800642c:	7863      	ldrb	r3, [r4, #1]
 800642e:	2b2a      	cmp	r3, #42	; 0x2a
 8006430:	d135      	bne.n	800649e <_vfiprintf_r+0x1ce>
 8006432:	9b03      	ldr	r3, [sp, #12]
 8006434:	3402      	adds	r4, #2
 8006436:	1d1a      	adds	r2, r3, #4
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	9203      	str	r2, [sp, #12]
 800643c:	2b00      	cmp	r3, #0
 800643e:	bfb8      	it	lt
 8006440:	f04f 33ff 	movlt.w	r3, #4294967295
 8006444:	9305      	str	r3, [sp, #20]
 8006446:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8006520 <_vfiprintf_r+0x250>
 800644a:	2203      	movs	r2, #3
 800644c:	4650      	mov	r0, sl
 800644e:	7821      	ldrb	r1, [r4, #0]
 8006450:	f000 fcf8 	bl	8006e44 <memchr>
 8006454:	b140      	cbz	r0, 8006468 <_vfiprintf_r+0x198>
 8006456:	2340      	movs	r3, #64	; 0x40
 8006458:	eba0 000a 	sub.w	r0, r0, sl
 800645c:	fa03 f000 	lsl.w	r0, r3, r0
 8006460:	9b04      	ldr	r3, [sp, #16]
 8006462:	3401      	adds	r4, #1
 8006464:	4303      	orrs	r3, r0
 8006466:	9304      	str	r3, [sp, #16]
 8006468:	f814 1b01 	ldrb.w	r1, [r4], #1
 800646c:	2206      	movs	r2, #6
 800646e:	482d      	ldr	r0, [pc, #180]	; (8006524 <_vfiprintf_r+0x254>)
 8006470:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006474:	f000 fce6 	bl	8006e44 <memchr>
 8006478:	2800      	cmp	r0, #0
 800647a:	d03f      	beq.n	80064fc <_vfiprintf_r+0x22c>
 800647c:	4b2a      	ldr	r3, [pc, #168]	; (8006528 <_vfiprintf_r+0x258>)
 800647e:	bb1b      	cbnz	r3, 80064c8 <_vfiprintf_r+0x1f8>
 8006480:	9b03      	ldr	r3, [sp, #12]
 8006482:	3307      	adds	r3, #7
 8006484:	f023 0307 	bic.w	r3, r3, #7
 8006488:	3308      	adds	r3, #8
 800648a:	9303      	str	r3, [sp, #12]
 800648c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800648e:	443b      	add	r3, r7
 8006490:	9309      	str	r3, [sp, #36]	; 0x24
 8006492:	e767      	b.n	8006364 <_vfiprintf_r+0x94>
 8006494:	460c      	mov	r4, r1
 8006496:	2001      	movs	r0, #1
 8006498:	fb0c 3202 	mla	r2, ip, r2, r3
 800649c:	e7a5      	b.n	80063ea <_vfiprintf_r+0x11a>
 800649e:	2300      	movs	r3, #0
 80064a0:	f04f 0c0a 	mov.w	ip, #10
 80064a4:	4619      	mov	r1, r3
 80064a6:	3401      	adds	r4, #1
 80064a8:	9305      	str	r3, [sp, #20]
 80064aa:	4620      	mov	r0, r4
 80064ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80064b0:	3a30      	subs	r2, #48	; 0x30
 80064b2:	2a09      	cmp	r2, #9
 80064b4:	d903      	bls.n	80064be <_vfiprintf_r+0x1ee>
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d0c5      	beq.n	8006446 <_vfiprintf_r+0x176>
 80064ba:	9105      	str	r1, [sp, #20]
 80064bc:	e7c3      	b.n	8006446 <_vfiprintf_r+0x176>
 80064be:	4604      	mov	r4, r0
 80064c0:	2301      	movs	r3, #1
 80064c2:	fb0c 2101 	mla	r1, ip, r1, r2
 80064c6:	e7f0      	b.n	80064aa <_vfiprintf_r+0x1da>
 80064c8:	ab03      	add	r3, sp, #12
 80064ca:	9300      	str	r3, [sp, #0]
 80064cc:	462a      	mov	r2, r5
 80064ce:	4630      	mov	r0, r6
 80064d0:	4b16      	ldr	r3, [pc, #88]	; (800652c <_vfiprintf_r+0x25c>)
 80064d2:	a904      	add	r1, sp, #16
 80064d4:	f3af 8000 	nop.w
 80064d8:	4607      	mov	r7, r0
 80064da:	1c78      	adds	r0, r7, #1
 80064dc:	d1d6      	bne.n	800648c <_vfiprintf_r+0x1bc>
 80064de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80064e0:	07d9      	lsls	r1, r3, #31
 80064e2:	d405      	bmi.n	80064f0 <_vfiprintf_r+0x220>
 80064e4:	89ab      	ldrh	r3, [r5, #12]
 80064e6:	059a      	lsls	r2, r3, #22
 80064e8:	d402      	bmi.n	80064f0 <_vfiprintf_r+0x220>
 80064ea:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80064ec:	f000 fc43 	bl	8006d76 <__retarget_lock_release_recursive>
 80064f0:	89ab      	ldrh	r3, [r5, #12]
 80064f2:	065b      	lsls	r3, r3, #25
 80064f4:	f53f af12 	bmi.w	800631c <_vfiprintf_r+0x4c>
 80064f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80064fa:	e711      	b.n	8006320 <_vfiprintf_r+0x50>
 80064fc:	ab03      	add	r3, sp, #12
 80064fe:	9300      	str	r3, [sp, #0]
 8006500:	462a      	mov	r2, r5
 8006502:	4630      	mov	r0, r6
 8006504:	4b09      	ldr	r3, [pc, #36]	; (800652c <_vfiprintf_r+0x25c>)
 8006506:	a904      	add	r1, sp, #16
 8006508:	f000 f882 	bl	8006610 <_printf_i>
 800650c:	e7e4      	b.n	80064d8 <_vfiprintf_r+0x208>
 800650e:	bf00      	nop
 8006510:	08007584 	.word	0x08007584
 8006514:	080075a4 	.word	0x080075a4
 8006518:	08007564 	.word	0x08007564
 800651c:	0800752e 	.word	0x0800752e
 8006520:	08007534 	.word	0x08007534
 8006524:	08007538 	.word	0x08007538
 8006528:	00000000 	.word	0x00000000
 800652c:	080062ab 	.word	0x080062ab

08006530 <_printf_common>:
 8006530:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006534:	4616      	mov	r6, r2
 8006536:	4699      	mov	r9, r3
 8006538:	688a      	ldr	r2, [r1, #8]
 800653a:	690b      	ldr	r3, [r1, #16]
 800653c:	4607      	mov	r7, r0
 800653e:	4293      	cmp	r3, r2
 8006540:	bfb8      	it	lt
 8006542:	4613      	movlt	r3, r2
 8006544:	6033      	str	r3, [r6, #0]
 8006546:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800654a:	460c      	mov	r4, r1
 800654c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006550:	b10a      	cbz	r2, 8006556 <_printf_common+0x26>
 8006552:	3301      	adds	r3, #1
 8006554:	6033      	str	r3, [r6, #0]
 8006556:	6823      	ldr	r3, [r4, #0]
 8006558:	0699      	lsls	r1, r3, #26
 800655a:	bf42      	ittt	mi
 800655c:	6833      	ldrmi	r3, [r6, #0]
 800655e:	3302      	addmi	r3, #2
 8006560:	6033      	strmi	r3, [r6, #0]
 8006562:	6825      	ldr	r5, [r4, #0]
 8006564:	f015 0506 	ands.w	r5, r5, #6
 8006568:	d106      	bne.n	8006578 <_printf_common+0x48>
 800656a:	f104 0a19 	add.w	sl, r4, #25
 800656e:	68e3      	ldr	r3, [r4, #12]
 8006570:	6832      	ldr	r2, [r6, #0]
 8006572:	1a9b      	subs	r3, r3, r2
 8006574:	42ab      	cmp	r3, r5
 8006576:	dc28      	bgt.n	80065ca <_printf_common+0x9a>
 8006578:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800657c:	1e13      	subs	r3, r2, #0
 800657e:	6822      	ldr	r2, [r4, #0]
 8006580:	bf18      	it	ne
 8006582:	2301      	movne	r3, #1
 8006584:	0692      	lsls	r2, r2, #26
 8006586:	d42d      	bmi.n	80065e4 <_printf_common+0xb4>
 8006588:	4649      	mov	r1, r9
 800658a:	4638      	mov	r0, r7
 800658c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006590:	47c0      	blx	r8
 8006592:	3001      	adds	r0, #1
 8006594:	d020      	beq.n	80065d8 <_printf_common+0xa8>
 8006596:	6823      	ldr	r3, [r4, #0]
 8006598:	68e5      	ldr	r5, [r4, #12]
 800659a:	f003 0306 	and.w	r3, r3, #6
 800659e:	2b04      	cmp	r3, #4
 80065a0:	bf18      	it	ne
 80065a2:	2500      	movne	r5, #0
 80065a4:	6832      	ldr	r2, [r6, #0]
 80065a6:	f04f 0600 	mov.w	r6, #0
 80065aa:	68a3      	ldr	r3, [r4, #8]
 80065ac:	bf08      	it	eq
 80065ae:	1aad      	subeq	r5, r5, r2
 80065b0:	6922      	ldr	r2, [r4, #16]
 80065b2:	bf08      	it	eq
 80065b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80065b8:	4293      	cmp	r3, r2
 80065ba:	bfc4      	itt	gt
 80065bc:	1a9b      	subgt	r3, r3, r2
 80065be:	18ed      	addgt	r5, r5, r3
 80065c0:	341a      	adds	r4, #26
 80065c2:	42b5      	cmp	r5, r6
 80065c4:	d11a      	bne.n	80065fc <_printf_common+0xcc>
 80065c6:	2000      	movs	r0, #0
 80065c8:	e008      	b.n	80065dc <_printf_common+0xac>
 80065ca:	2301      	movs	r3, #1
 80065cc:	4652      	mov	r2, sl
 80065ce:	4649      	mov	r1, r9
 80065d0:	4638      	mov	r0, r7
 80065d2:	47c0      	blx	r8
 80065d4:	3001      	adds	r0, #1
 80065d6:	d103      	bne.n	80065e0 <_printf_common+0xb0>
 80065d8:	f04f 30ff 	mov.w	r0, #4294967295
 80065dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065e0:	3501      	adds	r5, #1
 80065e2:	e7c4      	b.n	800656e <_printf_common+0x3e>
 80065e4:	2030      	movs	r0, #48	; 0x30
 80065e6:	18e1      	adds	r1, r4, r3
 80065e8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80065ec:	1c5a      	adds	r2, r3, #1
 80065ee:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80065f2:	4422      	add	r2, r4
 80065f4:	3302      	adds	r3, #2
 80065f6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80065fa:	e7c5      	b.n	8006588 <_printf_common+0x58>
 80065fc:	2301      	movs	r3, #1
 80065fe:	4622      	mov	r2, r4
 8006600:	4649      	mov	r1, r9
 8006602:	4638      	mov	r0, r7
 8006604:	47c0      	blx	r8
 8006606:	3001      	adds	r0, #1
 8006608:	d0e6      	beq.n	80065d8 <_printf_common+0xa8>
 800660a:	3601      	adds	r6, #1
 800660c:	e7d9      	b.n	80065c2 <_printf_common+0x92>
	...

08006610 <_printf_i>:
 8006610:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006614:	7e0f      	ldrb	r7, [r1, #24]
 8006616:	4691      	mov	r9, r2
 8006618:	2f78      	cmp	r7, #120	; 0x78
 800661a:	4680      	mov	r8, r0
 800661c:	460c      	mov	r4, r1
 800661e:	469a      	mov	sl, r3
 8006620:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006622:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006626:	d807      	bhi.n	8006638 <_printf_i+0x28>
 8006628:	2f62      	cmp	r7, #98	; 0x62
 800662a:	d80a      	bhi.n	8006642 <_printf_i+0x32>
 800662c:	2f00      	cmp	r7, #0
 800662e:	f000 80d9 	beq.w	80067e4 <_printf_i+0x1d4>
 8006632:	2f58      	cmp	r7, #88	; 0x58
 8006634:	f000 80a4 	beq.w	8006780 <_printf_i+0x170>
 8006638:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800663c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006640:	e03a      	b.n	80066b8 <_printf_i+0xa8>
 8006642:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006646:	2b15      	cmp	r3, #21
 8006648:	d8f6      	bhi.n	8006638 <_printf_i+0x28>
 800664a:	a101      	add	r1, pc, #4	; (adr r1, 8006650 <_printf_i+0x40>)
 800664c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006650:	080066a9 	.word	0x080066a9
 8006654:	080066bd 	.word	0x080066bd
 8006658:	08006639 	.word	0x08006639
 800665c:	08006639 	.word	0x08006639
 8006660:	08006639 	.word	0x08006639
 8006664:	08006639 	.word	0x08006639
 8006668:	080066bd 	.word	0x080066bd
 800666c:	08006639 	.word	0x08006639
 8006670:	08006639 	.word	0x08006639
 8006674:	08006639 	.word	0x08006639
 8006678:	08006639 	.word	0x08006639
 800667c:	080067cb 	.word	0x080067cb
 8006680:	080066ed 	.word	0x080066ed
 8006684:	080067ad 	.word	0x080067ad
 8006688:	08006639 	.word	0x08006639
 800668c:	08006639 	.word	0x08006639
 8006690:	080067ed 	.word	0x080067ed
 8006694:	08006639 	.word	0x08006639
 8006698:	080066ed 	.word	0x080066ed
 800669c:	08006639 	.word	0x08006639
 80066a0:	08006639 	.word	0x08006639
 80066a4:	080067b5 	.word	0x080067b5
 80066a8:	682b      	ldr	r3, [r5, #0]
 80066aa:	1d1a      	adds	r2, r3, #4
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	602a      	str	r2, [r5, #0]
 80066b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80066b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80066b8:	2301      	movs	r3, #1
 80066ba:	e0a4      	b.n	8006806 <_printf_i+0x1f6>
 80066bc:	6820      	ldr	r0, [r4, #0]
 80066be:	6829      	ldr	r1, [r5, #0]
 80066c0:	0606      	lsls	r6, r0, #24
 80066c2:	f101 0304 	add.w	r3, r1, #4
 80066c6:	d50a      	bpl.n	80066de <_printf_i+0xce>
 80066c8:	680e      	ldr	r6, [r1, #0]
 80066ca:	602b      	str	r3, [r5, #0]
 80066cc:	2e00      	cmp	r6, #0
 80066ce:	da03      	bge.n	80066d8 <_printf_i+0xc8>
 80066d0:	232d      	movs	r3, #45	; 0x2d
 80066d2:	4276      	negs	r6, r6
 80066d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80066d8:	230a      	movs	r3, #10
 80066da:	485e      	ldr	r0, [pc, #376]	; (8006854 <_printf_i+0x244>)
 80066dc:	e019      	b.n	8006712 <_printf_i+0x102>
 80066de:	680e      	ldr	r6, [r1, #0]
 80066e0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80066e4:	602b      	str	r3, [r5, #0]
 80066e6:	bf18      	it	ne
 80066e8:	b236      	sxthne	r6, r6
 80066ea:	e7ef      	b.n	80066cc <_printf_i+0xbc>
 80066ec:	682b      	ldr	r3, [r5, #0]
 80066ee:	6820      	ldr	r0, [r4, #0]
 80066f0:	1d19      	adds	r1, r3, #4
 80066f2:	6029      	str	r1, [r5, #0]
 80066f4:	0601      	lsls	r1, r0, #24
 80066f6:	d501      	bpl.n	80066fc <_printf_i+0xec>
 80066f8:	681e      	ldr	r6, [r3, #0]
 80066fa:	e002      	b.n	8006702 <_printf_i+0xf2>
 80066fc:	0646      	lsls	r6, r0, #25
 80066fe:	d5fb      	bpl.n	80066f8 <_printf_i+0xe8>
 8006700:	881e      	ldrh	r6, [r3, #0]
 8006702:	2f6f      	cmp	r7, #111	; 0x6f
 8006704:	bf0c      	ite	eq
 8006706:	2308      	moveq	r3, #8
 8006708:	230a      	movne	r3, #10
 800670a:	4852      	ldr	r0, [pc, #328]	; (8006854 <_printf_i+0x244>)
 800670c:	2100      	movs	r1, #0
 800670e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006712:	6865      	ldr	r5, [r4, #4]
 8006714:	2d00      	cmp	r5, #0
 8006716:	bfa8      	it	ge
 8006718:	6821      	ldrge	r1, [r4, #0]
 800671a:	60a5      	str	r5, [r4, #8]
 800671c:	bfa4      	itt	ge
 800671e:	f021 0104 	bicge.w	r1, r1, #4
 8006722:	6021      	strge	r1, [r4, #0]
 8006724:	b90e      	cbnz	r6, 800672a <_printf_i+0x11a>
 8006726:	2d00      	cmp	r5, #0
 8006728:	d04d      	beq.n	80067c6 <_printf_i+0x1b6>
 800672a:	4615      	mov	r5, r2
 800672c:	fbb6 f1f3 	udiv	r1, r6, r3
 8006730:	fb03 6711 	mls	r7, r3, r1, r6
 8006734:	5dc7      	ldrb	r7, [r0, r7]
 8006736:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800673a:	4637      	mov	r7, r6
 800673c:	42bb      	cmp	r3, r7
 800673e:	460e      	mov	r6, r1
 8006740:	d9f4      	bls.n	800672c <_printf_i+0x11c>
 8006742:	2b08      	cmp	r3, #8
 8006744:	d10b      	bne.n	800675e <_printf_i+0x14e>
 8006746:	6823      	ldr	r3, [r4, #0]
 8006748:	07de      	lsls	r6, r3, #31
 800674a:	d508      	bpl.n	800675e <_printf_i+0x14e>
 800674c:	6923      	ldr	r3, [r4, #16]
 800674e:	6861      	ldr	r1, [r4, #4]
 8006750:	4299      	cmp	r1, r3
 8006752:	bfde      	ittt	le
 8006754:	2330      	movle	r3, #48	; 0x30
 8006756:	f805 3c01 	strble.w	r3, [r5, #-1]
 800675a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800675e:	1b52      	subs	r2, r2, r5
 8006760:	6122      	str	r2, [r4, #16]
 8006762:	464b      	mov	r3, r9
 8006764:	4621      	mov	r1, r4
 8006766:	4640      	mov	r0, r8
 8006768:	f8cd a000 	str.w	sl, [sp]
 800676c:	aa03      	add	r2, sp, #12
 800676e:	f7ff fedf 	bl	8006530 <_printf_common>
 8006772:	3001      	adds	r0, #1
 8006774:	d14c      	bne.n	8006810 <_printf_i+0x200>
 8006776:	f04f 30ff 	mov.w	r0, #4294967295
 800677a:	b004      	add	sp, #16
 800677c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006780:	4834      	ldr	r0, [pc, #208]	; (8006854 <_printf_i+0x244>)
 8006782:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006786:	6829      	ldr	r1, [r5, #0]
 8006788:	6823      	ldr	r3, [r4, #0]
 800678a:	f851 6b04 	ldr.w	r6, [r1], #4
 800678e:	6029      	str	r1, [r5, #0]
 8006790:	061d      	lsls	r5, r3, #24
 8006792:	d514      	bpl.n	80067be <_printf_i+0x1ae>
 8006794:	07df      	lsls	r7, r3, #31
 8006796:	bf44      	itt	mi
 8006798:	f043 0320 	orrmi.w	r3, r3, #32
 800679c:	6023      	strmi	r3, [r4, #0]
 800679e:	b91e      	cbnz	r6, 80067a8 <_printf_i+0x198>
 80067a0:	6823      	ldr	r3, [r4, #0]
 80067a2:	f023 0320 	bic.w	r3, r3, #32
 80067a6:	6023      	str	r3, [r4, #0]
 80067a8:	2310      	movs	r3, #16
 80067aa:	e7af      	b.n	800670c <_printf_i+0xfc>
 80067ac:	6823      	ldr	r3, [r4, #0]
 80067ae:	f043 0320 	orr.w	r3, r3, #32
 80067b2:	6023      	str	r3, [r4, #0]
 80067b4:	2378      	movs	r3, #120	; 0x78
 80067b6:	4828      	ldr	r0, [pc, #160]	; (8006858 <_printf_i+0x248>)
 80067b8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80067bc:	e7e3      	b.n	8006786 <_printf_i+0x176>
 80067be:	0659      	lsls	r1, r3, #25
 80067c0:	bf48      	it	mi
 80067c2:	b2b6      	uxthmi	r6, r6
 80067c4:	e7e6      	b.n	8006794 <_printf_i+0x184>
 80067c6:	4615      	mov	r5, r2
 80067c8:	e7bb      	b.n	8006742 <_printf_i+0x132>
 80067ca:	682b      	ldr	r3, [r5, #0]
 80067cc:	6826      	ldr	r6, [r4, #0]
 80067ce:	1d18      	adds	r0, r3, #4
 80067d0:	6961      	ldr	r1, [r4, #20]
 80067d2:	6028      	str	r0, [r5, #0]
 80067d4:	0635      	lsls	r5, r6, #24
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	d501      	bpl.n	80067de <_printf_i+0x1ce>
 80067da:	6019      	str	r1, [r3, #0]
 80067dc:	e002      	b.n	80067e4 <_printf_i+0x1d4>
 80067de:	0670      	lsls	r0, r6, #25
 80067e0:	d5fb      	bpl.n	80067da <_printf_i+0x1ca>
 80067e2:	8019      	strh	r1, [r3, #0]
 80067e4:	2300      	movs	r3, #0
 80067e6:	4615      	mov	r5, r2
 80067e8:	6123      	str	r3, [r4, #16]
 80067ea:	e7ba      	b.n	8006762 <_printf_i+0x152>
 80067ec:	682b      	ldr	r3, [r5, #0]
 80067ee:	2100      	movs	r1, #0
 80067f0:	1d1a      	adds	r2, r3, #4
 80067f2:	602a      	str	r2, [r5, #0]
 80067f4:	681d      	ldr	r5, [r3, #0]
 80067f6:	6862      	ldr	r2, [r4, #4]
 80067f8:	4628      	mov	r0, r5
 80067fa:	f000 fb23 	bl	8006e44 <memchr>
 80067fe:	b108      	cbz	r0, 8006804 <_printf_i+0x1f4>
 8006800:	1b40      	subs	r0, r0, r5
 8006802:	6060      	str	r0, [r4, #4]
 8006804:	6863      	ldr	r3, [r4, #4]
 8006806:	6123      	str	r3, [r4, #16]
 8006808:	2300      	movs	r3, #0
 800680a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800680e:	e7a8      	b.n	8006762 <_printf_i+0x152>
 8006810:	462a      	mov	r2, r5
 8006812:	4649      	mov	r1, r9
 8006814:	4640      	mov	r0, r8
 8006816:	6923      	ldr	r3, [r4, #16]
 8006818:	47d0      	blx	sl
 800681a:	3001      	adds	r0, #1
 800681c:	d0ab      	beq.n	8006776 <_printf_i+0x166>
 800681e:	6823      	ldr	r3, [r4, #0]
 8006820:	079b      	lsls	r3, r3, #30
 8006822:	d413      	bmi.n	800684c <_printf_i+0x23c>
 8006824:	68e0      	ldr	r0, [r4, #12]
 8006826:	9b03      	ldr	r3, [sp, #12]
 8006828:	4298      	cmp	r0, r3
 800682a:	bfb8      	it	lt
 800682c:	4618      	movlt	r0, r3
 800682e:	e7a4      	b.n	800677a <_printf_i+0x16a>
 8006830:	2301      	movs	r3, #1
 8006832:	4632      	mov	r2, r6
 8006834:	4649      	mov	r1, r9
 8006836:	4640      	mov	r0, r8
 8006838:	47d0      	blx	sl
 800683a:	3001      	adds	r0, #1
 800683c:	d09b      	beq.n	8006776 <_printf_i+0x166>
 800683e:	3501      	adds	r5, #1
 8006840:	68e3      	ldr	r3, [r4, #12]
 8006842:	9903      	ldr	r1, [sp, #12]
 8006844:	1a5b      	subs	r3, r3, r1
 8006846:	42ab      	cmp	r3, r5
 8006848:	dcf2      	bgt.n	8006830 <_printf_i+0x220>
 800684a:	e7eb      	b.n	8006824 <_printf_i+0x214>
 800684c:	2500      	movs	r5, #0
 800684e:	f104 0619 	add.w	r6, r4, #25
 8006852:	e7f5      	b.n	8006840 <_printf_i+0x230>
 8006854:	0800753f 	.word	0x0800753f
 8006858:	08007550 	.word	0x08007550

0800685c <_sbrk_r>:
 800685c:	b538      	push	{r3, r4, r5, lr}
 800685e:	2300      	movs	r3, #0
 8006860:	4d05      	ldr	r5, [pc, #20]	; (8006878 <_sbrk_r+0x1c>)
 8006862:	4604      	mov	r4, r0
 8006864:	4608      	mov	r0, r1
 8006866:	602b      	str	r3, [r5, #0]
 8006868:	f7fa f83e 	bl	80008e8 <_sbrk>
 800686c:	1c43      	adds	r3, r0, #1
 800686e:	d102      	bne.n	8006876 <_sbrk_r+0x1a>
 8006870:	682b      	ldr	r3, [r5, #0]
 8006872:	b103      	cbz	r3, 8006876 <_sbrk_r+0x1a>
 8006874:	6023      	str	r3, [r4, #0]
 8006876:	bd38      	pop	{r3, r4, r5, pc}
 8006878:	2000020c 	.word	0x2000020c

0800687c <__swbuf_r>:
 800687c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800687e:	460e      	mov	r6, r1
 8006880:	4614      	mov	r4, r2
 8006882:	4605      	mov	r5, r0
 8006884:	b118      	cbz	r0, 800688e <__swbuf_r+0x12>
 8006886:	6983      	ldr	r3, [r0, #24]
 8006888:	b90b      	cbnz	r3, 800688e <__swbuf_r+0x12>
 800688a:	f000 f9d5 	bl	8006c38 <__sinit>
 800688e:	4b21      	ldr	r3, [pc, #132]	; (8006914 <__swbuf_r+0x98>)
 8006890:	429c      	cmp	r4, r3
 8006892:	d12b      	bne.n	80068ec <__swbuf_r+0x70>
 8006894:	686c      	ldr	r4, [r5, #4]
 8006896:	69a3      	ldr	r3, [r4, #24]
 8006898:	60a3      	str	r3, [r4, #8]
 800689a:	89a3      	ldrh	r3, [r4, #12]
 800689c:	071a      	lsls	r2, r3, #28
 800689e:	d52f      	bpl.n	8006900 <__swbuf_r+0x84>
 80068a0:	6923      	ldr	r3, [r4, #16]
 80068a2:	b36b      	cbz	r3, 8006900 <__swbuf_r+0x84>
 80068a4:	6923      	ldr	r3, [r4, #16]
 80068a6:	6820      	ldr	r0, [r4, #0]
 80068a8:	b2f6      	uxtb	r6, r6
 80068aa:	1ac0      	subs	r0, r0, r3
 80068ac:	6963      	ldr	r3, [r4, #20]
 80068ae:	4637      	mov	r7, r6
 80068b0:	4283      	cmp	r3, r0
 80068b2:	dc04      	bgt.n	80068be <__swbuf_r+0x42>
 80068b4:	4621      	mov	r1, r4
 80068b6:	4628      	mov	r0, r5
 80068b8:	f000 f92a 	bl	8006b10 <_fflush_r>
 80068bc:	bb30      	cbnz	r0, 800690c <__swbuf_r+0x90>
 80068be:	68a3      	ldr	r3, [r4, #8]
 80068c0:	3001      	adds	r0, #1
 80068c2:	3b01      	subs	r3, #1
 80068c4:	60a3      	str	r3, [r4, #8]
 80068c6:	6823      	ldr	r3, [r4, #0]
 80068c8:	1c5a      	adds	r2, r3, #1
 80068ca:	6022      	str	r2, [r4, #0]
 80068cc:	701e      	strb	r6, [r3, #0]
 80068ce:	6963      	ldr	r3, [r4, #20]
 80068d0:	4283      	cmp	r3, r0
 80068d2:	d004      	beq.n	80068de <__swbuf_r+0x62>
 80068d4:	89a3      	ldrh	r3, [r4, #12]
 80068d6:	07db      	lsls	r3, r3, #31
 80068d8:	d506      	bpl.n	80068e8 <__swbuf_r+0x6c>
 80068da:	2e0a      	cmp	r6, #10
 80068dc:	d104      	bne.n	80068e8 <__swbuf_r+0x6c>
 80068de:	4621      	mov	r1, r4
 80068e0:	4628      	mov	r0, r5
 80068e2:	f000 f915 	bl	8006b10 <_fflush_r>
 80068e6:	b988      	cbnz	r0, 800690c <__swbuf_r+0x90>
 80068e8:	4638      	mov	r0, r7
 80068ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80068ec:	4b0a      	ldr	r3, [pc, #40]	; (8006918 <__swbuf_r+0x9c>)
 80068ee:	429c      	cmp	r4, r3
 80068f0:	d101      	bne.n	80068f6 <__swbuf_r+0x7a>
 80068f2:	68ac      	ldr	r4, [r5, #8]
 80068f4:	e7cf      	b.n	8006896 <__swbuf_r+0x1a>
 80068f6:	4b09      	ldr	r3, [pc, #36]	; (800691c <__swbuf_r+0xa0>)
 80068f8:	429c      	cmp	r4, r3
 80068fa:	bf08      	it	eq
 80068fc:	68ec      	ldreq	r4, [r5, #12]
 80068fe:	e7ca      	b.n	8006896 <__swbuf_r+0x1a>
 8006900:	4621      	mov	r1, r4
 8006902:	4628      	mov	r0, r5
 8006904:	f000 f80c 	bl	8006920 <__swsetup_r>
 8006908:	2800      	cmp	r0, #0
 800690a:	d0cb      	beq.n	80068a4 <__swbuf_r+0x28>
 800690c:	f04f 37ff 	mov.w	r7, #4294967295
 8006910:	e7ea      	b.n	80068e8 <__swbuf_r+0x6c>
 8006912:	bf00      	nop
 8006914:	08007584 	.word	0x08007584
 8006918:	080075a4 	.word	0x080075a4
 800691c:	08007564 	.word	0x08007564

08006920 <__swsetup_r>:
 8006920:	4b32      	ldr	r3, [pc, #200]	; (80069ec <__swsetup_r+0xcc>)
 8006922:	b570      	push	{r4, r5, r6, lr}
 8006924:	681d      	ldr	r5, [r3, #0]
 8006926:	4606      	mov	r6, r0
 8006928:	460c      	mov	r4, r1
 800692a:	b125      	cbz	r5, 8006936 <__swsetup_r+0x16>
 800692c:	69ab      	ldr	r3, [r5, #24]
 800692e:	b913      	cbnz	r3, 8006936 <__swsetup_r+0x16>
 8006930:	4628      	mov	r0, r5
 8006932:	f000 f981 	bl	8006c38 <__sinit>
 8006936:	4b2e      	ldr	r3, [pc, #184]	; (80069f0 <__swsetup_r+0xd0>)
 8006938:	429c      	cmp	r4, r3
 800693a:	d10f      	bne.n	800695c <__swsetup_r+0x3c>
 800693c:	686c      	ldr	r4, [r5, #4]
 800693e:	89a3      	ldrh	r3, [r4, #12]
 8006940:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006944:	0719      	lsls	r1, r3, #28
 8006946:	d42c      	bmi.n	80069a2 <__swsetup_r+0x82>
 8006948:	06dd      	lsls	r5, r3, #27
 800694a:	d411      	bmi.n	8006970 <__swsetup_r+0x50>
 800694c:	2309      	movs	r3, #9
 800694e:	6033      	str	r3, [r6, #0]
 8006950:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006954:	f04f 30ff 	mov.w	r0, #4294967295
 8006958:	81a3      	strh	r3, [r4, #12]
 800695a:	e03e      	b.n	80069da <__swsetup_r+0xba>
 800695c:	4b25      	ldr	r3, [pc, #148]	; (80069f4 <__swsetup_r+0xd4>)
 800695e:	429c      	cmp	r4, r3
 8006960:	d101      	bne.n	8006966 <__swsetup_r+0x46>
 8006962:	68ac      	ldr	r4, [r5, #8]
 8006964:	e7eb      	b.n	800693e <__swsetup_r+0x1e>
 8006966:	4b24      	ldr	r3, [pc, #144]	; (80069f8 <__swsetup_r+0xd8>)
 8006968:	429c      	cmp	r4, r3
 800696a:	bf08      	it	eq
 800696c:	68ec      	ldreq	r4, [r5, #12]
 800696e:	e7e6      	b.n	800693e <__swsetup_r+0x1e>
 8006970:	0758      	lsls	r0, r3, #29
 8006972:	d512      	bpl.n	800699a <__swsetup_r+0x7a>
 8006974:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006976:	b141      	cbz	r1, 800698a <__swsetup_r+0x6a>
 8006978:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800697c:	4299      	cmp	r1, r3
 800697e:	d002      	beq.n	8006986 <__swsetup_r+0x66>
 8006980:	4630      	mov	r0, r6
 8006982:	f7ff fa45 	bl	8005e10 <_free_r>
 8006986:	2300      	movs	r3, #0
 8006988:	6363      	str	r3, [r4, #52]	; 0x34
 800698a:	89a3      	ldrh	r3, [r4, #12]
 800698c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006990:	81a3      	strh	r3, [r4, #12]
 8006992:	2300      	movs	r3, #0
 8006994:	6063      	str	r3, [r4, #4]
 8006996:	6923      	ldr	r3, [r4, #16]
 8006998:	6023      	str	r3, [r4, #0]
 800699a:	89a3      	ldrh	r3, [r4, #12]
 800699c:	f043 0308 	orr.w	r3, r3, #8
 80069a0:	81a3      	strh	r3, [r4, #12]
 80069a2:	6923      	ldr	r3, [r4, #16]
 80069a4:	b94b      	cbnz	r3, 80069ba <__swsetup_r+0x9a>
 80069a6:	89a3      	ldrh	r3, [r4, #12]
 80069a8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80069ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80069b0:	d003      	beq.n	80069ba <__swsetup_r+0x9a>
 80069b2:	4621      	mov	r1, r4
 80069b4:	4630      	mov	r0, r6
 80069b6:	f000 fa05 	bl	8006dc4 <__smakebuf_r>
 80069ba:	89a0      	ldrh	r0, [r4, #12]
 80069bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80069c0:	f010 0301 	ands.w	r3, r0, #1
 80069c4:	d00a      	beq.n	80069dc <__swsetup_r+0xbc>
 80069c6:	2300      	movs	r3, #0
 80069c8:	60a3      	str	r3, [r4, #8]
 80069ca:	6963      	ldr	r3, [r4, #20]
 80069cc:	425b      	negs	r3, r3
 80069ce:	61a3      	str	r3, [r4, #24]
 80069d0:	6923      	ldr	r3, [r4, #16]
 80069d2:	b943      	cbnz	r3, 80069e6 <__swsetup_r+0xc6>
 80069d4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80069d8:	d1ba      	bne.n	8006950 <__swsetup_r+0x30>
 80069da:	bd70      	pop	{r4, r5, r6, pc}
 80069dc:	0781      	lsls	r1, r0, #30
 80069de:	bf58      	it	pl
 80069e0:	6963      	ldrpl	r3, [r4, #20]
 80069e2:	60a3      	str	r3, [r4, #8]
 80069e4:	e7f4      	b.n	80069d0 <__swsetup_r+0xb0>
 80069e6:	2000      	movs	r0, #0
 80069e8:	e7f7      	b.n	80069da <__swsetup_r+0xba>
 80069ea:	bf00      	nop
 80069ec:	2000000c 	.word	0x2000000c
 80069f0:	08007584 	.word	0x08007584
 80069f4:	080075a4 	.word	0x080075a4
 80069f8:	08007564 	.word	0x08007564

080069fc <abort>:
 80069fc:	2006      	movs	r0, #6
 80069fe:	b508      	push	{r3, lr}
 8006a00:	f000 faba 	bl	8006f78 <raise>
 8006a04:	2001      	movs	r0, #1
 8006a06:	f7f9 fefb 	bl	8000800 <_exit>
	...

08006a0c <__sflush_r>:
 8006a0c:	898a      	ldrh	r2, [r1, #12]
 8006a0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a10:	4605      	mov	r5, r0
 8006a12:	0710      	lsls	r0, r2, #28
 8006a14:	460c      	mov	r4, r1
 8006a16:	d457      	bmi.n	8006ac8 <__sflush_r+0xbc>
 8006a18:	684b      	ldr	r3, [r1, #4]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	dc04      	bgt.n	8006a28 <__sflush_r+0x1c>
 8006a1e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	dc01      	bgt.n	8006a28 <__sflush_r+0x1c>
 8006a24:	2000      	movs	r0, #0
 8006a26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a28:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006a2a:	2e00      	cmp	r6, #0
 8006a2c:	d0fa      	beq.n	8006a24 <__sflush_r+0x18>
 8006a2e:	2300      	movs	r3, #0
 8006a30:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006a34:	682f      	ldr	r7, [r5, #0]
 8006a36:	602b      	str	r3, [r5, #0]
 8006a38:	d032      	beq.n	8006aa0 <__sflush_r+0x94>
 8006a3a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006a3c:	89a3      	ldrh	r3, [r4, #12]
 8006a3e:	075a      	lsls	r2, r3, #29
 8006a40:	d505      	bpl.n	8006a4e <__sflush_r+0x42>
 8006a42:	6863      	ldr	r3, [r4, #4]
 8006a44:	1ac0      	subs	r0, r0, r3
 8006a46:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006a48:	b10b      	cbz	r3, 8006a4e <__sflush_r+0x42>
 8006a4a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006a4c:	1ac0      	subs	r0, r0, r3
 8006a4e:	2300      	movs	r3, #0
 8006a50:	4602      	mov	r2, r0
 8006a52:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006a54:	4628      	mov	r0, r5
 8006a56:	6a21      	ldr	r1, [r4, #32]
 8006a58:	47b0      	blx	r6
 8006a5a:	1c43      	adds	r3, r0, #1
 8006a5c:	89a3      	ldrh	r3, [r4, #12]
 8006a5e:	d106      	bne.n	8006a6e <__sflush_r+0x62>
 8006a60:	6829      	ldr	r1, [r5, #0]
 8006a62:	291d      	cmp	r1, #29
 8006a64:	d82c      	bhi.n	8006ac0 <__sflush_r+0xb4>
 8006a66:	4a29      	ldr	r2, [pc, #164]	; (8006b0c <__sflush_r+0x100>)
 8006a68:	40ca      	lsrs	r2, r1
 8006a6a:	07d6      	lsls	r6, r2, #31
 8006a6c:	d528      	bpl.n	8006ac0 <__sflush_r+0xb4>
 8006a6e:	2200      	movs	r2, #0
 8006a70:	6062      	str	r2, [r4, #4]
 8006a72:	6922      	ldr	r2, [r4, #16]
 8006a74:	04d9      	lsls	r1, r3, #19
 8006a76:	6022      	str	r2, [r4, #0]
 8006a78:	d504      	bpl.n	8006a84 <__sflush_r+0x78>
 8006a7a:	1c42      	adds	r2, r0, #1
 8006a7c:	d101      	bne.n	8006a82 <__sflush_r+0x76>
 8006a7e:	682b      	ldr	r3, [r5, #0]
 8006a80:	b903      	cbnz	r3, 8006a84 <__sflush_r+0x78>
 8006a82:	6560      	str	r0, [r4, #84]	; 0x54
 8006a84:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006a86:	602f      	str	r7, [r5, #0]
 8006a88:	2900      	cmp	r1, #0
 8006a8a:	d0cb      	beq.n	8006a24 <__sflush_r+0x18>
 8006a8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006a90:	4299      	cmp	r1, r3
 8006a92:	d002      	beq.n	8006a9a <__sflush_r+0x8e>
 8006a94:	4628      	mov	r0, r5
 8006a96:	f7ff f9bb 	bl	8005e10 <_free_r>
 8006a9a:	2000      	movs	r0, #0
 8006a9c:	6360      	str	r0, [r4, #52]	; 0x34
 8006a9e:	e7c2      	b.n	8006a26 <__sflush_r+0x1a>
 8006aa0:	6a21      	ldr	r1, [r4, #32]
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	4628      	mov	r0, r5
 8006aa6:	47b0      	blx	r6
 8006aa8:	1c41      	adds	r1, r0, #1
 8006aaa:	d1c7      	bne.n	8006a3c <__sflush_r+0x30>
 8006aac:	682b      	ldr	r3, [r5, #0]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d0c4      	beq.n	8006a3c <__sflush_r+0x30>
 8006ab2:	2b1d      	cmp	r3, #29
 8006ab4:	d001      	beq.n	8006aba <__sflush_r+0xae>
 8006ab6:	2b16      	cmp	r3, #22
 8006ab8:	d101      	bne.n	8006abe <__sflush_r+0xb2>
 8006aba:	602f      	str	r7, [r5, #0]
 8006abc:	e7b2      	b.n	8006a24 <__sflush_r+0x18>
 8006abe:	89a3      	ldrh	r3, [r4, #12]
 8006ac0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ac4:	81a3      	strh	r3, [r4, #12]
 8006ac6:	e7ae      	b.n	8006a26 <__sflush_r+0x1a>
 8006ac8:	690f      	ldr	r7, [r1, #16]
 8006aca:	2f00      	cmp	r7, #0
 8006acc:	d0aa      	beq.n	8006a24 <__sflush_r+0x18>
 8006ace:	0793      	lsls	r3, r2, #30
 8006ad0:	bf18      	it	ne
 8006ad2:	2300      	movne	r3, #0
 8006ad4:	680e      	ldr	r6, [r1, #0]
 8006ad6:	bf08      	it	eq
 8006ad8:	694b      	ldreq	r3, [r1, #20]
 8006ada:	1bf6      	subs	r6, r6, r7
 8006adc:	600f      	str	r7, [r1, #0]
 8006ade:	608b      	str	r3, [r1, #8]
 8006ae0:	2e00      	cmp	r6, #0
 8006ae2:	dd9f      	ble.n	8006a24 <__sflush_r+0x18>
 8006ae4:	4633      	mov	r3, r6
 8006ae6:	463a      	mov	r2, r7
 8006ae8:	4628      	mov	r0, r5
 8006aea:	6a21      	ldr	r1, [r4, #32]
 8006aec:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8006af0:	47e0      	blx	ip
 8006af2:	2800      	cmp	r0, #0
 8006af4:	dc06      	bgt.n	8006b04 <__sflush_r+0xf8>
 8006af6:	89a3      	ldrh	r3, [r4, #12]
 8006af8:	f04f 30ff 	mov.w	r0, #4294967295
 8006afc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b00:	81a3      	strh	r3, [r4, #12]
 8006b02:	e790      	b.n	8006a26 <__sflush_r+0x1a>
 8006b04:	4407      	add	r7, r0
 8006b06:	1a36      	subs	r6, r6, r0
 8006b08:	e7ea      	b.n	8006ae0 <__sflush_r+0xd4>
 8006b0a:	bf00      	nop
 8006b0c:	20400001 	.word	0x20400001

08006b10 <_fflush_r>:
 8006b10:	b538      	push	{r3, r4, r5, lr}
 8006b12:	690b      	ldr	r3, [r1, #16]
 8006b14:	4605      	mov	r5, r0
 8006b16:	460c      	mov	r4, r1
 8006b18:	b913      	cbnz	r3, 8006b20 <_fflush_r+0x10>
 8006b1a:	2500      	movs	r5, #0
 8006b1c:	4628      	mov	r0, r5
 8006b1e:	bd38      	pop	{r3, r4, r5, pc}
 8006b20:	b118      	cbz	r0, 8006b2a <_fflush_r+0x1a>
 8006b22:	6983      	ldr	r3, [r0, #24]
 8006b24:	b90b      	cbnz	r3, 8006b2a <_fflush_r+0x1a>
 8006b26:	f000 f887 	bl	8006c38 <__sinit>
 8006b2a:	4b14      	ldr	r3, [pc, #80]	; (8006b7c <_fflush_r+0x6c>)
 8006b2c:	429c      	cmp	r4, r3
 8006b2e:	d11b      	bne.n	8006b68 <_fflush_r+0x58>
 8006b30:	686c      	ldr	r4, [r5, #4]
 8006b32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d0ef      	beq.n	8006b1a <_fflush_r+0xa>
 8006b3a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006b3c:	07d0      	lsls	r0, r2, #31
 8006b3e:	d404      	bmi.n	8006b4a <_fflush_r+0x3a>
 8006b40:	0599      	lsls	r1, r3, #22
 8006b42:	d402      	bmi.n	8006b4a <_fflush_r+0x3a>
 8006b44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b46:	f000 f915 	bl	8006d74 <__retarget_lock_acquire_recursive>
 8006b4a:	4628      	mov	r0, r5
 8006b4c:	4621      	mov	r1, r4
 8006b4e:	f7ff ff5d 	bl	8006a0c <__sflush_r>
 8006b52:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006b54:	4605      	mov	r5, r0
 8006b56:	07da      	lsls	r2, r3, #31
 8006b58:	d4e0      	bmi.n	8006b1c <_fflush_r+0xc>
 8006b5a:	89a3      	ldrh	r3, [r4, #12]
 8006b5c:	059b      	lsls	r3, r3, #22
 8006b5e:	d4dd      	bmi.n	8006b1c <_fflush_r+0xc>
 8006b60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b62:	f000 f908 	bl	8006d76 <__retarget_lock_release_recursive>
 8006b66:	e7d9      	b.n	8006b1c <_fflush_r+0xc>
 8006b68:	4b05      	ldr	r3, [pc, #20]	; (8006b80 <_fflush_r+0x70>)
 8006b6a:	429c      	cmp	r4, r3
 8006b6c:	d101      	bne.n	8006b72 <_fflush_r+0x62>
 8006b6e:	68ac      	ldr	r4, [r5, #8]
 8006b70:	e7df      	b.n	8006b32 <_fflush_r+0x22>
 8006b72:	4b04      	ldr	r3, [pc, #16]	; (8006b84 <_fflush_r+0x74>)
 8006b74:	429c      	cmp	r4, r3
 8006b76:	bf08      	it	eq
 8006b78:	68ec      	ldreq	r4, [r5, #12]
 8006b7a:	e7da      	b.n	8006b32 <_fflush_r+0x22>
 8006b7c:	08007584 	.word	0x08007584
 8006b80:	080075a4 	.word	0x080075a4
 8006b84:	08007564 	.word	0x08007564

08006b88 <std>:
 8006b88:	2300      	movs	r3, #0
 8006b8a:	b510      	push	{r4, lr}
 8006b8c:	4604      	mov	r4, r0
 8006b8e:	e9c0 3300 	strd	r3, r3, [r0]
 8006b92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006b96:	6083      	str	r3, [r0, #8]
 8006b98:	8181      	strh	r1, [r0, #12]
 8006b9a:	6643      	str	r3, [r0, #100]	; 0x64
 8006b9c:	81c2      	strh	r2, [r0, #14]
 8006b9e:	6183      	str	r3, [r0, #24]
 8006ba0:	4619      	mov	r1, r3
 8006ba2:	2208      	movs	r2, #8
 8006ba4:	305c      	adds	r0, #92	; 0x5c
 8006ba6:	f7ff f895 	bl	8005cd4 <memset>
 8006baa:	4b05      	ldr	r3, [pc, #20]	; (8006bc0 <std+0x38>)
 8006bac:	6224      	str	r4, [r4, #32]
 8006bae:	6263      	str	r3, [r4, #36]	; 0x24
 8006bb0:	4b04      	ldr	r3, [pc, #16]	; (8006bc4 <std+0x3c>)
 8006bb2:	62a3      	str	r3, [r4, #40]	; 0x28
 8006bb4:	4b04      	ldr	r3, [pc, #16]	; (8006bc8 <std+0x40>)
 8006bb6:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006bb8:	4b04      	ldr	r3, [pc, #16]	; (8006bcc <std+0x44>)
 8006bba:	6323      	str	r3, [r4, #48]	; 0x30
 8006bbc:	bd10      	pop	{r4, pc}
 8006bbe:	bf00      	nop
 8006bc0:	08006fb1 	.word	0x08006fb1
 8006bc4:	08006fd3 	.word	0x08006fd3
 8006bc8:	0800700b 	.word	0x0800700b
 8006bcc:	0800702f 	.word	0x0800702f

08006bd0 <_cleanup_r>:
 8006bd0:	4901      	ldr	r1, [pc, #4]	; (8006bd8 <_cleanup_r+0x8>)
 8006bd2:	f000 b8af 	b.w	8006d34 <_fwalk_reent>
 8006bd6:	bf00      	nop
 8006bd8:	08006b11 	.word	0x08006b11

08006bdc <__sfmoreglue>:
 8006bdc:	2268      	movs	r2, #104	; 0x68
 8006bde:	b570      	push	{r4, r5, r6, lr}
 8006be0:	1e4d      	subs	r5, r1, #1
 8006be2:	4355      	muls	r5, r2
 8006be4:	460e      	mov	r6, r1
 8006be6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006bea:	f7ff f979 	bl	8005ee0 <_malloc_r>
 8006bee:	4604      	mov	r4, r0
 8006bf0:	b140      	cbz	r0, 8006c04 <__sfmoreglue+0x28>
 8006bf2:	2100      	movs	r1, #0
 8006bf4:	e9c0 1600 	strd	r1, r6, [r0]
 8006bf8:	300c      	adds	r0, #12
 8006bfa:	60a0      	str	r0, [r4, #8]
 8006bfc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006c00:	f7ff f868 	bl	8005cd4 <memset>
 8006c04:	4620      	mov	r0, r4
 8006c06:	bd70      	pop	{r4, r5, r6, pc}

08006c08 <__sfp_lock_acquire>:
 8006c08:	4801      	ldr	r0, [pc, #4]	; (8006c10 <__sfp_lock_acquire+0x8>)
 8006c0a:	f000 b8b3 	b.w	8006d74 <__retarget_lock_acquire_recursive>
 8006c0e:	bf00      	nop
 8006c10:	20000209 	.word	0x20000209

08006c14 <__sfp_lock_release>:
 8006c14:	4801      	ldr	r0, [pc, #4]	; (8006c1c <__sfp_lock_release+0x8>)
 8006c16:	f000 b8ae 	b.w	8006d76 <__retarget_lock_release_recursive>
 8006c1a:	bf00      	nop
 8006c1c:	20000209 	.word	0x20000209

08006c20 <__sinit_lock_acquire>:
 8006c20:	4801      	ldr	r0, [pc, #4]	; (8006c28 <__sinit_lock_acquire+0x8>)
 8006c22:	f000 b8a7 	b.w	8006d74 <__retarget_lock_acquire_recursive>
 8006c26:	bf00      	nop
 8006c28:	2000020a 	.word	0x2000020a

08006c2c <__sinit_lock_release>:
 8006c2c:	4801      	ldr	r0, [pc, #4]	; (8006c34 <__sinit_lock_release+0x8>)
 8006c2e:	f000 b8a2 	b.w	8006d76 <__retarget_lock_release_recursive>
 8006c32:	bf00      	nop
 8006c34:	2000020a 	.word	0x2000020a

08006c38 <__sinit>:
 8006c38:	b510      	push	{r4, lr}
 8006c3a:	4604      	mov	r4, r0
 8006c3c:	f7ff fff0 	bl	8006c20 <__sinit_lock_acquire>
 8006c40:	69a3      	ldr	r3, [r4, #24]
 8006c42:	b11b      	cbz	r3, 8006c4c <__sinit+0x14>
 8006c44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c48:	f7ff bff0 	b.w	8006c2c <__sinit_lock_release>
 8006c4c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006c50:	6523      	str	r3, [r4, #80]	; 0x50
 8006c52:	4b13      	ldr	r3, [pc, #76]	; (8006ca0 <__sinit+0x68>)
 8006c54:	4a13      	ldr	r2, [pc, #76]	; (8006ca4 <__sinit+0x6c>)
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	62a2      	str	r2, [r4, #40]	; 0x28
 8006c5a:	42a3      	cmp	r3, r4
 8006c5c:	bf08      	it	eq
 8006c5e:	2301      	moveq	r3, #1
 8006c60:	4620      	mov	r0, r4
 8006c62:	bf08      	it	eq
 8006c64:	61a3      	streq	r3, [r4, #24]
 8006c66:	f000 f81f 	bl	8006ca8 <__sfp>
 8006c6a:	6060      	str	r0, [r4, #4]
 8006c6c:	4620      	mov	r0, r4
 8006c6e:	f000 f81b 	bl	8006ca8 <__sfp>
 8006c72:	60a0      	str	r0, [r4, #8]
 8006c74:	4620      	mov	r0, r4
 8006c76:	f000 f817 	bl	8006ca8 <__sfp>
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	2104      	movs	r1, #4
 8006c7e:	60e0      	str	r0, [r4, #12]
 8006c80:	6860      	ldr	r0, [r4, #4]
 8006c82:	f7ff ff81 	bl	8006b88 <std>
 8006c86:	2201      	movs	r2, #1
 8006c88:	2109      	movs	r1, #9
 8006c8a:	68a0      	ldr	r0, [r4, #8]
 8006c8c:	f7ff ff7c 	bl	8006b88 <std>
 8006c90:	2202      	movs	r2, #2
 8006c92:	2112      	movs	r1, #18
 8006c94:	68e0      	ldr	r0, [r4, #12]
 8006c96:	f7ff ff77 	bl	8006b88 <std>
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	61a3      	str	r3, [r4, #24]
 8006c9e:	e7d1      	b.n	8006c44 <__sinit+0xc>
 8006ca0:	0800747c 	.word	0x0800747c
 8006ca4:	08006bd1 	.word	0x08006bd1

08006ca8 <__sfp>:
 8006ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006caa:	4607      	mov	r7, r0
 8006cac:	f7ff ffac 	bl	8006c08 <__sfp_lock_acquire>
 8006cb0:	4b1e      	ldr	r3, [pc, #120]	; (8006d2c <__sfp+0x84>)
 8006cb2:	681e      	ldr	r6, [r3, #0]
 8006cb4:	69b3      	ldr	r3, [r6, #24]
 8006cb6:	b913      	cbnz	r3, 8006cbe <__sfp+0x16>
 8006cb8:	4630      	mov	r0, r6
 8006cba:	f7ff ffbd 	bl	8006c38 <__sinit>
 8006cbe:	3648      	adds	r6, #72	; 0x48
 8006cc0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006cc4:	3b01      	subs	r3, #1
 8006cc6:	d503      	bpl.n	8006cd0 <__sfp+0x28>
 8006cc8:	6833      	ldr	r3, [r6, #0]
 8006cca:	b30b      	cbz	r3, 8006d10 <__sfp+0x68>
 8006ccc:	6836      	ldr	r6, [r6, #0]
 8006cce:	e7f7      	b.n	8006cc0 <__sfp+0x18>
 8006cd0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006cd4:	b9d5      	cbnz	r5, 8006d0c <__sfp+0x64>
 8006cd6:	4b16      	ldr	r3, [pc, #88]	; (8006d30 <__sfp+0x88>)
 8006cd8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006cdc:	60e3      	str	r3, [r4, #12]
 8006cde:	6665      	str	r5, [r4, #100]	; 0x64
 8006ce0:	f000 f847 	bl	8006d72 <__retarget_lock_init_recursive>
 8006ce4:	f7ff ff96 	bl	8006c14 <__sfp_lock_release>
 8006ce8:	2208      	movs	r2, #8
 8006cea:	4629      	mov	r1, r5
 8006cec:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006cf0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006cf4:	6025      	str	r5, [r4, #0]
 8006cf6:	61a5      	str	r5, [r4, #24]
 8006cf8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006cfc:	f7fe ffea 	bl	8005cd4 <memset>
 8006d00:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006d04:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006d08:	4620      	mov	r0, r4
 8006d0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d0c:	3468      	adds	r4, #104	; 0x68
 8006d0e:	e7d9      	b.n	8006cc4 <__sfp+0x1c>
 8006d10:	2104      	movs	r1, #4
 8006d12:	4638      	mov	r0, r7
 8006d14:	f7ff ff62 	bl	8006bdc <__sfmoreglue>
 8006d18:	4604      	mov	r4, r0
 8006d1a:	6030      	str	r0, [r6, #0]
 8006d1c:	2800      	cmp	r0, #0
 8006d1e:	d1d5      	bne.n	8006ccc <__sfp+0x24>
 8006d20:	f7ff ff78 	bl	8006c14 <__sfp_lock_release>
 8006d24:	230c      	movs	r3, #12
 8006d26:	603b      	str	r3, [r7, #0]
 8006d28:	e7ee      	b.n	8006d08 <__sfp+0x60>
 8006d2a:	bf00      	nop
 8006d2c:	0800747c 	.word	0x0800747c
 8006d30:	ffff0001 	.word	0xffff0001

08006d34 <_fwalk_reent>:
 8006d34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d38:	4606      	mov	r6, r0
 8006d3a:	4688      	mov	r8, r1
 8006d3c:	2700      	movs	r7, #0
 8006d3e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006d42:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006d46:	f1b9 0901 	subs.w	r9, r9, #1
 8006d4a:	d505      	bpl.n	8006d58 <_fwalk_reent+0x24>
 8006d4c:	6824      	ldr	r4, [r4, #0]
 8006d4e:	2c00      	cmp	r4, #0
 8006d50:	d1f7      	bne.n	8006d42 <_fwalk_reent+0xe>
 8006d52:	4638      	mov	r0, r7
 8006d54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d58:	89ab      	ldrh	r3, [r5, #12]
 8006d5a:	2b01      	cmp	r3, #1
 8006d5c:	d907      	bls.n	8006d6e <_fwalk_reent+0x3a>
 8006d5e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006d62:	3301      	adds	r3, #1
 8006d64:	d003      	beq.n	8006d6e <_fwalk_reent+0x3a>
 8006d66:	4629      	mov	r1, r5
 8006d68:	4630      	mov	r0, r6
 8006d6a:	47c0      	blx	r8
 8006d6c:	4307      	orrs	r7, r0
 8006d6e:	3568      	adds	r5, #104	; 0x68
 8006d70:	e7e9      	b.n	8006d46 <_fwalk_reent+0x12>

08006d72 <__retarget_lock_init_recursive>:
 8006d72:	4770      	bx	lr

08006d74 <__retarget_lock_acquire_recursive>:
 8006d74:	4770      	bx	lr

08006d76 <__retarget_lock_release_recursive>:
 8006d76:	4770      	bx	lr

08006d78 <__swhatbuf_r>:
 8006d78:	b570      	push	{r4, r5, r6, lr}
 8006d7a:	460e      	mov	r6, r1
 8006d7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d80:	4614      	mov	r4, r2
 8006d82:	2900      	cmp	r1, #0
 8006d84:	461d      	mov	r5, r3
 8006d86:	b096      	sub	sp, #88	; 0x58
 8006d88:	da08      	bge.n	8006d9c <__swhatbuf_r+0x24>
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006d90:	602a      	str	r2, [r5, #0]
 8006d92:	061a      	lsls	r2, r3, #24
 8006d94:	d410      	bmi.n	8006db8 <__swhatbuf_r+0x40>
 8006d96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d9a:	e00e      	b.n	8006dba <__swhatbuf_r+0x42>
 8006d9c:	466a      	mov	r2, sp
 8006d9e:	f000 f96d 	bl	800707c <_fstat_r>
 8006da2:	2800      	cmp	r0, #0
 8006da4:	dbf1      	blt.n	8006d8a <__swhatbuf_r+0x12>
 8006da6:	9a01      	ldr	r2, [sp, #4]
 8006da8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006dac:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006db0:	425a      	negs	r2, r3
 8006db2:	415a      	adcs	r2, r3
 8006db4:	602a      	str	r2, [r5, #0]
 8006db6:	e7ee      	b.n	8006d96 <__swhatbuf_r+0x1e>
 8006db8:	2340      	movs	r3, #64	; 0x40
 8006dba:	2000      	movs	r0, #0
 8006dbc:	6023      	str	r3, [r4, #0]
 8006dbe:	b016      	add	sp, #88	; 0x58
 8006dc0:	bd70      	pop	{r4, r5, r6, pc}
	...

08006dc4 <__smakebuf_r>:
 8006dc4:	898b      	ldrh	r3, [r1, #12]
 8006dc6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006dc8:	079d      	lsls	r5, r3, #30
 8006dca:	4606      	mov	r6, r0
 8006dcc:	460c      	mov	r4, r1
 8006dce:	d507      	bpl.n	8006de0 <__smakebuf_r+0x1c>
 8006dd0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006dd4:	6023      	str	r3, [r4, #0]
 8006dd6:	6123      	str	r3, [r4, #16]
 8006dd8:	2301      	movs	r3, #1
 8006dda:	6163      	str	r3, [r4, #20]
 8006ddc:	b002      	add	sp, #8
 8006dde:	bd70      	pop	{r4, r5, r6, pc}
 8006de0:	466a      	mov	r2, sp
 8006de2:	ab01      	add	r3, sp, #4
 8006de4:	f7ff ffc8 	bl	8006d78 <__swhatbuf_r>
 8006de8:	9900      	ldr	r1, [sp, #0]
 8006dea:	4605      	mov	r5, r0
 8006dec:	4630      	mov	r0, r6
 8006dee:	f7ff f877 	bl	8005ee0 <_malloc_r>
 8006df2:	b948      	cbnz	r0, 8006e08 <__smakebuf_r+0x44>
 8006df4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006df8:	059a      	lsls	r2, r3, #22
 8006dfa:	d4ef      	bmi.n	8006ddc <__smakebuf_r+0x18>
 8006dfc:	f023 0303 	bic.w	r3, r3, #3
 8006e00:	f043 0302 	orr.w	r3, r3, #2
 8006e04:	81a3      	strh	r3, [r4, #12]
 8006e06:	e7e3      	b.n	8006dd0 <__smakebuf_r+0xc>
 8006e08:	4b0d      	ldr	r3, [pc, #52]	; (8006e40 <__smakebuf_r+0x7c>)
 8006e0a:	62b3      	str	r3, [r6, #40]	; 0x28
 8006e0c:	89a3      	ldrh	r3, [r4, #12]
 8006e0e:	6020      	str	r0, [r4, #0]
 8006e10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e14:	81a3      	strh	r3, [r4, #12]
 8006e16:	9b00      	ldr	r3, [sp, #0]
 8006e18:	6120      	str	r0, [r4, #16]
 8006e1a:	6163      	str	r3, [r4, #20]
 8006e1c:	9b01      	ldr	r3, [sp, #4]
 8006e1e:	b15b      	cbz	r3, 8006e38 <__smakebuf_r+0x74>
 8006e20:	4630      	mov	r0, r6
 8006e22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006e26:	f000 f93b 	bl	80070a0 <_isatty_r>
 8006e2a:	b128      	cbz	r0, 8006e38 <__smakebuf_r+0x74>
 8006e2c:	89a3      	ldrh	r3, [r4, #12]
 8006e2e:	f023 0303 	bic.w	r3, r3, #3
 8006e32:	f043 0301 	orr.w	r3, r3, #1
 8006e36:	81a3      	strh	r3, [r4, #12]
 8006e38:	89a0      	ldrh	r0, [r4, #12]
 8006e3a:	4305      	orrs	r5, r0
 8006e3c:	81a5      	strh	r5, [r4, #12]
 8006e3e:	e7cd      	b.n	8006ddc <__smakebuf_r+0x18>
 8006e40:	08006bd1 	.word	0x08006bd1

08006e44 <memchr>:
 8006e44:	4603      	mov	r3, r0
 8006e46:	b510      	push	{r4, lr}
 8006e48:	b2c9      	uxtb	r1, r1
 8006e4a:	4402      	add	r2, r0
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	4618      	mov	r0, r3
 8006e50:	d101      	bne.n	8006e56 <memchr+0x12>
 8006e52:	2000      	movs	r0, #0
 8006e54:	e003      	b.n	8006e5e <memchr+0x1a>
 8006e56:	7804      	ldrb	r4, [r0, #0]
 8006e58:	3301      	adds	r3, #1
 8006e5a:	428c      	cmp	r4, r1
 8006e5c:	d1f6      	bne.n	8006e4c <memchr+0x8>
 8006e5e:	bd10      	pop	{r4, pc}

08006e60 <memcpy>:
 8006e60:	440a      	add	r2, r1
 8006e62:	4291      	cmp	r1, r2
 8006e64:	f100 33ff 	add.w	r3, r0, #4294967295
 8006e68:	d100      	bne.n	8006e6c <memcpy+0xc>
 8006e6a:	4770      	bx	lr
 8006e6c:	b510      	push	{r4, lr}
 8006e6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006e72:	4291      	cmp	r1, r2
 8006e74:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006e78:	d1f9      	bne.n	8006e6e <memcpy+0xe>
 8006e7a:	bd10      	pop	{r4, pc}

08006e7c <memmove>:
 8006e7c:	4288      	cmp	r0, r1
 8006e7e:	b510      	push	{r4, lr}
 8006e80:	eb01 0402 	add.w	r4, r1, r2
 8006e84:	d902      	bls.n	8006e8c <memmove+0x10>
 8006e86:	4284      	cmp	r4, r0
 8006e88:	4623      	mov	r3, r4
 8006e8a:	d807      	bhi.n	8006e9c <memmove+0x20>
 8006e8c:	1e43      	subs	r3, r0, #1
 8006e8e:	42a1      	cmp	r1, r4
 8006e90:	d008      	beq.n	8006ea4 <memmove+0x28>
 8006e92:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006e96:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006e9a:	e7f8      	b.n	8006e8e <memmove+0x12>
 8006e9c:	4601      	mov	r1, r0
 8006e9e:	4402      	add	r2, r0
 8006ea0:	428a      	cmp	r2, r1
 8006ea2:	d100      	bne.n	8006ea6 <memmove+0x2a>
 8006ea4:	bd10      	pop	{r4, pc}
 8006ea6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006eaa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006eae:	e7f7      	b.n	8006ea0 <memmove+0x24>

08006eb0 <__malloc_lock>:
 8006eb0:	4801      	ldr	r0, [pc, #4]	; (8006eb8 <__malloc_lock+0x8>)
 8006eb2:	f7ff bf5f 	b.w	8006d74 <__retarget_lock_acquire_recursive>
 8006eb6:	bf00      	nop
 8006eb8:	20000208 	.word	0x20000208

08006ebc <__malloc_unlock>:
 8006ebc:	4801      	ldr	r0, [pc, #4]	; (8006ec4 <__malloc_unlock+0x8>)
 8006ebe:	f7ff bf5a 	b.w	8006d76 <__retarget_lock_release_recursive>
 8006ec2:	bf00      	nop
 8006ec4:	20000208 	.word	0x20000208

08006ec8 <_realloc_r>:
 8006ec8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ecc:	4680      	mov	r8, r0
 8006ece:	4614      	mov	r4, r2
 8006ed0:	460e      	mov	r6, r1
 8006ed2:	b921      	cbnz	r1, 8006ede <_realloc_r+0x16>
 8006ed4:	4611      	mov	r1, r2
 8006ed6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006eda:	f7ff b801 	b.w	8005ee0 <_malloc_r>
 8006ede:	b92a      	cbnz	r2, 8006eec <_realloc_r+0x24>
 8006ee0:	f7fe ff96 	bl	8005e10 <_free_r>
 8006ee4:	4625      	mov	r5, r4
 8006ee6:	4628      	mov	r0, r5
 8006ee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006eec:	f000 f8fa 	bl	80070e4 <_malloc_usable_size_r>
 8006ef0:	4284      	cmp	r4, r0
 8006ef2:	4607      	mov	r7, r0
 8006ef4:	d802      	bhi.n	8006efc <_realloc_r+0x34>
 8006ef6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006efa:	d812      	bhi.n	8006f22 <_realloc_r+0x5a>
 8006efc:	4621      	mov	r1, r4
 8006efe:	4640      	mov	r0, r8
 8006f00:	f7fe ffee 	bl	8005ee0 <_malloc_r>
 8006f04:	4605      	mov	r5, r0
 8006f06:	2800      	cmp	r0, #0
 8006f08:	d0ed      	beq.n	8006ee6 <_realloc_r+0x1e>
 8006f0a:	42bc      	cmp	r4, r7
 8006f0c:	4622      	mov	r2, r4
 8006f0e:	4631      	mov	r1, r6
 8006f10:	bf28      	it	cs
 8006f12:	463a      	movcs	r2, r7
 8006f14:	f7ff ffa4 	bl	8006e60 <memcpy>
 8006f18:	4631      	mov	r1, r6
 8006f1a:	4640      	mov	r0, r8
 8006f1c:	f7fe ff78 	bl	8005e10 <_free_r>
 8006f20:	e7e1      	b.n	8006ee6 <_realloc_r+0x1e>
 8006f22:	4635      	mov	r5, r6
 8006f24:	e7df      	b.n	8006ee6 <_realloc_r+0x1e>

08006f26 <_raise_r>:
 8006f26:	291f      	cmp	r1, #31
 8006f28:	b538      	push	{r3, r4, r5, lr}
 8006f2a:	4604      	mov	r4, r0
 8006f2c:	460d      	mov	r5, r1
 8006f2e:	d904      	bls.n	8006f3a <_raise_r+0x14>
 8006f30:	2316      	movs	r3, #22
 8006f32:	6003      	str	r3, [r0, #0]
 8006f34:	f04f 30ff 	mov.w	r0, #4294967295
 8006f38:	bd38      	pop	{r3, r4, r5, pc}
 8006f3a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006f3c:	b112      	cbz	r2, 8006f44 <_raise_r+0x1e>
 8006f3e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006f42:	b94b      	cbnz	r3, 8006f58 <_raise_r+0x32>
 8006f44:	4620      	mov	r0, r4
 8006f46:	f000 f831 	bl	8006fac <_getpid_r>
 8006f4a:	462a      	mov	r2, r5
 8006f4c:	4601      	mov	r1, r0
 8006f4e:	4620      	mov	r0, r4
 8006f50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f54:	f000 b818 	b.w	8006f88 <_kill_r>
 8006f58:	2b01      	cmp	r3, #1
 8006f5a:	d00a      	beq.n	8006f72 <_raise_r+0x4c>
 8006f5c:	1c59      	adds	r1, r3, #1
 8006f5e:	d103      	bne.n	8006f68 <_raise_r+0x42>
 8006f60:	2316      	movs	r3, #22
 8006f62:	6003      	str	r3, [r0, #0]
 8006f64:	2001      	movs	r0, #1
 8006f66:	e7e7      	b.n	8006f38 <_raise_r+0x12>
 8006f68:	2400      	movs	r4, #0
 8006f6a:	4628      	mov	r0, r5
 8006f6c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006f70:	4798      	blx	r3
 8006f72:	2000      	movs	r0, #0
 8006f74:	e7e0      	b.n	8006f38 <_raise_r+0x12>
	...

08006f78 <raise>:
 8006f78:	4b02      	ldr	r3, [pc, #8]	; (8006f84 <raise+0xc>)
 8006f7a:	4601      	mov	r1, r0
 8006f7c:	6818      	ldr	r0, [r3, #0]
 8006f7e:	f7ff bfd2 	b.w	8006f26 <_raise_r>
 8006f82:	bf00      	nop
 8006f84:	2000000c 	.word	0x2000000c

08006f88 <_kill_r>:
 8006f88:	b538      	push	{r3, r4, r5, lr}
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	4d06      	ldr	r5, [pc, #24]	; (8006fa8 <_kill_r+0x20>)
 8006f8e:	4604      	mov	r4, r0
 8006f90:	4608      	mov	r0, r1
 8006f92:	4611      	mov	r1, r2
 8006f94:	602b      	str	r3, [r5, #0]
 8006f96:	f7f9 fc23 	bl	80007e0 <_kill>
 8006f9a:	1c43      	adds	r3, r0, #1
 8006f9c:	d102      	bne.n	8006fa4 <_kill_r+0x1c>
 8006f9e:	682b      	ldr	r3, [r5, #0]
 8006fa0:	b103      	cbz	r3, 8006fa4 <_kill_r+0x1c>
 8006fa2:	6023      	str	r3, [r4, #0]
 8006fa4:	bd38      	pop	{r3, r4, r5, pc}
 8006fa6:	bf00      	nop
 8006fa8:	2000020c 	.word	0x2000020c

08006fac <_getpid_r>:
 8006fac:	f7f9 bc11 	b.w	80007d2 <_getpid>

08006fb0 <__sread>:
 8006fb0:	b510      	push	{r4, lr}
 8006fb2:	460c      	mov	r4, r1
 8006fb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fb8:	f000 f89c 	bl	80070f4 <_read_r>
 8006fbc:	2800      	cmp	r0, #0
 8006fbe:	bfab      	itete	ge
 8006fc0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006fc2:	89a3      	ldrhlt	r3, [r4, #12]
 8006fc4:	181b      	addge	r3, r3, r0
 8006fc6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006fca:	bfac      	ite	ge
 8006fcc:	6563      	strge	r3, [r4, #84]	; 0x54
 8006fce:	81a3      	strhlt	r3, [r4, #12]
 8006fd0:	bd10      	pop	{r4, pc}

08006fd2 <__swrite>:
 8006fd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fd6:	461f      	mov	r7, r3
 8006fd8:	898b      	ldrh	r3, [r1, #12]
 8006fda:	4605      	mov	r5, r0
 8006fdc:	05db      	lsls	r3, r3, #23
 8006fde:	460c      	mov	r4, r1
 8006fe0:	4616      	mov	r6, r2
 8006fe2:	d505      	bpl.n	8006ff0 <__swrite+0x1e>
 8006fe4:	2302      	movs	r3, #2
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fec:	f000 f868 	bl	80070c0 <_lseek_r>
 8006ff0:	89a3      	ldrh	r3, [r4, #12]
 8006ff2:	4632      	mov	r2, r6
 8006ff4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006ff8:	81a3      	strh	r3, [r4, #12]
 8006ffa:	4628      	mov	r0, r5
 8006ffc:	463b      	mov	r3, r7
 8006ffe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007002:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007006:	f000 b817 	b.w	8007038 <_write_r>

0800700a <__sseek>:
 800700a:	b510      	push	{r4, lr}
 800700c:	460c      	mov	r4, r1
 800700e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007012:	f000 f855 	bl	80070c0 <_lseek_r>
 8007016:	1c43      	adds	r3, r0, #1
 8007018:	89a3      	ldrh	r3, [r4, #12]
 800701a:	bf15      	itete	ne
 800701c:	6560      	strne	r0, [r4, #84]	; 0x54
 800701e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007022:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007026:	81a3      	strheq	r3, [r4, #12]
 8007028:	bf18      	it	ne
 800702a:	81a3      	strhne	r3, [r4, #12]
 800702c:	bd10      	pop	{r4, pc}

0800702e <__sclose>:
 800702e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007032:	f000 b813 	b.w	800705c <_close_r>
	...

08007038 <_write_r>:
 8007038:	b538      	push	{r3, r4, r5, lr}
 800703a:	4604      	mov	r4, r0
 800703c:	4608      	mov	r0, r1
 800703e:	4611      	mov	r1, r2
 8007040:	2200      	movs	r2, #0
 8007042:	4d05      	ldr	r5, [pc, #20]	; (8007058 <_write_r+0x20>)
 8007044:	602a      	str	r2, [r5, #0]
 8007046:	461a      	mov	r2, r3
 8007048:	f7f9 fc01 	bl	800084e <_write>
 800704c:	1c43      	adds	r3, r0, #1
 800704e:	d102      	bne.n	8007056 <_write_r+0x1e>
 8007050:	682b      	ldr	r3, [r5, #0]
 8007052:	b103      	cbz	r3, 8007056 <_write_r+0x1e>
 8007054:	6023      	str	r3, [r4, #0]
 8007056:	bd38      	pop	{r3, r4, r5, pc}
 8007058:	2000020c 	.word	0x2000020c

0800705c <_close_r>:
 800705c:	b538      	push	{r3, r4, r5, lr}
 800705e:	2300      	movs	r3, #0
 8007060:	4d05      	ldr	r5, [pc, #20]	; (8007078 <_close_r+0x1c>)
 8007062:	4604      	mov	r4, r0
 8007064:	4608      	mov	r0, r1
 8007066:	602b      	str	r3, [r5, #0]
 8007068:	f7f9 fc0d 	bl	8000886 <_close>
 800706c:	1c43      	adds	r3, r0, #1
 800706e:	d102      	bne.n	8007076 <_close_r+0x1a>
 8007070:	682b      	ldr	r3, [r5, #0]
 8007072:	b103      	cbz	r3, 8007076 <_close_r+0x1a>
 8007074:	6023      	str	r3, [r4, #0]
 8007076:	bd38      	pop	{r3, r4, r5, pc}
 8007078:	2000020c 	.word	0x2000020c

0800707c <_fstat_r>:
 800707c:	b538      	push	{r3, r4, r5, lr}
 800707e:	2300      	movs	r3, #0
 8007080:	4d06      	ldr	r5, [pc, #24]	; (800709c <_fstat_r+0x20>)
 8007082:	4604      	mov	r4, r0
 8007084:	4608      	mov	r0, r1
 8007086:	4611      	mov	r1, r2
 8007088:	602b      	str	r3, [r5, #0]
 800708a:	f7f9 fc07 	bl	800089c <_fstat>
 800708e:	1c43      	adds	r3, r0, #1
 8007090:	d102      	bne.n	8007098 <_fstat_r+0x1c>
 8007092:	682b      	ldr	r3, [r5, #0]
 8007094:	b103      	cbz	r3, 8007098 <_fstat_r+0x1c>
 8007096:	6023      	str	r3, [r4, #0]
 8007098:	bd38      	pop	{r3, r4, r5, pc}
 800709a:	bf00      	nop
 800709c:	2000020c 	.word	0x2000020c

080070a0 <_isatty_r>:
 80070a0:	b538      	push	{r3, r4, r5, lr}
 80070a2:	2300      	movs	r3, #0
 80070a4:	4d05      	ldr	r5, [pc, #20]	; (80070bc <_isatty_r+0x1c>)
 80070a6:	4604      	mov	r4, r0
 80070a8:	4608      	mov	r0, r1
 80070aa:	602b      	str	r3, [r5, #0]
 80070ac:	f7f9 fc05 	bl	80008ba <_isatty>
 80070b0:	1c43      	adds	r3, r0, #1
 80070b2:	d102      	bne.n	80070ba <_isatty_r+0x1a>
 80070b4:	682b      	ldr	r3, [r5, #0]
 80070b6:	b103      	cbz	r3, 80070ba <_isatty_r+0x1a>
 80070b8:	6023      	str	r3, [r4, #0]
 80070ba:	bd38      	pop	{r3, r4, r5, pc}
 80070bc:	2000020c 	.word	0x2000020c

080070c0 <_lseek_r>:
 80070c0:	b538      	push	{r3, r4, r5, lr}
 80070c2:	4604      	mov	r4, r0
 80070c4:	4608      	mov	r0, r1
 80070c6:	4611      	mov	r1, r2
 80070c8:	2200      	movs	r2, #0
 80070ca:	4d05      	ldr	r5, [pc, #20]	; (80070e0 <_lseek_r+0x20>)
 80070cc:	602a      	str	r2, [r5, #0]
 80070ce:	461a      	mov	r2, r3
 80070d0:	f7f9 fbfd 	bl	80008ce <_lseek>
 80070d4:	1c43      	adds	r3, r0, #1
 80070d6:	d102      	bne.n	80070de <_lseek_r+0x1e>
 80070d8:	682b      	ldr	r3, [r5, #0]
 80070da:	b103      	cbz	r3, 80070de <_lseek_r+0x1e>
 80070dc:	6023      	str	r3, [r4, #0]
 80070de:	bd38      	pop	{r3, r4, r5, pc}
 80070e0:	2000020c 	.word	0x2000020c

080070e4 <_malloc_usable_size_r>:
 80070e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80070e8:	1f18      	subs	r0, r3, #4
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	bfbc      	itt	lt
 80070ee:	580b      	ldrlt	r3, [r1, r0]
 80070f0:	18c0      	addlt	r0, r0, r3
 80070f2:	4770      	bx	lr

080070f4 <_read_r>:
 80070f4:	b538      	push	{r3, r4, r5, lr}
 80070f6:	4604      	mov	r4, r0
 80070f8:	4608      	mov	r0, r1
 80070fa:	4611      	mov	r1, r2
 80070fc:	2200      	movs	r2, #0
 80070fe:	4d05      	ldr	r5, [pc, #20]	; (8007114 <_read_r+0x20>)
 8007100:	602a      	str	r2, [r5, #0]
 8007102:	461a      	mov	r2, r3
 8007104:	f7f9 fb86 	bl	8000814 <_read>
 8007108:	1c43      	adds	r3, r0, #1
 800710a:	d102      	bne.n	8007112 <_read_r+0x1e>
 800710c:	682b      	ldr	r3, [r5, #0]
 800710e:	b103      	cbz	r3, 8007112 <_read_r+0x1e>
 8007110:	6023      	str	r3, [r4, #0]
 8007112:	bd38      	pop	{r3, r4, r5, pc}
 8007114:	2000020c 	.word	0x2000020c

08007118 <_init>:
 8007118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800711a:	bf00      	nop
 800711c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800711e:	bc08      	pop	{r3}
 8007120:	469e      	mov	lr, r3
 8007122:	4770      	bx	lr

08007124 <_fini>:
 8007124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007126:	bf00      	nop
 8007128:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800712a:	bc08      	pop	{r3}
 800712c:	469e      	mov	lr, r3
 800712e:	4770      	bx	lr
